# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from agents.v1 import agents_pb2 as agents_dot_v1_dot_agents__pb2


class AgentServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Interact = channel.stream_stream(
                '/agents.v1.AgentService/Interact',
                request_serializer=agents_dot_v1_dot_agents__pb2.Event.SerializeToString,
                response_deserializer=agents_dot_v1_dot_agents__pb2.AgentAction.FromString,
                )


class AgentServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Interact(self, request_iterator, context):
        """Interact is a bidirectional stream of agent actions and events.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Interact': grpc.stream_stream_rpc_method_handler(
                    servicer.Interact,
                    request_deserializer=agents_dot_v1_dot_agents__pb2.Event.FromString,
                    response_serializer=agents_dot_v1_dot_agents__pb2.AgentAction.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agents.v1.AgentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AgentService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Interact(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/agents.v1.AgentService/Interact',
            agents_dot_v1_dot_agents__pb2.Event.SerializeToString,
            agents_dot_v1_dot_agents__pb2.AgentAction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AgentAudioVideoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Speak = channel.stream_unary(
                '/agents.v1.AgentAudioVideoService/Speak',
                request_serializer=agents_dot_v1_dot_agents__pb2.Word.SerializeToString,
                response_deserializer=agents_dot_v1_dot_agents__pb2.SpeakResponse.FromString,
                )


class AgentAudioVideoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Speak(self, request_iterator, context):
        """Speak is a stream of words to be spoken by the agent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentAudioVideoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Speak': grpc.stream_unary_rpc_method_handler(
                    servicer.Speak,
                    request_deserializer=agents_dot_v1_dot_agents__pb2.Word.FromString,
                    response_serializer=agents_dot_v1_dot_agents__pb2.SpeakResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agents.v1.AgentAudioVideoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AgentAudioVideoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Speak(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/agents.v1.AgentAudioVideoService/Speak',
            agents_dot_v1_dot_agents__pb2.Word.SerializeToString,
            agents_dot_v1_dot_agents__pb2.SpeakResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
