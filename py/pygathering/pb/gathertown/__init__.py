# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: gathertown/events.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    Dict,
    List,
    Optional,
)

import betterproto


class SpriteDirectionEnumEnum(betterproto.Enum):
    Stand = 0
    Down = 1
    DownAlt = 2
    Up = 3
    UpAlt = 4
    Left = 5
    LeftAlt = 6
    Right = 7
    RightAlt = 8
    Dance1 = 9
    Dance2 = 10
    Dance3 = 11
    Dance4 = 12


class MoveDirectionEnumEnum(betterproto.Enum):
    Left = 0
    Right = 1
    Up = 2
    Down = 3
    Dance = 4


class InteractionEnumEnum(betterproto.Enum):
    NONE = 0
    EMBEDDED_WEBSITE = 1
    POSTER = 2
    VIDEO = 3
    EXTERNAL_CALL = 4
    EXTENSION = 5
    NOTE = 6
    MODAL_EXTENSION = 7
    COMPONENT_MODAL = 8
    SIDE_PANEL_TRIGGER = 9


class RespondToAccessRequestLocationTypeEnum(betterproto.Enum):
    MyLocation = 0
    DefaultSpawn = 1


@dataclass(eq=False, repr=False)
class Deprecated(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SpriteDirectionEnum(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MoveDirectionEnum(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class InteractionEnum(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PlayerInitInfo(betterproto.Message):
    name: Optional[str] = betterproto.string_field(1, optional=True, group="_name")
    x: Optional[int] = betterproto.uint32_field(3, optional=True, group="_x")
    y: Optional[int] = betterproto.uint32_field(4, optional=True, group="_y")
    map: Optional[str] = betterproto.string_field(5, optional=True, group="_map")
    affiliation: Optional[str] = betterproto.string_field(
        6, optional=True, group="_affiliation"
    )
    busy: Optional[bool] = betterproto.bool_field(7, optional=True, group="_busy")
    text_status: Optional[str] = betterproto.string_field(
        8, optional=True, group="_textStatus"
    )
    emoji_status: Optional[str] = betterproto.string_field(
        9, optional=True, group="_emojiStatus"
    )
    currently_equipped_wearables: Optional["DbOutfit"] = betterproto.message_field(
        10, optional=True, group="_currentlyEquippedWearables"
    )
    focus_mode_end_time: Optional[str] = betterproto.string_field(
        11, optional=True, group="_focusModeEndTime"
    )
    item_string: Optional[str] = betterproto.string_field(
        14, optional=True, group="_itemString"
    )
    is_npc: Optional[bool] = betterproto.bool_field(15, optional=True, group="_isNpc")


@dataclass(eq=False, repr=False)
class DbOutfit(betterproto.Message):
    skin: str = betterproto.string_field(1)
    hair: str = betterproto.string_field(2)
    facial_hair: str = betterproto.string_field(3)
    top: str = betterproto.string_field(4)
    bottom: str = betterproto.string_field(5)
    shoes: str = betterproto.string_field(6)
    hat: str = betterproto.string_field(7)
    glasses: str = betterproto.string_field(8)
    other: str = betterproto.string_field(9)
    costume: Optional[str] = betterproto.string_field(
        10, optional=True, group="_costume"
    )
    mobility: Optional[str] = betterproto.string_field(
        11, optional=True, group="_mobility"
    )
    jacket: Optional[str] = betterproto.string_field(12, optional=True, group="_jacket")


@dataclass(eq=False, repr=False)
class WireObjectSpritesheetFraming(betterproto.Message):
    """Defines how to slice an incoming animation spritesheet"""

    frame_width: int = betterproto.int32_field(1)
    frame_height: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class WireObjectSpriteAnimConfig(betterproto.Message):
    """Defines an Spritesheet referencing frames from the split spritesheet"""

    use_sequence_as_range: Optional[bool] = betterproto.bool_field(
        1, optional=True, group="_useSequenceAsRange"
    )
    """
    Defines how to interpret the `sequence `field. If `true`, `sequence` is
    interpreted as a set of animation key frames which are interpolated between
    for the animation. For example, `sequence: [0,10], useSequenceAsRange:
    true` would mean the animation spans frames 0 _through_ 10 (inclusive). Use
    this when your animation uses sequential frames. Default: `false`
    """

    sequence: List[int] = betterproto.uint32_field(2)
    """
    * Defines which spritesheet frames make up this animation. **By default,**
    `sequence` should be an array of arbitrary frame numbers defining this
    animation.   ex: [4,5,4,5,4,6,6,6] animates between frames 4, 5, and 6 -
    but not necessarily in sequential order. **When `useSequenceAsRange` is
    `true`,** this should be set to two integers defining the **start** and
    **end** caps.   ex: [0, 10] means this animation starts on frame 0 and ends
    on frame 10 (inclusive).       (This is equivalent to setting sequence to
    `[0, 1, 2, ...]`)
    """

    loop: Optional[bool] = betterproto.bool_field(3, optional=True, group="_loop")
    """
    Does this animation repeat or should it stop on the last frame? (Default:
    false)
    """

    frame_rate: int = betterproto.uint32_field(4)
    """Frames per second this animation should display."""


@dataclass(eq=False, repr=False)
class WireObjectSpritesheet(betterproto.Message):
    """
    Animated objects need to declare their spritesheet, how to slice it, and
    the different Spritesheets provided by the given spritesheet.
    """

    spritesheet_url: str = betterproto.string_field(1)
    framing: "WireObjectSpritesheetFraming" = betterproto.message_field(2)
    animations: Dict[str, "WireObjectSpriteAnimConfig"] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    current_anim: Optional[str] = betterproto.string_field(
        4, optional=True, group="_currentAnim"
    )
    pause_animations_if_fps_below_framerate: Optional[bool] = betterproto.bool_field(
        5, optional=True, group="_pauseAnimationsIfFpsBelowFramerate"
    )


@dataclass(eq=False, repr=False)
class WireObject(betterproto.Message):
    template_id: Optional[str] = betterproto.string_field(
        1, optional=True, group="_templateId"
    )
    name: Optional[str] = betterproto.string_field(2, optional=True, group="X_name")
    tags: List[str] = betterproto.string_field(3)
    x: Optional[int] = betterproto.uint32_field(4, optional=True, group="_x")
    y: Optional[int] = betterproto.uint32_field(5, optional=True, group="_y")
    offset_x: Optional[float] = betterproto.float_field(
        6, optional=True, group="_offsetX"
    )
    offset_y: Optional[float] = betterproto.float_field(
        7, optional=True, group="_offsetY"
    )
    color: Optional[str] = betterproto.string_field(8, optional=True, group="_color")
    orientation: Optional[int] = betterproto.uint32_field(
        9, optional=True, group="_orientation"
    )
    normal: Optional[str] = betterproto.string_field(10, optional=True, group="_normal")
    highlighted: Optional[str] = betterproto.string_field(
        11, optional=True, group="_highlighted"
    )
    type: Optional["InteractionEnumEnum"] = betterproto.enum_field(
        12, optional=True, group="_type"
    )
    width: Optional[int] = betterproto.uint32_field(13, optional=True, group="_width")
    height: Optional[int] = betterproto.uint32_field(14, optional=True, group="_height")
    extension_class: Optional[str] = betterproto.string_field(
        15, optional=True, group="_extensionClass"
    )
    preview_message: Optional[str] = betterproto.string_field(
        16, optional=True, group="_previewMessage"
    )
    """
    Any custom value of `previewMessage` will be shown as is, not localized
    """

    dist_threshold: Optional[int] = betterproto.uint32_field(
        17, optional=True, group="_distThreshold"
    )
    properties_json: Optional[str] = betterproto.string_field(
        18, optional=True, group="_propertiesJson"
    )
    sound: Optional["Sound"] = betterproto.message_field(
        19, optional=True, group="_sound"
    )
    object_start_time: Optional["ObjectTime"] = betterproto.message_field(
        20, optional=True, group="_objectStartTime"
    )
    object_expire_time: Optional["ObjectTime"] = betterproto.message_field(
        21, optional=True, group="_objectExpireTime"
    )
    id: Optional[str] = betterproto.string_field(22, optional=True, group="_id")
    custom_state: Optional[str] = betterproto.string_field(
        23, optional=True, group="_customState"
    )
    object_placer_id: Optional[str] = betterproto.string_field(
        24, optional=True, group="_objectPlacerId"
    )
    num_go_karts: Optional[int] = betterproto.uint32_field(
        25, optional=True, group="_numGoKarts"
    )
    spritesheet: Optional["WireObjectSpritesheet"] = betterproto.message_field(
        26, optional=True, group="_spritesheet"
    )
    z_index: Optional[float] = betterproto.float_field(
        27, optional=True, group="_zIndex"
    )


@dataclass(eq=False, repr=False)
class SpaceMemberInfo(betterproto.Message):
    roles: Dict[str, bool] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_BOOL
    )
    """
    roles should be { [role in CoreRole]: boolean }, but we can't do string
    enums in protobuf
    """

    name: Optional[str] = betterproto.string_field(2, optional=True, group="_name")
    currently_equipped_wearables: Optional["DbOutfit"] = betterproto.message_field(
        4, optional=True, group="_currentlyEquippedWearables"
    )
    allow_screen_pointer: Optional[bool] = betterproto.bool_field(
        6, optional=True, group="_allowScreenPointer"
    )
    role: str = betterproto.string_field(7)
    """role should be CoreRole, but we can't do string enums in protobuf"""


@dataclass(eq=False, repr=False)
class BackedUpDeskObject(betterproto.Message):
    obj: "WireObject" = betterproto.message_field(1)
    offset_x: int = betterproto.uint32_field(2)
    offset_y: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DeskObjects(betterproto.Message):
    objects: Dict[str, "BackedUpDeskObject"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class DeskInfoV2(betterproto.Message):
    desk_id: Optional[str] = betterproto.string_field(1, optional=True, group="_deskId")
    description: Optional[str] = betterproto.string_field(
        2, optional=True, group="_description"
    )
    locked: Optional[bool] = betterproto.bool_field(3, optional=True, group="_locked")
    last_desk_objects: Optional["DeskObjects"] = betterproto.message_field(
        4, optional=True, group="_lastDeskObjects"
    )
    """
    this isn't up to date with what's actually on/around someone's desk, it
    just exists as a way to back up and restore those objects while they're
    switching desks
    """

    map_id: Optional[str] = betterproto.string_field(5, optional=True, group="_mapId")


@dataclass(eq=False, repr=False)
class MapAndDesk(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    desk_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Sound(betterproto.Message):
    src: str = betterproto.string_field(1)
    volume: float = betterproto.float_field(2)
    loop: bool = betterproto.bool_field(3)
    max_distance: int = betterproto.uint32_field(4)
    is_positional: Optional[bool] = betterproto.bool_field(
        5, optional=True, group="_isPositional"
    )
    stream: Optional[bool] = betterproto.bool_field(6, optional=True, group="_stream")


@dataclass(eq=False, repr=False)
class ObjectTime(betterproto.Message):
    """Can be deprecated?"""

    seconds: int = betterproto.uint32_field(1)
    timezone: Optional[str] = betterproto.string_field(
        2, optional=True, group="X_timezone"
    )


@dataclass(eq=False, repr=False)
class Space(betterproto.Message):
    space_id: str = betterproto.string_field(1)
    x: int = betterproto.uint32_field(2)
    y: int = betterproto.uint32_field(3)
    colored: Optional[bool] = betterproto.bool_field(4, optional=True, group="_colored")


@dataclass(eq=False, repr=False)
class NookCoords(betterproto.Message):
    coords: List["WirePoint"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AllowedUsers(betterproto.Message):
    users: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RequestUser(betterproto.Message):
    name: Optional[str] = betterproto.string_field(1, optional=True, group="_name")


@dataclass(eq=False, repr=False)
class RequestedUsers(betterproto.Message):
    users: Dict[str, "RequestUser"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    """
    maps uid to optional player metadata about users who requested to join
    """


@dataclass(eq=False, repr=False)
class RecordingInfo(betterproto.Message):
    active: bool = betterproto.bool_field(3)
    initiating_player: Optional[str] = betterproto.string_field(
        1, optional=True, group="_initiatingPlayer"
    )
    egress_id: Optional[str] = betterproto.string_field(
        4, optional=True, group="_egressId"
    )


@dataclass(eq=False, repr=False)
class NookDiff(betterproto.Message):
    nook_coords: Optional["NookCoords"] = betterproto.message_field(
        1, optional=True, group="_nookCoords"
    )
    colored: Optional[bool] = betterproto.bool_field(2, optional=True, group="_colored")
    name: Optional[str] = betterproto.string_field(3, optional=True, group="_name")
    bookable: Optional[bool] = betterproto.bool_field(
        4, optional=True, group="_bookable"
    )
    capacity: Optional[int] = betterproto.uint32_field(
        5, optional=True, group="_capacity"
    )
    restricted: Optional[bool] = betterproto.bool_field(
        6, optional=True, group="_restricted"
    )
    allowed_users: Optional["AllowedUsers"] = betterproto.message_field(
        7, optional=True, group="_allowedUsers"
    )
    requested_users: Optional["RequestedUsers"] = betterproto.message_field(
        8, optional=True, group="_requestedUsers"
    )
    is_in_meeting: Optional[bool] = betterproto.bool_field(
        9, optional=True, group="_isInMeeting"
    )
    is_desk: Optional[bool] = betterproto.bool_field(10, optional=True, group="_isDesk")
    recording_info: Optional["RecordingInfo"] = betterproto.message_field(
        11, optional=True, group="_recordingInfo"
    )


@dataclass(eq=False, repr=False)
class WirePoint(betterproto.Message):
    x: int = betterproto.uint32_field(1)
    y: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SpawnPoint(betterproto.Message):
    x: int = betterproto.uint32_field(1)
    y: int = betterproto.uint32_field(2)
    spawn_id: Optional[str] = betterproto.string_field(
        3, optional=True, group="_spawnId"
    )


@dataclass(eq=False, repr=False)
class Portal(betterproto.Message):
    x: int = betterproto.uint32_field(1)
    y: int = betterproto.uint32_field(2)
    target_map: Optional[str] = betterproto.string_field(
        3, optional=True, group="_targetMap"
    )
    target_url: Optional[str] = betterproto.string_field(
        4, optional=True, group="_targetUrl"
    )
    target_x: Optional[int] = betterproto.uint32_field(
        5, optional=True, group="_targetX"
    )
    target_y: Optional[int] = betterproto.uint32_field(
        6, optional=True, group="_targetY"
    )


@dataclass(eq=False, repr=False)
class Announcer(betterproto.Message):
    x: int = betterproto.uint32_field(1)
    y: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class Asset(betterproto.Message):
    """deprecating (NGN-123)"""

    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    src: str = betterproto.string_field(3)
    width: Optional[int] = betterproto.uint32_field(4, optional=True, group="_width")
    height: Optional[int] = betterproto.uint32_field(5, optional=True, group="_height")
    in_front: Optional[bool] = betterproto.bool_field(
        6, optional=True, group="_inFront"
    )


@dataclass(eq=False, repr=False)
class AreaPosition(betterproto.Message):
    x1: int = betterproto.uint32_field(1)
    y1: int = betterproto.uint32_field(2)
    x2: int = betterproto.uint32_field(3)
    y2: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class WireArea(betterproto.Message):
    category: Optional[str] = betterproto.string_field(
        1, optional=True, group="_category"
    )
    coords: List["AreaPosition"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DbDesk(betterproto.Message):
    coords: List["AreaPosition"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MapSetDimensions(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    width: int = betterproto.uint32_field(2)
    height: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MapSetCollisions(betterproto.Message):
    """this is the new version of impassable. maybe we should rename it?"""

    map_id: str = betterproto.string_field(1)
    x: int = betterproto.uint32_field(2)
    y: int = betterproto.uint32_field(3)
    w: int = betterproto.uint32_field(4)
    h: int = betterproto.uint32_field(5)
    mask: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class MapSetCollisionsBits(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    overwrite: bool = betterproto.bool_field(2)
    x: int = betterproto.uint32_field(3)
    y: int = betterproto.uint32_field(4)
    w: int = betterproto.uint32_field(5)
    h: int = betterproto.uint32_field(6)
    mask: bytes = betterproto.bytes_field(7)
    """
    the mask stored as bits where 0 is walkable and 1 is impassable to read a
    single bit:  byteIndex = ((y * w + x) / 8) | 0  bitIndex  = 1 << ((y * w +
    x) % 8)  impassable = (mask[byteIndex] & (1 << bitIndex)) !== 0
    """


@dataclass(eq=False, repr=False)
class MapSetBackgroundImagePath(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    background_image_path: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MapSetForegroundImagePath(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    foreground_image_path: str = betterproto.string_field(2)
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class MapSetNooks(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    nooks: Dict[str, "NookDiff"] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    overwrite: Optional[bool] = betterproto.bool_field(
        3, optional=True, group="_overwrite"
    )


@dataclass(eq=False, repr=False)
class MapSetSpawn(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    spawn: "WirePoint" = betterproto.message_field(2)
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class MapSetSpawns(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    spawns: List["SpawnPoint"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MapSetPortals(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    portals: List["Portal"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MapSetAnnouncer(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    announcer: List["Announcer"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MapSetAssets(betterproto.Message):
    """deprecating (NGN-123)"""

    map_id: str = betterproto.string_field(1)
    assets: List["Asset"] = betterproto.message_field(2)
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class MapSetObjectsV2(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    objects: Dict[str, "WireObject"] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    updates_are_overwrites: Optional[bool] = betterproto.bool_field(
        3, optional=True, group="_updatesAreOverwrites"
    )


@dataclass(eq=False, repr=False)
class MapSetName(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class MapSetMuteOnEntry(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    mute_on_entry: bool = betterproto.bool_field(2)
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class MapSetUseDrawnBg(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    use_drawn_bg: bool = betterproto.bool_field(2)
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class MapSetWalls(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    walls: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class MapSetFloors(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    floors: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class MapSetAreas(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    areas: Dict[str, "WireArea"] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class MapDeleteObjectByKey(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MapDeleteObjectById(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MapSetMiniMapImagePath(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    mini_map_image_path: str = betterproto.string_field(2)
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class MapSetEnabledChats(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    enabled_chats: List[str] = betterproto.string_field(2)
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class MapSetDescription(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class MapSetDecoration(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    decoration: str = betterproto.string_field(2)
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class MapSetTutorialTasks(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    tutorial_tasks: "WireTutorialTasks" = betterproto.message_field(2)
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class WireTutorialTasks(betterproto.Message):
    group_set_id: str = betterproto.string_field(1)
    areas: List["TutorialTaskMapArea"] = betterproto.message_field(2)
    auto_start: Optional[bool] = betterproto.bool_field(
        3, optional=True, group="_autoStart"
    )


@dataclass(eq=False, repr=False)
class TutorialTaskMapArea(betterproto.Message):
    area_id: str = betterproto.string_field(1)
    x: int = betterproto.uint32_field(2)
    y: int = betterproto.uint32_field(3)
    height: int = betterproto.uint32_field(4)
    width: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class MapSetScript(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    script: str = betterproto.string_field(2)
    delete: Optional[bool] = betterproto.bool_field(3, optional=True, group="_delete")


@dataclass(eq=False, repr=False)
class Inventory(betterproto.Message):
    items: Dict[str, "InventoryItem"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    order: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class InventoryItem(betterproto.Message):
    count: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SpaceItem(betterproto.Message):
    name: str = betterproto.string_field(1)
    category: Optional[str] = betterproto.string_field(
        2, optional=True, group="_category"
    )
    description: Optional[str] = betterproto.string_field(
        3, optional=True, group="_description"
    )
    preview_url: str = betterproto.string_field(4)
    meta: Dict[str, str] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    abilities: Dict[str, "ItemAbility"] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class ItemAbility(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MapLocation(betterproto.Message):
    map: str = betterproto.string_field(1)
    x: int = betterproto.uint32_field(2)
    y: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ServerClientBatch(betterproto.Message):
    events: List["ServerClientEvent"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ServerClientEvent(betterproto.Message):
    info: "Info" = betterproto.message_field(100, group="event")
    warn: "Warn" = betterproto.message_field(101, group="event")
    error: "ErrorEvent" = betterproto.message_field(102, group="event")
    ready: "Ready" = betterproto.message_field(103, group="event")
    server_heartbeat: "ServerHeartbeat" = betterproto.message_field(105, group="event")
    transaction_status: "TransactionStatus" = betterproto.message_field(
        107, group="event"
    )
    player_moves: "PlayerMoves" = betterproto.message_field(1, group="event")
    player_sets_status: "PlayerSetsStatus" = betterproto.message_field(5, group="event")
    player_spotlights: "PlayerSpotlights" = betterproto.message_field(6, group="event")
    player_rings: "PlayerRings" = betterproto.message_field(7, group="event")
    player_chats: "PlayerChats" = betterproto.message_field(9, group="event")
    player_ghosts: "PlayerGhosts" = betterproto.message_field(11, group="event")
    player_enters_whisper: "PlayerEntersWhisper" = betterproto.message_field(
        12, group="event"
    )
    player_leaves_whisper: "PlayerLeavesWhisper" = betterproto.message_field(
        13, group="event"
    )
    player_actively_speaks: "PlayerActivelySpeaks" = betterproto.message_field(
        14, group="event"
    )
    player_sets_name: "PlayerSetsName" = betterproto.message_field(17, group="event")
    player_sets_text_status: "PlayerSetsTextStatus" = betterproto.message_field(
        18, group="event"
    )
    player_sets_emoji_status: "PlayerSetsEmojiStatus" = betterproto.message_field(
        19, group="event"
    )
    player_sets_affiliation: "PlayerSetsAffiliation" = betterproto.message_field(
        20, group="event"
    )
    player_exits: "PlayerExits" = betterproto.message_field(21, group="event")
    player_sets_is_signed_in: "PlayerSetsIsSignedIn" = betterproto.message_field(
        41, group="event"
    )
    space_overwrites: "SpaceOverwrites" = betterproto.message_field(44, group="event")
    space_is_closed: "SpaceIsClosed" = betterproto.message_field(45, group="event")
    player_enters_portal: "PlayerEntersPortal" = betterproto.message_field(
        46, group="event"
    )
    space_sets_id_mapping: "SpaceSetsIdMapping" = betterproto.message_field(
        47, group="event"
    )
    player_sets_last_active: "PlayerSetsLastActive" = betterproto.message_field(
        48, group="event"
    )
    player_shoots_confetti: "PlayerShootsConfetti" = betterproto.message_field(
        49, group="event"
    )
    player_sets_event_status: "PlayerSetsEventStatus" = betterproto.message_field(
        50, group="event"
    )
    player_sets_in_conversation: "PlayerSetsInConversation" = betterproto.message_field(
        51, group="event"
    )
    player_sets_current_area: "PlayerSetsCurrentArea" = betterproto.message_field(
        53, group="event"
    )
    player_sets_image_pointer: "PlayerSetsImagePointer" = betterproto.message_field(
        54, group="event"
    )
    cookie_found: "CookieFound" = betterproto.message_field(55, group="event")
    player_enters_whisper_v2: "PlayerEntersWhisperV2" = betterproto.message_field(
        56, group="event"
    )
    player_sets_go_kart_id: "PlayerSetsGoKartId" = betterproto.message_field(
        57, group="event"
    )
    map_set_dimensions: "MapSetDimensions" = betterproto.message_field(
        58, group="event"
    )
    map_set_background_image_path: "MapSetBackgroundImagePath" = (
        betterproto.message_field(60, group="event")
    )
    map_set_foreground_image_path: "MapSetForegroundImagePath" = (
        betterproto.message_field(61, group="event")
    )
    map_set_spawns: "MapSetSpawns" = betterproto.message_field(64, group="event")
    map_set_portals: "MapSetPortals" = betterproto.message_field(65, group="event")
    map_set_announcer: "MapSetAnnouncer" = betterproto.message_field(66, group="event")
    map_set_assets: "MapSetAssets" = betterproto.message_field(69, group="event")
    map_set_name: "MapSetName" = betterproto.message_field(71, group="event")
    map_set_mute_on_entry: "MapSetMuteOnEntry" = betterproto.message_field(
        73, group="event"
    )
    map_set_use_drawn_bg: "MapSetUseDrawnBg" = betterproto.message_field(
        74, group="event"
    )
    map_set_walls: "MapSetWalls" = betterproto.message_field(75, group="event")
    map_set_floors: "MapSetFloors" = betterproto.message_field(76, group="event")
    map_set_areas: "MapSetAreas" = betterproto.message_field(77, group="event")
    map_set_spawn: "MapSetSpawn" = betterproto.message_field(79, group="event")
    player_sets_is_alone: "PlayerSetsIsAlone" = betterproto.message_field(
        80, group="event"
    )
    player_joins: "PlayerJoins" = betterproto.message_field(81, group="event")
    map_set_enabled_chats: "MapSetEnabledChats" = betterproto.message_field(
        82, group="event"
    )
    map_set_description: "MapSetDescription" = betterproto.message_field(
        83, group="event"
    )
    map_set_decoration: "MapSetDecoration" = betterproto.message_field(
        84, group="event"
    )
    map_set_tutorial_tasks: "MapSetTutorialTasks" = betterproto.message_field(
        85, group="event"
    )
    map_set_mini_map_image_path: "MapSetMiniMapImagePath" = betterproto.message_field(
        86, group="event"
    )
    space_plays_sound: "SpacePlaysSound" = betterproto.message_field(87, group="event")
    map_set_script: "MapSetScript" = betterproto.message_field(88, group="event")
    player_sets_is_mobile: "PlayerSetsIsMobile" = betterproto.message_field(
        90, group="event"
    )
    set_screen_pointer_server: "SetScreenPointerServer" = betterproto.message_field(
        91, group="event"
    )
    player_sets_emote_v2: "PlayerSetsEmoteV2" = betterproto.message_field(
        92, group="event"
    )
    player_sets_focus_mode_end_time: "PlayerSetsFocusModeEndTime" = (
        betterproto.message_field(93, group="event")
    )
    space_sets_space_members: "SpaceSetsSpaceMembers" = betterproto.message_field(
        94, group="event"
    )
    space_sets_space_users: "SpaceSetsSpaceUsers" = betterproto.message_field(
        167, group="event"
    )
    custom_event: "CustomEvent" = betterproto.message_field(95, group="event")
    player_blocks: "PlayerBlocks" = betterproto.message_field(97, group="event")
    player_updates_focus_mode_status: "PlayerUpdatesFocusModeStatus" = (
        betterproto.message_field(98, group="event")
    )
    player_notifies: "PlayerNotifies" = betterproto.message_field(99, group="event")
    player_sets_item_string: "PlayerSetsItemString" = betterproto.message_field(
        108, group="event"
    )
    player_sets_follow_target: "PlayerSetsFollowTarget" = betterproto.message_field(
        110, group="event"
    )
    player_requests_to_lead: "PlayerRequestsToLead" = betterproto.message_field(
        111, group="event"
    )
    player_sets_manual_video_src: "PlayerSetsManualVideoSrc" = (
        betterproto.message_field(112, group="event")
    )
    player_sets_is_npc: "PlayerSetsIsNpc" = betterproto.message_field(
        113, group="event"
    )
    player_sets_subtitle: "PlayerSetsSubtitle" = betterproto.message_field(
        114, group="event"
    )
    map_commits_changes: "MapCommitsChanges" = betterproto.message_field(
        115, group="event"
    )
    map_move_object: "MapMoveObject" = betterproto.message_field(117, group="event")
    player_edits_chat_message: "PlayerEditsChatMessage" = betterproto.message_field(
        118, group="event"
    )
    fx_shake_object: "FxShakeObject" = betterproto.message_field(119, group="event")
    fx_shake_camera: "FxShakeCamera" = betterproto.message_field(120, group="event")
    player_sends_command: "PlayerSendsCommand" = betterproto.message_field(
        121, group="event"
    )
    space_registers_command: "SpaceRegistersCommand" = betterproto.message_field(
        122, group="event"
    )
    speaker_updates_session: "SpeakerUpdatesSession" = betterproto.message_field(
        123, group="event"
    )
    player_updates_inventory: "PlayerUpdatesInventory" = betterproto.message_field(
        124, group="event"
    )
    space_updates_items: "SpaceUpdatesItems" = betterproto.message_field(
        125, group="event"
    )
    player_sets_vehicle_id: "PlayerSetsVehicleId" = betterproto.message_field(
        126, group="event"
    )
    player_sets_speed_modifier: "PlayerSetsSpeedModifier" = betterproto.message_field(
        127, group="event"
    )
    player_high_fives: "PlayerHighFives" = betterproto.message_field(128, group="event")
    space_stops_sound: "SpaceStopsSound" = betterproto.message_field(130, group="event")
    hip_to_be_square: "HipToBeSquare" = betterproto.message_field(131, group="event")
    player_crafts: "PlayerCrafts" = betterproto.message_field(132, group="event")
    player_triggers_inventory_item: "PlayerTriggersInventoryItem" = (
        betterproto.message_field(133, group="event")
    )
    player_sets_allow_screen_pointer: "PlayerSetsAllowScreenPointer" = (
        betterproto.message_field(134, group="event")
    )
    precomputed_enter_location: "PrecomputedEnterLocation" = betterproto.message_field(
        135, group="event"
    )
    got_request_mute: "GotRequestMute" = betterproto.message_field(136, group="event")
    player_sets_desk_info: "PlayerSetsDeskInfo" = betterproto.message_field(
        137, group="event"
    )
    map_set_nooks: "MapSetNooks" = betterproto.message_field(138, group="event")
    dynamic_gates: "DynamicGates" = betterproto.message_field(139, group="event")
    player_waves: "PlayerWaves" = betterproto.message_field(140, group="event")
    player_sets_pronouns: "PlayerSetsPronouns" = betterproto.message_field(
        141, group="event"
    )
    player_sets_title: "PlayerSetsTitle" = betterproto.message_field(142, group="event")
    player_sets_timezone: "PlayerSetsTimezone" = betterproto.message_field(
        143, group="event"
    )
    player_sets_description: "PlayerSetsDescription" = betterproto.message_field(
        144, group="event"
    )
    player_sets_phone: "PlayerSetsPhone" = betterproto.message_field(145, group="event")
    player_sets_personal_image_url: "PlayerSetsPersonalImageUrl" = (
        betterproto.message_field(146, group="event")
    )
    player_sets_profile_image_url: "PlayerSetsProfileImageUrl" = (
        betterproto.message_field(147, group="event")
    )
    space_sets_capacity: "SpaceSetsCapacity" = betterproto.message_field(
        148, group="event"
    )
    space_over_capacity_denies_user: "SpaceOverCapacityDeniesUser" = (
        betterproto.message_field(149, group="event")
    )
    player_sets_away: "PlayerSetsAway" = betterproto.message_field(150, group="event")
    map_set_collisions_bits: "MapSetCollisionsBits" = betterproto.message_field(
        151, group="event"
    )
    player_sets_city: "PlayerSetsCity" = betterproto.message_field(152, group="event")
    player_sets_country: "PlayerSetsCountry" = betterproto.message_field(
        153, group="event"
    )
    player_sets_start_date: "PlayerSetsStartDate" = betterproto.message_field(
        154, group="event"
    )
    player_starts_recording: "PlayerStartsRecording" = betterproto.message_field(
        156, group="event"
    )
    access_requests_updated: "AccessRequestsUpdated" = betterproto.message_field(
        157, group="event"
    )
    access_request_responded_to: "AccessRequestRespondedTo" = betterproto.message_field(
        158, group="event"
    )
    space_sets_guest_pass_statuses: "SpaceSetsGuestPassStatuses" = (
        betterproto.message_field(159, group="event")
    )
    player_sets_availability: "PlayerSetsAvailability" = betterproto.message_field(
        160, group="event"
    )
    subscriptions_updated: "SubscriptionsUpdated" = betterproto.message_field(
        161, group="event"
    )
    space_role_permission_override_updated: "SpaceRolePermissionOverrideUpdated" = (
        betterproto.message_field(164, group="event")
    )
    player_sets_last_raised_hand: "PlayerSetsLastRaisedHand" = (
        betterproto.message_field(165, group="event")
    )
    player_sets_currently_equipped_wearables: "PlayerSetsCurrentlyEquippedWearables" = (
        betterproto.message_field(166, group="event")
    )
    player_sets_display_email: "PlayerSetsDisplayEmail" = betterproto.message_field(
        168, group="event"
    )
    map_delete_object_by_key: "MapDeleteObjectByKey" = betterproto.message_field(
        169, group="event"
    )
    map_set_objects_v2: "MapSetObjectsV2" = betterproto.message_field(
        170, group="event"
    )
    player_interacts_with_object: "PlayerInteractsWithObject" = (
        betterproto.message_field(171, group="event")
    )
    player_triggers_object: "PlayerTriggersObject" = betterproto.message_field(
        172, group="event"
    )
    chime_sets_user_info: "ChimeSetsUserInfo" = betterproto.message_field(
        173, group="event"
    )


@dataclass(eq=False, repr=False)
class SubscriptionsUpdated(betterproto.Message):
    """
    the events the client is subscribed to has been changed on the server
    """

    subscriptions: List[str] = betterproto.string_field(1)
    """array of event names the client will be notified about"""


@dataclass(eq=False, repr=False)
class ServerHeartbeat(betterproto.Message):
    last_rtt: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class Info(betterproto.Message):
    message: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Warn(betterproto.Message):
    message: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ErrorEvent(betterproto.Message):
    message: str = betterproto.string_field(1)
    code: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class Ready(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class TransactionStatus(betterproto.Message):
    txn_id: int = betterproto.uint32_field(1)
    succeeded: bool = betterproto.bool_field(2)
    reason: Optional[str] = betterproto.string_field(3, optional=True, group="_reason")


@dataclass(eq=False, repr=False)
class PlayerJoins(betterproto.Message):
    """
    Always sent as the first message about any given player. If there are
    fields that must be initialized on clients immediately, they should be
    included in this message.
    """

    enc_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GotRequestMute(betterproto.Message):
    muter_id: str = betterproto.string_field(1)
    video: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PlayerMoves(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    x: Optional[int] = betterproto.uint32_field(2, optional=True, group="_x")
    """all optional, only send what's changed"""

    y: Optional[int] = betterproto.uint32_field(3, optional=True, group="_y")
    direction: Optional["SpriteDirectionEnumEnum"] = betterproto.enum_field(
        4, optional=True, group="_direction"
    )
    map_id: Optional[str] = betterproto.string_field(5, optional=True, group="_mapId")
    last_input_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class PlayerSetsStatus(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    busy: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsAvailability(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    status: str = betterproto.string_field(2)
    status_updated_at: Optional[str] = betterproto.string_field(
        3, optional=True, group="_statusUpdatedAt"
    )
    status_end_option: Optional[str] = betterproto.string_field(
        4, optional=True, group="_statusEndOption"
    )


@dataclass(eq=False, repr=False)
class PlayerSpotlights(betterproto.Message):
    enc_id: int = betterproto.uint32_field(2)
    spotlighted_by: int = betterproto.uint32_field(1)
    spotlighted: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerRings(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerSetsImagePointer(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    object_id: str = betterproto.string_field(2)
    x: float = betterproto.double_field(3)
    y: float = betterproto.double_field(4)


@dataclass(eq=False, repr=False)
class SetScreenPointerServer(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    screen_id: str = betterproto.string_field(2)
    x: float = betterproto.double_field(3)
    y: float = betterproto.double_field(4)
    color: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class PlayerChats(betterproto.Message):
    sender_id: str = betterproto.string_field(1)
    recipient: str = betterproto.string_field(2)
    contents: str = betterproto.string_field(3)
    sender_name: str = betterproto.string_field(4)
    timestamp: Optional["Timestamp"] = betterproto.message_field(
        5, optional=True, group="_timestamp"
    )
    message_type: str = betterproto.string_field(6)
    unix_time: float = betterproto.double_field(7)
    id: Optional[str] = betterproto.string_field(8, optional=True, group="_id")
    room_id: Optional[str] = betterproto.string_field(9, optional=True, group="_roomId")
    approved: Optional[bool] = betterproto.bool_field(
        10, optional=True, group="_approved"
    )
    nook_id: Optional[str] = betterproto.string_field(
        11, optional=True, group="_nookId"
    )


@dataclass(eq=False, repr=False)
class PlayerWaves(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    target_id: str = betterproto.string_field(2)
    is_reply: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class Timestamp(betterproto.Message):
    """deprecating this (NGN-710)"""

    seconds: float = betterproto.float_field(1)
    nanoseconds: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class PlayerInteractsWithObject(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    map_id: str = betterproto.string_field(2)
    key: str = betterproto.string_field(3)
    data_json: Optional[str] = betterproto.string_field(
        4, optional=True, group="_dataJson"
    )


@dataclass(eq=False, repr=False)
class PlayerGhosts(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    ghost: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerEntersWhisper(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    whisper_recipient: str = betterproto.string_field(2)
    whisper_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class PlayerEntersWhisperV2(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    enc_id_target: int = betterproto.uint32_field(2)
    whisper_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class PlayerLeavesWhisper(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerActivelySpeaks(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    actively_speaking: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsEmoteV2(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    emote: Optional[str] = betterproto.string_field(2, optional=True, group="_emote")
    count: Optional[int] = betterproto.uint32_field(3, optional=True, group="_count")


@dataclass(eq=False, repr=False)
class PlayerSetsLastRaisedHand(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    last_raised_hand: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsLastActive(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    last_active: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsName(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsTextStatus(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    text_status: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsPronouns(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    pronouns: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsTitle(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    title: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsCity(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    city: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsCountry(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    country: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsStartDate(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    start_date: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsTimezone(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    timezone: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsPhone(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    phone: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsDisplayEmail(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    display_email: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsDescription(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    description: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsProfileImageUrl(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    profile_image_url: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsPersonalImageUrl(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    personal_image_url: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsIsMobile(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    is_mobile: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsEmojiStatus(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    emoji_status: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsAffiliation(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    affiliation: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerExits(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerSetsCurrentlyEquippedWearables(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    currently_equipped_wearables: "DbOutfit" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsIsSignedIn(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    is_signed_in: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SpaceOverwrites(betterproto.Message):
    """
    It's pretty wack that we're using JSON to serialize / deserialize space
    data here. TODO: improve this by splitting this up into several events or
    using a better message interface for this or something that doesn't require
    the client to JSON.parse().
    """

    space_data: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DynamicGate(betterproto.Message):
    exposure: float = betterproto.float_field(1)
    spaces: List[str] = betterproto.string_field(2)
    refresh_on_change: Optional[bool] = betterproto.bool_field(
        3, optional=True, group="_refreshOnChange"
    )
    minimum_build_timestamp: Optional[int] = betterproto.uint64_field(
        4, optional=True, group="_minimumBuildTimestamp"
    )


@dataclass(eq=False, repr=False)
class DynamicGates(betterproto.Message):
    livekit_enabled: "DynamicGate" = betterproto.message_field(1)
    livekit_selfhost_enabled: Optional["DynamicGate"] = betterproto.message_field(
        2, optional=True, group="_livekitSelfhostEnabled"
    )
    agora_enabled: Optional["DynamicGate"] = betterproto.message_field(
        3, optional=True, group="_agoraEnabled"
    )
    chime_enabled: Optional["DynamicGate"] = betterproto.message_field(
        4, optional=True, group="_chimeEnabled"
    )
    gather_enabled: Optional["DynamicGate"] = betterproto.message_field(
        5, optional=True, group="_gatherEnabled"
    )


@dataclass(eq=False, repr=False)
class SpaceSetsSpaceMembers(betterproto.Message):
    members: Dict[str, "SpaceMemberInfo"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class WireSpaceUser(betterproto.Message):
    role: str = betterproto.string_field(1)
    """role should be CoreRole, but we can't do string enums in protobuf"""


@dataclass(eq=False, repr=False)
class SpaceSetsSpaceUsers(betterproto.Message):
    space_users: Dict[str, "WireSpaceUser"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class SpaceIsClosed(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PlayerEntersPortal(betterproto.Message):
    target_url: str = betterproto.string_field(1)
    bypass_prompt: Optional[bool] = betterproto.bool_field(
        2, optional=True, group="_bypassPrompt"
    )


@dataclass(eq=False, repr=False)
class CookieFound(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SpaceSetsIdMapping(betterproto.Message):
    """
    Each client has a unique string id, but this is costly to send over the
    wire so an integer value is used in its place and then converted back to
    the corresponding string id on the client and server. This event provides
    the mapping between a player's string id [uid] and their corresponding
    integer id [encId]. (see "Player..." events above for use of encId)
    """

    uid: str = betterproto.string_field(1)
    enc_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerShootsConfetti(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerSetsEventStatus(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    event_status: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsInConversation(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    in_conversation: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsCurrentArea(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    current_area: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsGoKartId(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    go_kart_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsVehicleId(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    vehicle_id: str = betterproto.string_field(2)
    action: str = betterproto.string_field(3)
    previous_vehicle_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class PlayerSetsSpeedModifier(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    speed_modifier: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsIsAlone(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    is_alone: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SpacePlaysSound(betterproto.Message):
    src: str = betterproto.string_field(2)
    volume: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class SpaceStopsSound(betterproto.Message):
    src: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsFocusModeEndTime(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    focus_mode_end_time: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerBlocks(betterproto.Message):
    blocked_by: str = betterproto.string_field(1)
    blocked: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CustomEvent(betterproto.Message):
    name: str = betterproto.string_field(1)
    payload: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerUpdatesFocusModeStatus(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    is_in_focus_mode: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsItemString(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    item_string: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerTriggersObject(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    map_id: Optional[str] = betterproto.string_field(2, optional=True, group="_mapId")
    """
    mapId and key are optional because the same action is used (with empty
    data) to drop the thing you're carrying
    """

    key: Optional[str] = betterproto.string_field(3, optional=True, group="_key")


@dataclass(eq=False, repr=False)
class PlayerNotifies(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    notification: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsFollowTarget(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    follow_target: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerRequestsToLead(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    snapshot: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsManualVideoSrc(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    manual_video_src: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsIsNpc(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    is_npc: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetsSubtitle(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    subtitle: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerCrafts(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    inputs: Dict[str, int] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class MapMoveObject(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    object_id: str = betterproto.string_field(2)
    target_x: float = betterproto.float_field(3)
    target_y: float = betterproto.float_field(4)
    target_x_offset: Optional[float] = betterproto.float_field(
        5, optional=True, group="_targetXOffset"
    )
    target_y_offset: Optional[float] = betterproto.float_field(
        6, optional=True, group="_targetYOffset"
    )
    duration: float = betterproto.float_field(7)
    """Time it takes to move object (in milliseconds)"""

    easing: Optional[str] = betterproto.string_field(8, optional=True, group="_easing")
    """
    "Linear" (default) | "Cubic" | "Elastic" | "Bounce" | "Back" --- Linear =
    constant speed. Cubic = slight easing. Elastic = spring-like motion; object
    overshoots point and ping-pongs until settling on the target. Bounce =
    similar to a bouncing object coming to rest Back = object slightly
    overshoots point and quickly settles back onto target.
    """


@dataclass(eq=False, repr=False)
class PlayerEditsChatMessage(betterproto.Message):
    id: str = betterproto.string_field(1)
    likes: Optional[int] = betterproto.uint32_field(2, optional=True, group="_likes")
    replied: Optional[bool] = betterproto.bool_field(3, optional=True, group="_replied")
    reply: Optional["ChatReply"] = betterproto.message_field(
        4, optional=True, group="_reply"
    )
    approved: Optional[bool] = betterproto.bool_field(
        5, optional=True, group="_approved"
    )


@dataclass(eq=False, repr=False)
class FxShakeObject(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    target_id: str = betterproto.string_field(2)
    intensity: Optional[float] = betterproto.float_field(
        3, optional=True, group="_intensity"
    )
    duration_ms: Optional[float] = betterproto.float_field(
        4, optional=True, group="_durationMs"
    )
    mode: Optional[int] = betterproto.uint32_field(5, optional=True, group="_mode")


@dataclass(eq=False, repr=False)
class FxShakeCamera(betterproto.Message):
    intensity: Optional[float] = betterproto.float_field(
        1, optional=True, group="_intensity"
    )
    duration_ms: Optional[float] = betterproto.float_field(
        2, optional=True, group="_durationMs"
    )
    map_id: Optional[str] = betterproto.string_field(3, optional=True, group="_mapId")
    """Map on which this should be applied (empty = entire space shakes)"""

    target_user_id: Optional[str] = betterproto.string_field(
        4, optional=True, group="_targetUserId"
    )
    """
    User ID this shake should apply to (empty = everyone in the given map or
    space will shake) If mapID _and_ a target is provided, the map ID is
    disregarded and only the target user will shake.
    """


@dataclass(eq=False, repr=False)
class PlayerHighFives(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    enc_id_target: int = betterproto.uint32_field(2)
    emote: Optional[str] = betterproto.string_field(3, optional=True, group="_emote")


@dataclass(eq=False, repr=False)
class PlayerSendsCommand(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    command: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SpaceRegistersCommand(betterproto.Message):
    command: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PlayerUpdatesInventory(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    items: Dict[str, "InventoryItem"] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    order: Dict[str, str] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class SpaceUpdatesItems(betterproto.Message):
    items: Dict[str, "SpaceItem"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class PlayerTriggersInventoryItem(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    item_id: str = betterproto.string_field(2)
    ability_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class PlayerSetsAllowScreenPointer(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    allow_screen_pointer: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PrecomputedEnterLocation(betterproto.Message):
    enter_location: "MapLocation" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PlayerSetsDeskInfo(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    desk_info: "DeskInfoV2" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SpaceSetsCapacity(betterproto.Message):
    capacity: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SpaceOverCapacityDeniesUser(betterproto.Message):
    user_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PlayerSetsAway(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    away: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PlayerStartsRecording(betterproto.Message):
    enc_id: int = betterproto.uint32_field(1)
    nook_id: str = betterproto.string_field(2)
    initializing: Optional[bool] = betterproto.bool_field(
        3, optional=True, group="_initializing"
    )


@dataclass(eq=False, repr=False)
class AccessRequest(betterproto.Message):
    guest_id: str = betterproto.string_field(1)
    member_id: str = betterproto.string_field(2)
    requested_at_unix_time: int = betterproto.uint64_field(3)
    guest_name: str = betterproto.string_field(4)
    guest_currently_equipped_wearables: Optional[
        "DbOutfit"
    ] = betterproto.message_field(
        6, optional=True, group="_guestCurrentlyEquippedWearables"
    )


@dataclass(eq=False, repr=False)
class AccessRequestsUpdated(betterproto.Message):
    requests: List["AccessRequest"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AccessRequestRespondedTo(betterproto.Message):
    target_id: str = betterproto.string_field(1)
    accepted: bool = betterproto.bool_field(2)
    location: "MapLocation" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PlayerGuestPassStatus(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    guest_pass_status: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SpaceSetsGuestPassStatuses(betterproto.Message):
    player_guest_pass_statuses: List[
        "PlayerGuestPassStatus"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SetDeskFromNextAvailableDesk(betterproto.Message):
    target_id: Optional[str] = betterproto.string_field(
        1, optional=True, group="_targetId"
    )
    preferred_desk: Optional["MapAndDesk"] = betterproto.message_field(
        2, optional=True, group="_preferredDesk"
    )
    desks_to_ignore: List["MapAndDesk"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SpaceRolePermissionOverrideUpdated(betterproto.Message):
    role: str = betterproto.string_field(1)
    permission: str = betterproto.string_field(2)
    enabled: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ChimeSetsUserInfo(betterproto.Message):
    resource: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ClientServerBatch(betterproto.Message):
    actions: List["ClientServerAction"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ClientServerAction(betterproto.Message):
    txn_id: Optional[int] = betterproto.uint32_field(100, optional=True, group="_txnId")
    """future: optional txnID field"""

    client_heartbeat: "ClientHeartbeat" = betterproto.message_field(1, group="action")
    client_backup_heartbeat: "ClientBackupHeartbeat" = betterproto.message_field(
        2, group="action"
    )
    update_subscriptions: "UpdateSubscriptions" = betterproto.message_field(
        3, group="action"
    )
    move: "Move" = betterproto.message_field(5, group="action")
    set_affiliation: "SetAffiliation" = betterproto.message_field(7, group="action")
    set_status: "SetStatus" = betterproto.message_field(8, group="action")
    spotlight: "Spotlight" = betterproto.message_field(9, group="action")
    ring: "Ring" = betterproto.message_field(10, group="action")
    ban: "Ban" = betterproto.message_field(12, group="action")
    kick: "Kick" = betterproto.message_field(13, group="action")
    set_impassable: "SetImpassable" = betterproto.message_field(14, group="action")
    chat: "Chat" = betterproto.message_field(15, group="action")
    interact: "Deprecated" = betterproto.message_field(18, group="action")
    enter_whisper: "EnterWhisper" = betterproto.message_field(19, group="action")
    leave_whisper: "LeaveWhisper" = betterproto.message_field(20, group="action")
    set_emoji_status: "SetEmojiStatus" = betterproto.message_field(21, group="action")
    actively_speaking: "ActivelySpeaking" = betterproto.message_field(
        22, group="action"
    )
    set_name: "SetName" = betterproto.message_field(24, group="action")
    set_text_status: "SetTextStatus" = betterproto.message_field(25, group="action")
    teleport: "Teleport" = betterproto.message_field(26, group="action")
    exit: "Exit" = betterproto.message_field(27, group="action")
    enter: "Enter" = betterproto.message_field(28, group="action")
    set_work_condition: "Deprecated" = betterproto.message_field(29, group="action")
    respawn: "Respawn" = betterproto.message_field(30, group="action")
    spawn: "Spawn" = betterproto.message_field(31, group="action")
    ghost: "Ghost" = betterproto.message_field(32, group="action")
    init: "Init" = betterproto.message_field(33, group="action")
    set_outfit_string: "Deprecated" = betterproto.message_field(34, group="action")
    shoot_confetti: "ShootConfetti" = betterproto.message_field(36, group="action")
    set_event_status: "SetEventStatus" = betterproto.message_field(37, group="action")
    set_in_conversation: "SetInConversation" = betterproto.message_field(
        38, group="action"
    )
    set_current_desk: "Deprecated" = betterproto.message_field(39, group="action")
    set_current_area: "SetCurrentArea" = betterproto.message_field(40, group="action")
    set_image_pointer: "SetImagePointer" = betterproto.message_field(41, group="action")
    set_go_kart_id: "Deprecated" = betterproto.message_field(42, group="action")
    map_set_dimensions: "MapSetDimensions" = betterproto.message_field(
        43, group="action"
    )
    map_set_collisions: "MapSetCollisions" = betterproto.message_field(
        44, group="action"
    )
    map_set_background_image_path: "MapSetBackgroundImagePath" = (
        betterproto.message_field(45, group="action")
    )
    map_set_foreground_image_path: "MapSetForegroundImagePath" = (
        betterproto.message_field(46, group="action")
    )
    map_set_sprites: "Deprecated" = betterproto.message_field(47, group="action")
    map_set_spawns: "MapSetSpawns" = betterproto.message_field(48, group="action")
    map_set_spaces: "Deprecated" = betterproto.message_field(49, group="action")
    map_set_portals: "MapSetPortals" = betterproto.message_field(50, group="action")
    map_set_announcer: "MapSetAnnouncer" = betterproto.message_field(51, group="action")
    map_set_assets: "MapSetAssets" = betterproto.message_field(54, group="action")
    map_set_objects: "Deprecated" = betterproto.message_field(55, group="action")
    map_set_name: "MapSetName" = betterproto.message_field(56, group="action")
    map_set_mute_on_entry: "MapSetMuteOnEntry" = betterproto.message_field(
        58, group="action"
    )
    map_set_use_drawn_bg: "MapSetUseDrawnBg" = betterproto.message_field(
        59, group="action"
    )
    map_set_walls: "MapSetWalls" = betterproto.message_field(60, group="action")
    map_set_floors: "MapSetFloors" = betterproto.message_field(61, group="action")
    map_set_areas: "MapSetAreas" = betterproto.message_field(62, group="action")
    map_add_object: "MapAddObject" = betterproto.message_field(63, group="action")
    map_delete_object: "Deprecated" = betterproto.message_field(64, group="action")
    map_set_spawn: "MapSetSpawn" = betterproto.message_field(65, group="action")
    set_is_alone: "SetIsAlone" = betterproto.message_field(66, group="action")
    map_set_mini_map_image_path: "MapSetMiniMapImagePath" = betterproto.message_field(
        67, group="action"
    )
    map_set_enabled_chats: "MapSetEnabledChats" = betterproto.message_field(
        68, group="action"
    )
    map_set_description: "MapSetDescription" = betterproto.message_field(
        69, group="action"
    )
    map_set_decoration: "MapSetDecoration" = betterproto.message_field(
        70, group="action"
    )
    map_set_tutorial_tasks: "MapSetTutorialTasks" = betterproto.message_field(
        71, group="action"
    )
    play_sound: "PlaySound" = betterproto.message_field(72, group="action")
    map_set_script: "MapSetScript" = betterproto.message_field(73, group="action")
    set_is_mobile: "SetIsMobile" = betterproto.message_field(75, group="action")
    set_screen_pointer: "SetScreenPointer" = betterproto.message_field(
        76, group="action"
    )
    set_emote_v2: "SetEmoteV2" = betterproto.message_field(77, group="action")
    set_focus_mode_end_time: "SetFocusModeEndTime" = betterproto.message_field(
        78, group="action"
    )
    map_delete_object_by_id: "MapDeleteObjectById" = betterproto.message_field(
        79, group="action"
    )
    custom_action: "CustomAction" = betterproto.message_field(80, group="action")
    block: "Block" = betterproto.message_field(82, group="action")
    set_item_string: "SetItemString" = betterproto.message_field(83, group="action")
    trigger_item: "Deprecated" = betterproto.message_field(84, group="action")
    notify: "Notify" = betterproto.message_field(85, group="action")
    set_follow_target: "SetFollowTarget" = betterproto.message_field(86, group="action")
    request_to_lead: "RequestToLead" = betterproto.message_field(87, group="action")
    enter_portal: "EnterPortal" = betterproto.message_field(88, group="action")
    set_manual_video_src: "SetManualVideoSrc" = betterproto.message_field(
        89, group="action"
    )
    set_subtitle: "SetSubtitle" = betterproto.message_field(90, group="action")
    player_updates_session: "Deprecated" = betterproto.message_field(91, group="action")
    map_move_object: "MapMoveObject" = betterproto.message_field(92, group="action")
    chat_message_updated: "ChatMessageUpdated" = betterproto.message_field(
        93, group="action"
    )
    fx_shake_object: "FxShakeObject" = betterproto.message_field(94, group="action")
    fx_shake_camera: "FxShakeCamera" = betterproto.message_field(95, group="action")
    register_command: "RegisterCommand" = betterproto.message_field(96, group="action")
    send_command: "SendCommand" = betterproto.message_field(97, group="action")
    speaker_updates_session: "SpeakerUpdatesSession" = betterproto.message_field(
        98, group="action"
    )
    add_inventory_item: "AddInventoryItem" = betterproto.message_field(
        101, group="action"
    )
    remove_inventory_item: "RemoveInventoryItem" = betterproto.message_field(
        102, group="action"
    )
    set_vehicle_id: "SetVehicleId" = betterproto.message_field(103, group="action")
    set_speed_modifier: "SetSpeedModifier" = betterproto.message_field(
        104, group="action"
    )
    high_five: "HighFive" = betterproto.message_field(105, group="action")
    update_space_items: "SpaceUpdatesItems" = betterproto.message_field(
        107, group="action"
    )
    stop_sound: "StopSound" = betterproto.message_field(108, group="action")
    hip_to_be_square: "HipToBeSquare" = betterproto.message_field(109, group="action")
    craft: "Craft" = betterproto.message_field(110, group="action")
    trigger_inventory_item: "TriggerInventoryItem" = betterproto.message_field(
        111, group="action"
    )
    set_allow_screen_pointer: "SetAllowScreenPointer" = betterproto.message_field(
        112, group="action"
    )
    precompute_enter: "PrecomputeEnter" = betterproto.message_field(113, group="action")
    request_mute: "RequestMute" = betterproto.message_field(114, group="action")
    set_desk_info: "SetDeskInfo" = betterproto.message_field(115, group="action")
    map_set_nooks: "MapSetNooks" = betterproto.message_field(116, group="action")
    request_to_join_nook: "RequestToJoinNook" = betterproto.message_field(
        117, group="action"
    )
    update_nook_permission: "UpdateNookPermission" = betterproto.message_field(
        118, group="action"
    )
    wave: "Wave" = betterproto.message_field(119, group="action")
    set_pronouns: "SetPronouns" = betterproto.message_field(120, group="action")
    set_title: "SetTitle" = betterproto.message_field(121, group="action")
    set_timezone: "SetTimezone" = betterproto.message_field(122, group="action")
    set_phone: "SetPhone" = betterproto.message_field(123, group="action")
    set_description: "SetDescription" = betterproto.message_field(124, group="action")
    set_profile_image_url: "SetProfileImageUrl" = betterproto.message_field(
        125, group="action"
    )
    set_personal_image_url: "SetPersonalImageUrl" = betterproto.message_field(
        126, group="action"
    )
    set_away: "SetAway" = betterproto.message_field(127, group="action")
    set_city: "SetCity" = betterproto.message_field(128, group="action")
    set_country: "SetCountry" = betterproto.message_field(129, group="action")
    set_start_date: "SetStartDate" = betterproto.message_field(130, group="action")
    start_recording: "StartRecording" = betterproto.message_field(131, group="action")
    request_access_via_check_in: "RequestAccessViaCheckIn" = betterproto.message_field(
        132, group="action"
    )
    respond_to_access_request: "RespondToAccessRequest" = betterproto.message_field(
        133, group="action"
    )
    set_availability: "SetAvailability" = betterproto.message_field(134, group="action")
    respawn_at_desk: "RespawnAtDesk" = betterproto.message_field(137, group="action")
    set_desk_from_next_available_desk: "SetDeskFromNextAvailableDesk" = (
        betterproto.message_field(138, group="action")
    )
    set_space_role_permission_override: "SetSpaceRolePermissionOverride" = (
        betterproto.message_field(139, group="action")
    )
    set_currently_equipped_wearables: "SetCurrentlyEquippedWearables" = (
        betterproto.message_field(140, group="action")
    )
    set_display_email: "SetDisplayEmail" = betterproto.message_field(
        141, group="action"
    )
    map_delete_object_by_key: "MapDeleteObjectByKey" = betterproto.message_field(
        142, group="action"
    )
    map_update_objects: "MapUpdateObjects" = betterproto.message_field(
        143, group="action"
    )
    interact_with_object: "InteractWithObject" = betterproto.message_field(
        144, group="action"
    )
    trigger_object: "TriggerObject" = betterproto.message_field(145, group="action")
    join_chime_meeting: "JoinChimeMeeting" = betterproto.message_field(
        146, group="action"
    )


@dataclass(eq=False, repr=False)
class ClientHeartbeat(betterproto.Message):
    """tbh this is half heartbeat half for measuring ping"""

    pass


@dataclass(eq=False, repr=False)
class ClientBackupHeartbeat(betterproto.Message):
    """
    this is because we've attached timings and stuff to the former one, don't
    want to interfere
    """

    pass


@dataclass(eq=False, repr=False)
class UpdateSubscriptions(betterproto.Message):
    subscriptions: Dict[str, bool] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_BOOL
    )
    map_update_ids: Dict[str, int] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_UINT64
    )


@dataclass(eq=False, repr=False)
class Move(betterproto.Message):
    dir: "MoveDirectionEnumEnum" = betterproto.enum_field(1)
    stopped: bool = betterproto.bool_field(2)
    input_id: int = betterproto.uint32_field(3)
    target_id: Optional[str] = betterproto.string_field(
        4, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class RequestMute(betterproto.Message):
    target: str = betterproto.string_field(1)
    video: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SetAffiliation(betterproto.Message):
    affiliation: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetStatus(betterproto.Message):
    status: bool = betterproto.bool_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetAvailability(betterproto.Message):
    availability: str = betterproto.string_field(1)
    end_option: Optional[str] = betterproto.string_field(
        2, optional=True, group="_endOption"
    )


@dataclass(eq=False, repr=False)
class SetCurrentlyEquippedWearables(betterproto.Message):
    currently_equipped_wearables: "DbOutfit" = betterproto.message_field(1)
    target_id: Optional[str] = betterproto.string_field(
        3, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class Spotlight(betterproto.Message):
    spotlighted_user: str = betterproto.string_field(1)
    is_spotlighted: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class Ring(betterproto.Message):
    user: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SetImagePointer(betterproto.Message):
    object_id: str = betterproto.string_field(1)
    x: float = betterproto.double_field(2)
    y: float = betterproto.double_field(3)


@dataclass(eq=False, repr=False)
class SetScreenPointer(betterproto.Message):
    screen_id: str = betterproto.string_field(1)
    x: float = betterproto.double_field(2)
    y: float = betterproto.double_field(3)


@dataclass(eq=False, repr=False)
class Ban(betterproto.Message):
    user: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Kick(betterproto.Message):
    user: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Block(betterproto.Message):
    blocked_user_id: str = betterproto.string_field(1)
    blocked: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SetImpassable(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    x: int = betterproto.uint32_field(2)
    y: int = betterproto.uint32_field(3)
    impassable: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class Chat(betterproto.Message):
    chat_recipient: str = betterproto.string_field(1)
    contents: str = betterproto.string_field(2)
    local_player_ids: List[str] = betterproto.string_field(3)
    map_id: str = betterproto.string_field(4)
    id: Optional[str] = betterproto.string_field(5, optional=True, group="_id")
    nook_id: Optional[str] = betterproto.string_field(6, optional=True, group="_nookId")


@dataclass(eq=False, repr=False)
class Notify(betterproto.Message):
    notification: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class InteractWithObject(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)
    data_json: Optional[str] = betterproto.string_field(
        3, optional=True, group="_dataJson"
    )


@dataclass(eq=False, repr=False)
class ActivelySpeaking(betterproto.Message):
    actively_speaking: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class EnterWhisper(betterproto.Message):
    recipient_id: str = betterproto.string_field(1)
    dir: "MoveDirectionEnumEnum" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class LeaveWhisper(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Ghost(betterproto.Message):
    ghost: int = betterproto.uint32_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )
    """why is this a uint32? it is in the original impl so.. it stays"""


@dataclass(eq=False, repr=False)
class SetEmoteV2(betterproto.Message):
    emote: Optional[str] = betterproto.string_field(1, optional=True, group="_emote")
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )
    count: Optional[int] = betterproto.uint32_field(3, optional=True, group="_count")


@dataclass(eq=False, repr=False)
class SetName(betterproto.Message):
    name: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetTextStatus(betterproto.Message):
    text_status: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetPronouns(betterproto.Message):
    pronouns: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetTitle(betterproto.Message):
    title: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetCity(betterproto.Message):
    city: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetCountry(betterproto.Message):
    country: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetStartDate(betterproto.Message):
    start_date: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetTimezone(betterproto.Message):
    timezone: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetPhone(betterproto.Message):
    phone: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetDisplayEmail(betterproto.Message):
    display_email: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetDescription(betterproto.Message):
    description: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetProfileImageUrl(betterproto.Message):
    profile_image_url: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetPersonalImageUrl(betterproto.Message):
    personal_image_url: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class Exit(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Enter(betterproto.Message):
    info: Optional["PlayerInitInfo"] = betterproto.message_field(
        1, optional=True, group="_info"
    )
    spawn_token: Optional[str] = betterproto.string_field(
        2, optional=True, group="_spawnToken"
    )
    target_id: Optional[str] = betterproto.string_field(
        3, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class PrecomputeEnter(betterproto.Message):
    enter_location: Optional["MapLocation"] = betterproto.message_field(
        1, optional=True, group="_enterLocation"
    )
    spawn_token: Optional[str] = betterproto.string_field(
        2, optional=True, group="_spawnToken"
    )


@dataclass(eq=False, repr=False)
class SetEmojiStatus(betterproto.Message):
    emoji_status: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class Teleport(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    x: int = betterproto.uint32_field(2)
    y: int = betterproto.uint32_field(3)
    target_id: Optional[str] = betterproto.string_field(
        4, optional=True, group="_targetId"
    )
    direction: Optional["SpriteDirectionEnumEnum"] = betterproto.enum_field(
        5, optional=True, group="_direction"
    )


@dataclass(eq=False, repr=False)
class Spawn(betterproto.Message):
    spawn_token: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Respawn(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RespawnAtDesk(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RequestToJoinNook(betterproto.Message):
    nook_id: str = betterproto.string_field(1)
    map_id: str = betterproto.string_field(2)
    name: Optional[str] = betterproto.string_field(3, optional=True, group="_name")


@dataclass(eq=False, repr=False)
class UpdateNookPermission(betterproto.Message):
    player_id: str = betterproto.string_field(1)
    nook_id: str = betterproto.string_field(2)
    granted: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class Init(betterproto.Message):
    space_id: str = betterproto.string_field(1)
    token: str = betterproto.string_field(2, group="auth")
    api_key: str = betterproto.string_field(3, group="auth")


@dataclass(eq=False, repr=False)
class MapAddObject(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    object: "WireObject" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MapUpdateObjects(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    objects: Dict[str, "WireObject"] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    updates_are_overwrites: Optional[bool] = betterproto.bool_field(
        3, optional=True, group="_updatesAreOverwrites"
    )


@dataclass(eq=False, repr=False)
class ShootConfetti(betterproto.Message):
    target_id: Optional[str] = betterproto.string_field(
        1, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetEventStatus(betterproto.Message):
    event_status: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetInConversation(betterproto.Message):
    in_conversation: bool = betterproto.bool_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetCurrentArea(betterproto.Message):
    current_area: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetVehicleId(betterproto.Message):
    vehicle_id: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )
    action: Optional[str] = betterproto.string_field(3, optional=True, group="_action")


@dataclass(eq=False, repr=False)
class SetSpeedModifier(betterproto.Message):
    speed_modifier: float = betterproto.float_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetIsAlone(betterproto.Message):
    is_alone: bool = betterproto.bool_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetIsMobile(betterproto.Message):
    is_mobile: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class PlaySound(betterproto.Message):
    src: str = betterproto.string_field(1)
    volume: float = betterproto.float_field(2)
    target_id: Optional[str] = betterproto.string_field(
        3, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class StopSound(betterproto.Message):
    src: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        3, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetFocusModeEndTime(betterproto.Message):
    focus_mode_end_time: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetItemString(betterproto.Message):
    item_string: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class TriggerObject(betterproto.Message):
    map_id: Optional[str] = betterproto.string_field(1, optional=True, group="_mapId")
    key: Optional[str] = betterproto.string_field(2, optional=True, group="_key")


@dataclass(eq=False, repr=False)
class CustomAction(betterproto.Message):
    name: str = betterproto.string_field(1)
    payload: str = betterproto.string_field(2)
    recipients: List[str] = betterproto.string_field(3)
    send_to_all: Optional[bool] = betterproto.bool_field(
        4, optional=True, group="_sendToAll"
    )


@dataclass(eq=False, repr=False)
class SetFollowTarget(betterproto.Message):
    follow_target: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class RequestToLead(betterproto.Message):
    target: str = betterproto.string_field(1)
    snapshot: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class EnterPortal(betterproto.Message):
    target_url: str = betterproto.string_field(1)
    bypass_prompt: Optional[bool] = betterproto.bool_field(
        2, optional=True, group="_bypassPrompt"
    )
    target_id: Optional[str] = betterproto.string_field(
        3, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetManualVideoSrc(betterproto.Message):
    manual_video_src: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class SetSubtitle(betterproto.Message):
    subtitle: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class MapCommitsChanges(betterproto.Message):
    map_id: str = betterproto.string_field(1)
    update_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class SpeakerUpdatesSession(betterproto.Message):
    session_id: str = betterproto.string_field(1)
    customize_room_enabled: Optional[bool] = betterproto.bool_field(
        2, optional=True, group="_customizeRoomEnabled"
    )
    chat_enabled: Optional[bool] = betterproto.bool_field(
        3, optional=True, group="_chatEnabled"
    )
    qa_enabled: Optional[bool] = betterproto.bool_field(
        4, optional=True, group="_qaEnabled"
    )
    approve_questions_enabled: Optional[bool] = betterproto.bool_field(
        5, optional=True, group="_approveQuestionsEnabled"
    )
    mass_mute_enabled: Optional[bool] = betterproto.bool_field(
        6, optional=True, group="_massMuteEnabled"
    )


@dataclass(eq=False, repr=False)
class ChatReply(betterproto.Message):
    sender_id: str = betterproto.string_field(1)
    sender_name: str = betterproto.string_field(2)
    contents: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ChatMessageUpdated(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SendCommand(betterproto.Message):
    command: str = betterproto.string_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class RegisterCommand(betterproto.Message):
    command: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Craft(betterproto.Message):
    inputs: Dict[str, int] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_INT32
    )


@dataclass(eq=False, repr=False)
class HighFive(betterproto.Message):
    target_id: str = betterproto.string_field(1)
    emote: Optional[str] = betterproto.string_field(2, optional=True, group="_emote")


@dataclass(eq=False, repr=False)
class AddInventoryItem(betterproto.Message):
    item_id: str = betterproto.string_field(1)
    delta: int = betterproto.uint64_field(2)
    target_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class RemoveInventoryItem(betterproto.Message):
    item_id: str = betterproto.string_field(1)
    delta: int = betterproto.uint64_field(2)
    target_id: Optional[str] = betterproto.string_field(
        3, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class HipToBeSquare(betterproto.Message):
    data: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class TriggerInventoryItem(betterproto.Message):
    item_id: str = betterproto.string_field(1)
    ability_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SetAllowScreenPointer(betterproto.Message):
    allow_screen_pointer: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class SetDeskInfo(betterproto.Message):
    desk_info: "DeskInfoV2" = betterproto.message_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class Wave(betterproto.Message):
    user: str = betterproto.string_field(1)
    is_reply: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SetAway(betterproto.Message):
    away: bool = betterproto.bool_field(1)
    target_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_targetId"
    )


@dataclass(eq=False, repr=False)
class StartRecording(betterproto.Message):
    nook_id: str = betterproto.string_field(1)
    initializing: Optional[bool] = betterproto.bool_field(
        2, optional=True, group="_initializing"
    )


@dataclass(eq=False, repr=False)
class RequestAccessViaCheckIn(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    canceled: bool = betterproto.bool_field(2)
    name: Optional[str] = betterproto.string_field(3, optional=True, group="_name")
    currently_equipped_wearables: Optional["DbOutfit"] = betterproto.message_field(
        5, optional=True, group="_currentlyEquippedWearables"
    )


@dataclass(eq=False, repr=False)
class RespondToAccessRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    accepted: bool = betterproto.bool_field(2)
    location_type: Optional[
        "RespondToAccessRequestLocationTypeEnum"
    ] = betterproto.enum_field(3, optional=True, group="_locationType")


@dataclass(eq=False, repr=False)
class SetSpaceRolePermissionOverride(betterproto.Message):
    role: str = betterproto.string_field(1)
    permission: str = betterproto.string_field(2)
    enabled: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class JoinChimeMeeting(betterproto.Message):
    media_region: Optional[str] = betterproto.string_field(
        1, optional=True, group="_mediaRegion"
    )
