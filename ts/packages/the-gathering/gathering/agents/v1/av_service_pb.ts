// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file gathering/agents/v1/av_service.proto (package gathering.agents.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Words is a stream of words.
 *
 * @generated from message gathering.agents.v1.WordEvent
 */
export class WordEvent extends Message<WordEvent> {
  /**
   * @generated from field: string agent_id = 1;
   */
  agentId = "";

  /**
   * @generated from field: string word = 2;
   */
  word = "";

  constructor(data?: PartialMessage<WordEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gathering.agents.v1.WordEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "word", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WordEvent {
    return new WordEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WordEvent {
    return new WordEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WordEvent {
    return new WordEvent().fromJsonString(jsonString, options);
  }

  static equals(a: WordEvent | PlainMessage<WordEvent> | undefined, b: WordEvent | PlainMessage<WordEvent> | undefined): boolean {
    return proto3.util.equals(WordEvent, a, b);
  }
}

/**
 * Placeholder response
 *
 * @generated from message gathering.agents.v1.SpeakResponse
 */
export class SpeakResponse extends Message<SpeakResponse> {
  constructor(data?: PartialMessage<SpeakResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gathering.agents.v1.SpeakResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpeakResponse {
    return new SpeakResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpeakResponse {
    return new SpeakResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpeakResponse {
    return new SpeakResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpeakResponse | PlainMessage<SpeakResponse> | undefined, b: SpeakResponse | PlainMessage<SpeakResponse> | undefined): boolean {
    return proto3.util.equals(SpeakResponse, a, b);
  }
}

