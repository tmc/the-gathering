import { LogTypes } from "./Logger";
import { Announcer, ChatMessageUpdated, DBOutfit, DeskInfoV2, HipToBeSquare, MapAndDesk, NookDiff, PlayerInitInfo, Portal, RespondToAccessRequest_LocationTypeEnum, SpaceItem, SpawnPoint, SpeakerUpdatesSession, WireArea } from "@gathertown/gather-game-common/dist/src/public/events";
import { EnabledChat, MapObject, MapObjectToAdd, TutorialTasks } from "@gathertown/gather-game-common/dist/src/public/gameMap";
import { PartialGameState } from "@gathertown/gather-game-common/dist/src/public/gameState";
import { MoveDirection, Player, PlayerStatusEndOption, PlayerStatusOption, SpriteDirection } from "@gathertown/gather-game-common/dist/src/public/player";
import { ActionDataByCase, ClientServerActionAction, ClientServerActionCase, ServerClientEventCase } from "@gathertown/gather-game-common/dist/src/public/utils";
import { Engine, EngineAuth } from "./Engine";
import { GameEventContext } from "./GameEventContexts";
import { GameEventByCase, GameEventCase } from "./GameEventUtils";
import { GameMap } from "./GameMap";
export * from "@gathertown/gather-game-common/dist/src/public/events";
export * from "@gathertown/gather-game-common/dist/src/public/gameMap";
export * from "@gathertown/gather-game-common/dist/src/public/gameState";
export * from "@gathertown/gather-game-common/dist/src/public/player";
export * from "@gathertown/gather-game-common/dist/src/public/position";
export * from "@gathertown/gather-game-common/dist/src/public/responseCodes";
export * from "@gathertown/gather-game-common/dist/src/public/remoteWork";
export * from "@gathertown/gather-game-common/dist/src/public/utils";
type GameEventSubscriptions<T extends GameEventCase> = {
    [uuid: string]: {
        handler: (data: GameEventByCase<T>, context: GameEventContext) => void;
        filter: ((data: GameEventByCase<T>, context: GameEventContext) => boolean) | undefined;
    };
};
export type GameEventSubscriptionMap = {
    [eventId in GameEventCase]?: GameEventSubscriptions<eventId>;
};
type EventSubscriptions = {
    [event in ServerClientEventCase]?: boolean;
};
export type GameOptions = {
    logLevels?: LogTypes;
    overrideServer?: string;
    overrideHttpServer?: string;
    subscribeTo?: EventSubscriptions;
};
export declare class Game {
    spaceId?: string;
    engine?: Engine;
    intendToBeConnected: boolean;
    getAuth: () => Promise<EngineAuth>;
    private readonly updateSubscriptionsPromise;
    private subscriptionFinishedCallback;
    private _initializedAtMs;
    private _connectedAtMs;
    private hasSentMapSinceConnect;
    private timeToFirstOnMapsMs;
    private _onMapCounts;
    private _connectCalledAt;
    private _timeToConnect;
    debugOverrideServer?: string;
    private subscriptions;
    private disconnectHandlers;
    legacySubscriptionsConnection: {
        [uuid: string]: (connected: boolean) => void;
    };
    private eventSubscriptions;
    private encIdMapping;
    private playerUidsSeenOnConnect;
    private checkForExitsTimeout;
    private lastDeployTime;
    players: {
        [uid: string]: Player;
    };
    dispatchGameUpdate?: (delta: PartialGameState<Player>) => void;
    dispatchMapUpdate?: (mapId: string, map: Readonly<GameMap>) => void;
    eventPerfCallbacks: ((eventId: GameEventCase, duration: DOMHighResTimeStamp) => void)[];
    private mapsAccumulator;
    completeMaps: {
        [id: string]: GameMap;
    };
    partialMaps: {
        [id: string]: Partial<GameMap>;
    };
    lastMapUpdateIds: {
        [id: string]: number;
    };
    onInput: ((dir: MoveDirection, stopped: boolean, inputId: number, txnPromise: Promise<unknown>) => void) | undefined;
    inputId: number;
    private mapDataChecks;
    private mapDataCheckInterval;
    spaceItems: {
        [id: string]: SpaceItem;
    };
    putMetric: (metricName: string, metricValue: unknown) => void;
    debug(debugState?: boolean): void;
    constructor(spaceId: string, getAuth: () => Promise<EngineAuth>, onInput?: (dir: MoveDirection, stopped: boolean, inputId: number, txnPromise: Promise<unknown>) => void, dispatchGameUpdate?: (delta: PartialGameState<Player>) => void, dispatchMapUpdate?: (mapId: string, map: Readonly<GameMap>) => void, options?: GameOptions);
    init(spaceId: string, _overrideServer?: string, _overrideHttpServer?: string): void;
    connect(): void;
    waitForInit(): Promise<void>;
    waitForFirstEnter(playerId: string): Promise<void>;
    disconnect(): Promise<void>;
    getPlayer(uid: string): Player | undefined;
    getPlayerUidFromEncId(encId: number): string | undefined;
    publishEvent<T extends GameEventCase>(eventId: T, data: GameEventByCase<T>, context: GameEventContext): void;
    subscribeToEvent<T extends GameEventCase>(eventId: T, handler: (data: GameEventByCase<T>, context: GameEventContext) => void, filter?: (data: GameEventByCase<T>, context: GameEventContext) => boolean): () => void;
    subscribeToConnection(callback: (connected: boolean) => void): () => void;
    subscribeToDisconnection(callback: (code?: number, reason?: string) => void): () => void;
    subscribeToEventPerf(callback: (eventId: GameEventCase, duration: DOMHighResTimeStamp) => void): () => void;
    sendAction(action: ClientServerActionAction, useTxn: true, txnTimeout?: number): Promise<unknown>;
    sendAction(action: ClientServerActionAction, useTxn?: false, txnTimeout?: undefined): void;
    sendAction(action: ClientServerActionAction, useTxn?: boolean, txnTimeout?: number): Promise<unknown> | void;
    sendAction2<TCase extends ClientServerActionCase>(actionId: TCase, actionData: ActionDataByCase<TCase>, useTxn: true, txnTimeoutMs?: number): Promise<unknown>;
    sendAction2<TCase extends ClientServerActionCase>(actionId: TCase, actionData: ActionDataByCase<TCase>, useTxn?: boolean, txnTimeoutMs?: number): Promise<unknown> | void;
    enter(info: PlayerInitInfo, spawnToken?: string, targetId?: string): void;
    exit(useTxn?: boolean): void | Promise<unknown> | undefined;
    respawn(useTxn?: boolean): void | Promise<unknown>;
    spawn(spawnToken: string): void;
    move(dir: MoveDirection, stopped?: boolean, targetId?: string, txnTimeout?: number): void;
    playSound(src: string, volume: number, targetId?: string): void;
    stopSound(src: string, targetId?: string): void;
    ghost(ghost: number, targetId?: string): void;
    enterWhisper(recipientId: string, dir: MoveDirection): void;
    leaveWhisper(): void;
    teleport(mapId: string, x: number, y: number, targetId?: string, direction?: SpriteDirection): void;
    ring(user: string): void;
    block(blockedUserId: string, blocked: boolean): void;
    pointer(objectId: string, x: number, y: number): void;
    wave(user: string, isReply?: boolean): void;
    screenPointer(screenId: string, x: number, y: number): void;
    setActivelySpeaking(activelySpeaking: boolean): void;
    requestMute(target: string, video: boolean): void;
    setEmote(emote: string | undefined, targetId?: string, count?: number): void;
    setAway(away: boolean, targetId?: string): void;
    setName(name: string, targetId?: string): void;
    setIsMobile(isMobile: boolean): void;
    setTextStatus(textStatus: string, targetId?: string): void;
    setEmojiStatus(emojiStatus: string, targetId?: string): void;
    setPronouns(pronouns: string, targetId?: string): void;
    setTimezone(timezone: string, targetId?: string): void;
    setTitle(title: string, targetId?: string): void;
    setCity(city: string, targetId?: string): void;
    setCountry(country: string, targetId?: string): void;
    setStartDate(startDate: string, targetId?: string): void;
    setPhone(phone: string, targetId?: string): void;
    setDisplayEmail(displayEmail: string, targetId?: string): void;
    setDescription(description: string, targetId?: string): void;
    setProfileImageUrl(profileImageUrl: string, targetId?: string): void;
    setPersonalImageUrl(personalImageUrl: string, targetId?: string): void;
    setAffiliation(affiliation: string, targetId?: string): void;
    setAvailability(availability: PlayerStatusOption, endOption?: PlayerStatusEndOption): void;
    setEventStatus(eventStatus: string, targetId?: string): void;
    setInConversation(inConversation: boolean, targetId?: string): void;
    setCurrentlyEquippedWearables(currentlyEquippedWearables: DBOutfit, targetId?: string): void;
    clearItem(targetId?: string): void;
    setItem(itemId: string, itemImage: string, targetId?: string): void;
    triggerObject(mapId?: string, key?: string): void;
    setSpotlight(user: string, spotlighted: boolean): void;
    banPlayer(user: string): void;
    kickPlayer(user: string): void;
    interact(mapId: string, key: string, data?: unknown): void;
    chat(chatRecipient: string, localPlayers: string[], mapId: string, data: {
        id?: string;
        contents: string;
        nookId?: string;
    }): void;
    chatMessageUpdated(message: ChatMessageUpdated): void;
    registerCommand(command: string): Promise<unknown>;
    sendCommand(command: string, targetId?: string): void;
    notify(notification: string): void;
    shootConfetti(targetId?: string): void;
    setVehicleId(vehicleId: string, action: string, targetId?: string): void;
    setSpeedModifier(speedModifier: number, targetId?: string): void;
    setIsAlone(isAlone: boolean, targetId?: string): void;
    setFocusModeEndTime(focusModeEndTime: string, targetId?: string): void;
    setFollowTarget(followTarget: string, targetId?: string): void;
    enterPortal(targetUrl: string, targetId?: string, bypassPrompt?: boolean): void;
    setMapDimensions(mapId: string, width: number, height: number): void;
    setMapCollisions(mapId: string, x: number, y: number, w: number, h: number, mask: string): void;
    setMapBackgroundImagePath(mapId: string, backgroundImagePath: string): void;
    setMapForegroundImagePath(mapId: string, foregroundImagePath: string): void;
    setMapSpawns(mapId: string, spawns: SpawnPoint[]): void;
    setMapNooks(mapId: string, nooks: {
        [key: string]: NookDiff;
    }, overwrite?: boolean, useTxn?: boolean): void | Promise<unknown>;
    setMapPortals(mapId: string, portals: Portal[]): void;
    requestToJoinNook(nookId: string, mapId: string, name?: string): void;
    updateNookPermission(playerId: string, nookId: string, granted: boolean): void;
    setMapAnnouncer(mapId: string, announcer: Announcer[]): void;
    setMapObjects(mapId: string, objects: {
        [key: string]: Partial<MapObject>;
    }, updatesAreOverwrites?: boolean): void;
    moveMapObject(mapId: string, objectId: string, targetWorldPos: {
        x: number;
        y: number;
        xOffset?: number;
        yOffset?: number;
    }, durationMs: number, easing?: "Linear" | "Cubic" | "Elastic" | "Bounce" | "Back"): void;
    fxShakeObject(mapId: string, targetObjId: string, intensity?: number, durationMs?: number, mode?: number): void;
    fxShakeCamera(mapId?: string, playerId?: string, intensity?: number, durationMs?: number): void;
    setMapName(mapId: string, name: string): void;
    setMapMuteOnEntry(mapId: string, muteOnEntry: boolean): void;
    setMapUseDrawnBG(mapId: string, useDrawnBG: boolean): void;
    setMapAreas(mapId: string, areas: {
        [areaName: string]: WireArea;
    }): void;
    setMapMiniMapImagePath(mapId: string, miniMapImagePath: string): void;
    setMapEnabledChats(mapId: string, enabledChats: EnabledChat[]): void;
    setMapDescription(mapId: string, description: string): void;
    setMapDecoration(mapId: string, decoration: string): void;
    setMapTutorialTasks(mapId: string, tutorialTasks: TutorialTasks): void;
    setImpassable(mapId: string, x: number, y: number, impassable?: boolean): void;
    getImpassable(mapId: string, x: number, y: number): boolean;
    getObject(objId: string, mapId?: string): {
        mapId: string;
        obj: MapObject;
        key: string;
    } | null;
    getObjectByKey(mapId: string, key: string): MapObject | undefined;
    updateObject(mapId: string, key: string, obj: Partial<MapObject>, useTxn?: boolean): void | Promise<unknown>;
    setObject(mapId: string, objId: string, _obj: Partial<MapObject>, useTxnId?: boolean): void | Promise<unknown>;
    addObject(mapId: string, obj: MapObjectToAdd, useTxn?: boolean): void | Promise<unknown>;
    deleteObjectByKey(mapId: string, key: string, createTxnId?: boolean): Promise<unknown>;
    deleteObject(mapId: string, objId: string, createTxnId?: boolean): Promise<unknown>;
    requestToLead(target: string, snapshot?: string): Promise<void>;
    setManualVideoSrc(manualVideoSrc: string, targetId?: string): void;
    setSubtitle(subtitle: string, targetId?: string): Promise<void>;
    highFive(targetId: string, emote: string): Promise<void>;
    updateSpaceItems(items: {
        [id: string]: SpaceItem;
    }): void;
    addInventoryItem(itemId: string, delta: number, targetId: string): void;
    removeInventoryItem(itemId: string, delta: number, targetId?: string): void;
    craft(inputs: {
        [id: string]: number;
    }): void;
    triggerInventoryItem(itemId: string, abilityId: string): void;
    setAllowScreenPointer(allowScreenPointer: boolean): void;
    setDeskInfo(deskInfo: DeskInfoV2, targetId?: string): void;
    startRecording(nookId: string, initializing: boolean): void;
    requestAccessViaCheckIn(userId: string, canceled: boolean, name?: string, currentlyEquippedWearables?: DBOutfit): void;
    respondToAccessRequest(userId: string, accepted: boolean, locationType?: RespondToAccessRequest_LocationTypeEnum): void;
    setDeskFromNextAvailableDesk(params?: {
        targetId?: string;
        preferredDesk?: MapAndDesk;
        desksToIgnore?: MapAndDesk[];
    }): void;
    setSpaceRolePermissionOverride(role: string, permission: string, enabled: boolean): void;
    getStats(): {};
    checkForExits(): void;
    sendSubscribe(): void;
    _startMapDataCheckInterval(): void;
    getDebugHistory(): string;
    getPlayersInMap(mapId: string): Player[];
    getKnownPartialMaps(): string[];
    getKnownCompletedMaps(): string[];
    filterObjectsInSpace(filter: (obj: Partial<MapObject>) => boolean | undefined): MapObject[];
    filterObjectsInMap(mapId: string, filter: (obj: Partial<MapObject>) => boolean | undefined): MapObject[];
    filterUidsInSpace(filter: (player: Partial<Player>) => boolean | undefined): string[];
    filterPlayersInSpace(filter: (player: Partial<Player>) => boolean | undefined): Player[];
    hipToBeSquare(hipToBeSquare: HipToBeSquare): void;
    patchGatherEventsSpaceSession(speakerUpdatesSession: SpeakerUpdatesSession): void;
    isPlayerInPrivateSpace(player: Partial<Player>, mapId: string, privateSpaceId: string): boolean;
    getMyPlayer(): Player;
    private cleanupDeletedObjects;
}
