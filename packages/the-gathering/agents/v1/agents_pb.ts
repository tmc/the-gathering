// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file agents/v1/agents.proto (package agents.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3 } from "@bufbuild/protobuf";

/**
 * Words is a stream of words.
 *
 * @generated from message agents.v1.Word
 */
export class Word extends Message$1<Word> {
  /**
   * @generated from field: string word = 2;
   */
  word = "";

  constructor(data?: PartialMessage<Word>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agents.v1.Word";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "word", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Word {
    return new Word().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Word {
    return new Word().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Word {
    return new Word().fromJsonString(jsonString, options);
  }

  static equals(a: Word | PlainMessage<Word> | undefined, b: Word | PlainMessage<Word> | undefined): boolean {
    return proto3.util.equals(Word, a, b);
  }
}

/**
 * @generated from message agents.v1.SpeakResponse
 */
export class SpeakResponse extends Message$1<SpeakResponse> {
  constructor(data?: PartialMessage<SpeakResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agents.v1.SpeakResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpeakResponse {
    return new SpeakResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpeakResponse {
    return new SpeakResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpeakResponse {
    return new SpeakResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpeakResponse | PlainMessage<SpeakResponse> | undefined, b: SpeakResponse | PlainMessage<SpeakResponse> | undefined): boolean {
    return proto3.util.equals(SpeakResponse, a, b);
  }
}

/**
 * @generated from message agents.v1.Agent
 */
export class Agent extends Message$1<Agent> {
  /**
   * @generated from field: agents.v1.Agent.AgentType type = 1;
   */
  type = Agent_AgentType.UNSPECIFIED;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<Agent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agents.v1.Agent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(Agent_AgentType) },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Agent {
    return new Agent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Agent {
    return new Agent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Agent {
    return new Agent().fromJsonString(jsonString, options);
  }

  static equals(a: Agent | PlainMessage<Agent> | undefined, b: Agent | PlainMessage<Agent> | undefined): boolean {
    return proto3.util.equals(Agent, a, b);
  }
}

/**
 * @generated from enum agents.v1.Agent.AgentType
 */
export enum Agent_AgentType {
  /**
   * @generated from enum value: AGENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: AGENT_TYPE_HUMAN = 1;
   */
  HUMAN = 1,

  /**
   * @generated from enum value: AGENT_TYPE_BOT = 2;
   */
  BOT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Agent_AgentType)
proto3.util.setEnumType(Agent_AgentType, "agents.v1.Agent.AgentType", [
  { no: 0, name: "AGENT_TYPE_UNSPECIFIED" },
  { no: 1, name: "AGENT_TYPE_HUMAN" },
  { no: 2, name: "AGENT_TYPE_BOT" },
]);

/**
 * Discriminated union of all events.
 *
 * @generated from message agents.v1.Event
 */
export class Event extends Message$1<Event> {
  /**
   * @generated from oneof agents.v1.Event.event
   */
  event: {
    /**
     * A message was sent by an agent.
     *
     * @generated from field: agents.v1.Message message = 1;
     */
    value: Message;
    case: "message";
  } | {
    /**
     * @generated from field: agents.v1.InteractionZoneUpdate interaction_zone_update = 2;
     */
    value: InteractionZoneUpdate;
    case: "interactionZoneUpdate";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agents.v1.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "message", T: Message, oneof: "event" },
    { no: 2, name: "interaction_zone_update", kind: "message", T: InteractionZoneUpdate, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * InteractionZoneUpdate is sent by the client to update the interaction zone.
 *
 * @generated from message agents.v1.InteractionZoneUpdate
 */
export class InteractionZoneUpdate extends Message$1<InteractionZoneUpdate> {
  /**
   * @generated from field: repeated agents.v1.Agent agents = 1;
   */
  agents: Agent[] = [];

  constructor(data?: PartialMessage<InteractionZoneUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agents.v1.InteractionZoneUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agents", kind: "message", T: Agent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InteractionZoneUpdate {
    return new InteractionZoneUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InteractionZoneUpdate {
    return new InteractionZoneUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InteractionZoneUpdate {
    return new InteractionZoneUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: InteractionZoneUpdate | PlainMessage<InteractionZoneUpdate> | undefined, b: InteractionZoneUpdate | PlainMessage<InteractionZoneUpdate> | undefined): boolean {
    return proto3.util.equals(InteractionZoneUpdate, a, b);
  }
}

/**
 * Discriminated union of all agent actions.
 *
 * @generated from message agents.v1.AgentAction
 */
export class AgentAction extends Message$1<AgentAction> {
  /**
   * @generated from oneof agents.v1.AgentAction.action
   */
  action: {
    /**
     * A message was sent by an agent.
     *
     * @generated from field: agents.v1.Message message = 1;
     */
    value: Message;
    case: "message";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AgentAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agents.v1.AgentAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "message", T: Message, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AgentAction {
    return new AgentAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AgentAction {
    return new AgentAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AgentAction {
    return new AgentAction().fromJsonString(jsonString, options);
  }

  static equals(a: AgentAction | PlainMessage<AgentAction> | undefined, b: AgentAction | PlainMessage<AgentAction> | undefined): boolean {
    return proto3.util.equals(AgentAction, a, b);
  }
}

/**
 * A global chat message sent by an agent.
 *
 * @generated from message agents.v1.Message
 */
export class Message extends Message$1<Message> {
  /**
   * The agent that sent the message.
   *
   * @generated from field: agents.v1.Agent agent = 1;
   */
  agent?: Agent;

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agents.v1.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agent", kind: "message", T: Agent },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

