// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gathering/agents/v1/agents.proto

package agentsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tmc/the-gathering/go/gen/gathering/agents/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "gathering.agents.v1.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceHealthCheckProcedure is the fully-qualified name of the AgentService's HealthCheck
	// RPC.
	AgentServiceHealthCheckProcedure = "/gathering.agents.v1.AgentService/HealthCheck"
	// AgentServiceRunProcedure is the fully-qualified name of the AgentService's Run RPC.
	AgentServiceRunProcedure = "/gathering.agents.v1.AgentService/Run"
)

// AgentServiceClient is a client for the gathering.agents.v1.AgentService service.
type AgentServiceClient interface {
	// HealthCheck is a unary RPC that returns a response when the server is ready.
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	// Run is a bidirectional stream of actions and events.
	Run(context.Context) *connect.BidiStreamForClient[v1.ClientServerAction, v1.ServerClientEvent]
}

// NewAgentServiceClient constructs a client for the gathering.agents.v1.AgentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentServiceClient{
		healthCheck: connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+AgentServiceHealthCheckProcedure,
			opts...,
		),
		run: connect.NewClient[v1.ClientServerAction, v1.ServerClientEvent](
			httpClient,
			baseURL+AgentServiceRunProcedure,
			opts...,
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	healthCheck *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
	run         *connect.Client[v1.ClientServerAction, v1.ServerClientEvent]
}

// HealthCheck calls gathering.agents.v1.AgentService.HealthCheck.
func (c *agentServiceClient) HealthCheck(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// Run calls gathering.agents.v1.AgentService.Run.
func (c *agentServiceClient) Run(ctx context.Context) *connect.BidiStreamForClient[v1.ClientServerAction, v1.ServerClientEvent] {
	return c.run.CallBidiStream(ctx)
}

// AgentServiceHandler is an implementation of the gathering.agents.v1.AgentService service.
type AgentServiceHandler interface {
	// HealthCheck is a unary RPC that returns a response when the server is ready.
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	// Run is a bidirectional stream of actions and events.
	Run(context.Context, *connect.BidiStream[v1.ClientServerAction, v1.ServerClientEvent]) error
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceHealthCheckHandler := connect.NewUnaryHandler(
		AgentServiceHealthCheckProcedure,
		svc.HealthCheck,
		opts...,
	)
	agentServiceRunHandler := connect.NewBidiStreamHandler(
		AgentServiceRunProcedure,
		svc.Run,
		opts...,
	)
	return "/gathering.agents.v1.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceHealthCheckProcedure:
			agentServiceHealthCheckHandler.ServeHTTP(w, r)
		case AgentServiceRunProcedure:
			agentServiceRunHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gathering.agents.v1.AgentService.HealthCheck is not implemented"))
}

func (UnimplementedAgentServiceHandler) Run(context.Context, *connect.BidiStream[v1.ClientServerAction, v1.ServerClientEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("gathering.agents.v1.AgentService.Run is not implemented"))
}
