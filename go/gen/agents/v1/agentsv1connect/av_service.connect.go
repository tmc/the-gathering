// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: agents/v1/av_service.proto

package agentsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tmc/the-gathering/go/gen/agents/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// AgentAudioVideoServiceName is the fully-qualified name of the AgentAudioVideoService service.
	AgentAudioVideoServiceName = "agents.v1.AgentAudioVideoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentAudioVideoServiceSpeakProcedure is the fully-qualified name of the AgentAudioVideoService's
	// Speak RPC.
	AgentAudioVideoServiceSpeakProcedure = "/agents.v1.AgentAudioVideoService/Speak"
)

// AgentAudioVideoServiceClient is a client for the agents.v1.AgentAudioVideoService service.
type AgentAudioVideoServiceClient interface {
	// Speak is a stream of words to be spoken by the agent.
	Speak(context.Context) *connect.ClientStreamForClient[v1.WordEvent, v1.SpeakResponse]
}

// NewAgentAudioVideoServiceClient constructs a client for the agents.v1.AgentAudioVideoService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentAudioVideoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentAudioVideoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentAudioVideoServiceClient{
		speak: connect.NewClient[v1.WordEvent, v1.SpeakResponse](
			httpClient,
			baseURL+AgentAudioVideoServiceSpeakProcedure,
			opts...,
		),
	}
}

// agentAudioVideoServiceClient implements AgentAudioVideoServiceClient.
type agentAudioVideoServiceClient struct {
	speak *connect.Client[v1.WordEvent, v1.SpeakResponse]
}

// Speak calls agents.v1.AgentAudioVideoService.Speak.
func (c *agentAudioVideoServiceClient) Speak(ctx context.Context) *connect.ClientStreamForClient[v1.WordEvent, v1.SpeakResponse] {
	return c.speak.CallClientStream(ctx)
}

// AgentAudioVideoServiceHandler is an implementation of the agents.v1.AgentAudioVideoService
// service.
type AgentAudioVideoServiceHandler interface {
	// Speak is a stream of words to be spoken by the agent.
	Speak(context.Context, *connect.ClientStream[v1.WordEvent]) (*connect.Response[v1.SpeakResponse], error)
}

// NewAgentAudioVideoServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentAudioVideoServiceHandler(svc AgentAudioVideoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentAudioVideoServiceSpeakHandler := connect.NewClientStreamHandler(
		AgentAudioVideoServiceSpeakProcedure,
		svc.Speak,
		opts...,
	)
	return "/agents.v1.AgentAudioVideoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentAudioVideoServiceSpeakProcedure:
			agentAudioVideoServiceSpeakHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentAudioVideoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentAudioVideoServiceHandler struct{}

func (UnimplementedAgentAudioVideoServiceHandler) Speak(context.Context, *connect.ClientStream[v1.WordEvent]) (*connect.Response[v1.SpeakResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agents.v1.AgentAudioVideoService.Speak is not implemented"))
}
