// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: agents/v1/agents.proto

package agentsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tmc/the-gathering/internal/gen/agents/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "agents.v1.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceInteractProcedure is the fully-qualified name of the AgentService's Interact RPC.
	AgentServiceInteractProcedure = "/agents.v1.AgentService/Interact"
	// AgentServiceHealthCheckProcedure is the fully-qualified name of the AgentService's HealthCheck
	// RPC.
	AgentServiceHealthCheckProcedure = "/agents.v1.AgentService/HealthCheck"
	// AgentServiceProvisionAgentProcedure is the fully-qualified name of the AgentService's
	// ProvisionAgent RPC.
	AgentServiceProvisionAgentProcedure = "/agents.v1.AgentService/ProvisionAgent"
)

// AgentServiceClient is a client for the agents.v1.AgentService service.
type AgentServiceClient interface {
	// Interact is a bidirectional stream of agent actions and events.
	Interact(context.Context) *connect.BidiStreamForClient[v1.PlayerEvent, v1.GameEvent]
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	ProvisionAgent(context.Context, *connect.Request[v1.ProvisionAgentRequest]) (*connect.Response[v1.ProvisionAgentResponse], error)
}

// NewAgentServiceClient constructs a client for the agents.v1.AgentService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentServiceClient{
		interact: connect.NewClient[v1.PlayerEvent, v1.GameEvent](
			httpClient,
			baseURL+AgentServiceInteractProcedure,
			opts...,
		),
		healthCheck: connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+AgentServiceHealthCheckProcedure,
			opts...,
		),
		provisionAgent: connect.NewClient[v1.ProvisionAgentRequest, v1.ProvisionAgentResponse](
			httpClient,
			baseURL+AgentServiceProvisionAgentProcedure,
			opts...,
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	interact       *connect.Client[v1.PlayerEvent, v1.GameEvent]
	healthCheck    *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
	provisionAgent *connect.Client[v1.ProvisionAgentRequest, v1.ProvisionAgentResponse]
}

// Interact calls agents.v1.AgentService.Interact.
func (c *agentServiceClient) Interact(ctx context.Context) *connect.BidiStreamForClient[v1.PlayerEvent, v1.GameEvent] {
	return c.interact.CallBidiStream(ctx)
}

// HealthCheck calls agents.v1.AgentService.HealthCheck.
func (c *agentServiceClient) HealthCheck(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// ProvisionAgent calls agents.v1.AgentService.ProvisionAgent.
func (c *agentServiceClient) ProvisionAgent(ctx context.Context, req *connect.Request[v1.ProvisionAgentRequest]) (*connect.Response[v1.ProvisionAgentResponse], error) {
	return c.provisionAgent.CallUnary(ctx, req)
}

// AgentServiceHandler is an implementation of the agents.v1.AgentService service.
type AgentServiceHandler interface {
	// Interact is a bidirectional stream of agent actions and events.
	Interact(context.Context, *connect.BidiStream[v1.PlayerEvent, v1.GameEvent]) error
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	ProvisionAgent(context.Context, *connect.Request[v1.ProvisionAgentRequest]) (*connect.Response[v1.ProvisionAgentResponse], error)
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceInteractHandler := connect.NewBidiStreamHandler(
		AgentServiceInteractProcedure,
		svc.Interact,
		opts...,
	)
	agentServiceHealthCheckHandler := connect.NewUnaryHandler(
		AgentServiceHealthCheckProcedure,
		svc.HealthCheck,
		opts...,
	)
	agentServiceProvisionAgentHandler := connect.NewUnaryHandler(
		AgentServiceProvisionAgentProcedure,
		svc.ProvisionAgent,
		opts...,
	)
	return "/agents.v1.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceInteractProcedure:
			agentServiceInteractHandler.ServeHTTP(w, r)
		case AgentServiceHealthCheckProcedure:
			agentServiceHealthCheckHandler.ServeHTTP(w, r)
		case AgentServiceProvisionAgentProcedure:
			agentServiceProvisionAgentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) Interact(context.Context, *connect.BidiStream[v1.PlayerEvent, v1.GameEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("agents.v1.AgentService.Interact is not implemented"))
}

func (UnimplementedAgentServiceHandler) HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agents.v1.AgentService.HealthCheck is not implemented"))
}

func (UnimplementedAgentServiceHandler) ProvisionAgent(context.Context, *connect.Request[v1.ProvisionAgentRequest]) (*connect.Response[v1.ProvisionAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agents.v1.AgentService.ProvisionAgent is not implemented"))
}
