// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: gathertown/events.proto

package gathertown

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpriteDirectionEnum_ENUM int32

const (
	SpriteDirectionEnum_Stand    SpriteDirectionEnum_ENUM = 0
	SpriteDirectionEnum_Down     SpriteDirectionEnum_ENUM = 1
	SpriteDirectionEnum_DownAlt  SpriteDirectionEnum_ENUM = 2
	SpriteDirectionEnum_Up       SpriteDirectionEnum_ENUM = 3
	SpriteDirectionEnum_UpAlt    SpriteDirectionEnum_ENUM = 4
	SpriteDirectionEnum_Left     SpriteDirectionEnum_ENUM = 5
	SpriteDirectionEnum_LeftAlt  SpriteDirectionEnum_ENUM = 6
	SpriteDirectionEnum_Right    SpriteDirectionEnum_ENUM = 7
	SpriteDirectionEnum_RightAlt SpriteDirectionEnum_ENUM = 8
	SpriteDirectionEnum_Dance1   SpriteDirectionEnum_ENUM = 9
	SpriteDirectionEnum_Dance2   SpriteDirectionEnum_ENUM = 10
	SpriteDirectionEnum_Dance3   SpriteDirectionEnum_ENUM = 11
	SpriteDirectionEnum_Dance4   SpriteDirectionEnum_ENUM = 12
)

// Enum value maps for SpriteDirectionEnum_ENUM.
var (
	SpriteDirectionEnum_ENUM_name = map[int32]string{
		0:  "Stand",
		1:  "Down",
		2:  "DownAlt",
		3:  "Up",
		4:  "UpAlt",
		5:  "Left",
		6:  "LeftAlt",
		7:  "Right",
		8:  "RightAlt",
		9:  "Dance1",
		10: "Dance2",
		11: "Dance3",
		12: "Dance4",
	}
	SpriteDirectionEnum_ENUM_value = map[string]int32{
		"Stand":    0,
		"Down":     1,
		"DownAlt":  2,
		"Up":       3,
		"UpAlt":    4,
		"Left":     5,
		"LeftAlt":  6,
		"Right":    7,
		"RightAlt": 8,
		"Dance1":   9,
		"Dance2":   10,
		"Dance3":   11,
		"Dance4":   12,
	}
)

func (x SpriteDirectionEnum_ENUM) Enum() *SpriteDirectionEnum_ENUM {
	p := new(SpriteDirectionEnum_ENUM)
	*p = x
	return p
}

func (x SpriteDirectionEnum_ENUM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpriteDirectionEnum_ENUM) Descriptor() protoreflect.EnumDescriptor {
	return file_gathertown_events_proto_enumTypes[0].Descriptor()
}

func (SpriteDirectionEnum_ENUM) Type() protoreflect.EnumType {
	return &file_gathertown_events_proto_enumTypes[0]
}

func (x SpriteDirectionEnum_ENUM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpriteDirectionEnum_ENUM.Descriptor instead.
func (SpriteDirectionEnum_ENUM) EnumDescriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{1, 0}
}

type MoveDirectionEnum_ENUM int32

const (
	MoveDirectionEnum_Left  MoveDirectionEnum_ENUM = 0
	MoveDirectionEnum_Right MoveDirectionEnum_ENUM = 1
	MoveDirectionEnum_Up    MoveDirectionEnum_ENUM = 2
	MoveDirectionEnum_Down  MoveDirectionEnum_ENUM = 3
	MoveDirectionEnum_Dance MoveDirectionEnum_ENUM = 4
)

// Enum value maps for MoveDirectionEnum_ENUM.
var (
	MoveDirectionEnum_ENUM_name = map[int32]string{
		0: "Left",
		1: "Right",
		2: "Up",
		3: "Down",
		4: "Dance",
	}
	MoveDirectionEnum_ENUM_value = map[string]int32{
		"Left":  0,
		"Right": 1,
		"Up":    2,
		"Down":  3,
		"Dance": 4,
	}
)

func (x MoveDirectionEnum_ENUM) Enum() *MoveDirectionEnum_ENUM {
	p := new(MoveDirectionEnum_ENUM)
	*p = x
	return p
}

func (x MoveDirectionEnum_ENUM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MoveDirectionEnum_ENUM) Descriptor() protoreflect.EnumDescriptor {
	return file_gathertown_events_proto_enumTypes[1].Descriptor()
}

func (MoveDirectionEnum_ENUM) Type() protoreflect.EnumType {
	return &file_gathertown_events_proto_enumTypes[1]
}

func (x MoveDirectionEnum_ENUM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MoveDirectionEnum_ENUM.Descriptor instead.
func (MoveDirectionEnum_ENUM) EnumDescriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{2, 0}
}

type InteractionEnum_ENUM int32

const (
	InteractionEnum_NONE               InteractionEnum_ENUM = 0
	InteractionEnum_EMBEDDED_WEBSITE   InteractionEnum_ENUM = 1
	InteractionEnum_POSTER             InteractionEnum_ENUM = 2
	InteractionEnum_VIDEO              InteractionEnum_ENUM = 3
	InteractionEnum_EXTERNAL_CALL      InteractionEnum_ENUM = 4
	InteractionEnum_EXTENSION          InteractionEnum_ENUM = 5
	InteractionEnum_NOTE               InteractionEnum_ENUM = 6
	InteractionEnum_MODAL_EXTENSION    InteractionEnum_ENUM = 7
	InteractionEnum_COMPONENT_MODAL    InteractionEnum_ENUM = 8
	InteractionEnum_SIDE_PANEL_TRIGGER InteractionEnum_ENUM = 9
)

// Enum value maps for InteractionEnum_ENUM.
var (
	InteractionEnum_ENUM_name = map[int32]string{
		0: "NONE",
		1: "EMBEDDED_WEBSITE",
		2: "POSTER",
		3: "VIDEO",
		4: "EXTERNAL_CALL",
		5: "EXTENSION",
		6: "NOTE",
		7: "MODAL_EXTENSION",
		8: "COMPONENT_MODAL",
		9: "SIDE_PANEL_TRIGGER",
	}
	InteractionEnum_ENUM_value = map[string]int32{
		"NONE":               0,
		"EMBEDDED_WEBSITE":   1,
		"POSTER":             2,
		"VIDEO":              3,
		"EXTERNAL_CALL":      4,
		"EXTENSION":          5,
		"NOTE":               6,
		"MODAL_EXTENSION":    7,
		"COMPONENT_MODAL":    8,
		"SIDE_PANEL_TRIGGER": 9,
	}
)

func (x InteractionEnum_ENUM) Enum() *InteractionEnum_ENUM {
	p := new(InteractionEnum_ENUM)
	*p = x
	return p
}

func (x InteractionEnum_ENUM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractionEnum_ENUM) Descriptor() protoreflect.EnumDescriptor {
	return file_gathertown_events_proto_enumTypes[2].Descriptor()
}

func (InteractionEnum_ENUM) Type() protoreflect.EnumType {
	return &file_gathertown_events_proto_enumTypes[2]
}

func (x InteractionEnum_ENUM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractionEnum_ENUM.Descriptor instead.
func (InteractionEnum_ENUM) EnumDescriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{3, 0}
}

type RespondToAccessRequest_LocationTypeEnum int32

const (
	RespondToAccessRequest_MyLocation   RespondToAccessRequest_LocationTypeEnum = 0
	RespondToAccessRequest_DefaultSpawn RespondToAccessRequest_LocationTypeEnum = 1
)

// Enum value maps for RespondToAccessRequest_LocationTypeEnum.
var (
	RespondToAccessRequest_LocationTypeEnum_name = map[int32]string{
		0: "MyLocation",
		1: "DefaultSpawn",
	}
	RespondToAccessRequest_LocationTypeEnum_value = map[string]int32{
		"MyLocation":   0,
		"DefaultSpawn": 1,
	}
)

func (x RespondToAccessRequest_LocationTypeEnum) Enum() *RespondToAccessRequest_LocationTypeEnum {
	p := new(RespondToAccessRequest_LocationTypeEnum)
	*p = x
	return p
}

func (x RespondToAccessRequest_LocationTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RespondToAccessRequest_LocationTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_gathertown_events_proto_enumTypes[3].Descriptor()
}

func (RespondToAccessRequest_LocationTypeEnum) Type() protoreflect.EnumType {
	return &file_gathertown_events_proto_enumTypes[3]
}

func (x RespondToAccessRequest_LocationTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RespondToAccessRequest_LocationTypeEnum.Descriptor instead.
func (RespondToAccessRequest_LocationTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{262, 0}
}

type Deprecated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Deprecated) Reset() {
	*x = Deprecated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deprecated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deprecated) ProtoMessage() {}

func (x *Deprecated) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deprecated.ProtoReflect.Descriptor instead.
func (*Deprecated) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{0}
}

type SpriteDirectionEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpriteDirectionEnum) Reset() {
	*x = SpriteDirectionEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpriteDirectionEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpriteDirectionEnum) ProtoMessage() {}

func (x *SpriteDirectionEnum) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpriteDirectionEnum.ProtoReflect.Descriptor instead.
func (*SpriteDirectionEnum) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{1}
}

type MoveDirectionEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoveDirectionEnum) Reset() {
	*x = MoveDirectionEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveDirectionEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveDirectionEnum) ProtoMessage() {}

func (x *MoveDirectionEnum) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveDirectionEnum.ProtoReflect.Descriptor instead.
func (*MoveDirectionEnum) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{2}
}

type InteractionEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InteractionEnum) Reset() {
	*x = InteractionEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionEnum) ProtoMessage() {}

func (x *InteractionEnum) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionEnum.ProtoReflect.Descriptor instead.
func (*InteractionEnum) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{3}
}

type PlayerInitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                       *string   `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	X                          *uint32   `protobuf:"varint,3,opt,name=x,proto3,oneof" json:"x,omitempty"`
	Y                          *uint32   `protobuf:"varint,4,opt,name=y,proto3,oneof" json:"y,omitempty"`
	Map                        *string   `protobuf:"bytes,5,opt,name=map,proto3,oneof" json:"map,omitempty"`
	Affiliation                *string   `protobuf:"bytes,6,opt,name=affiliation,proto3,oneof" json:"affiliation,omitempty"`
	Busy                       *bool     `protobuf:"varint,7,opt,name=busy,proto3,oneof" json:"busy,omitempty"`
	TextStatus                 *string   `protobuf:"bytes,8,opt,name=textStatus,proto3,oneof" json:"textStatus,omitempty"`
	EmojiStatus                *string   `protobuf:"bytes,9,opt,name=emojiStatus,proto3,oneof" json:"emojiStatus,omitempty"`
	CurrentlyEquippedWearables *DBOutfit `protobuf:"bytes,10,opt,name=currentlyEquippedWearables,proto3,oneof" json:"currentlyEquippedWearables,omitempty"`
	FocusModeEndTime           *string   `protobuf:"bytes,11,opt,name=focusModeEndTime,proto3,oneof" json:"focusModeEndTime,omitempty"`
	ItemString                 *string   `protobuf:"bytes,14,opt,name=itemString,proto3,oneof" json:"itemString,omitempty"`
	IsNpc                      *bool     `protobuf:"varint,15,opt,name=isNpc,proto3,oneof" json:"isNpc,omitempty"`
}

func (x *PlayerInitInfo) Reset() {
	*x = PlayerInitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInitInfo) ProtoMessage() {}

func (x *PlayerInitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInitInfo.ProtoReflect.Descriptor instead.
func (*PlayerInitInfo) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerInitInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PlayerInitInfo) GetX() uint32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *PlayerInitInfo) GetY() uint32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *PlayerInitInfo) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

func (x *PlayerInitInfo) GetAffiliation() string {
	if x != nil && x.Affiliation != nil {
		return *x.Affiliation
	}
	return ""
}

func (x *PlayerInitInfo) GetBusy() bool {
	if x != nil && x.Busy != nil {
		return *x.Busy
	}
	return false
}

func (x *PlayerInitInfo) GetTextStatus() string {
	if x != nil && x.TextStatus != nil {
		return *x.TextStatus
	}
	return ""
}

func (x *PlayerInitInfo) GetEmojiStatus() string {
	if x != nil && x.EmojiStatus != nil {
		return *x.EmojiStatus
	}
	return ""
}

func (x *PlayerInitInfo) GetCurrentlyEquippedWearables() *DBOutfit {
	if x != nil {
		return x.CurrentlyEquippedWearables
	}
	return nil
}

func (x *PlayerInitInfo) GetFocusModeEndTime() string {
	if x != nil && x.FocusModeEndTime != nil {
		return *x.FocusModeEndTime
	}
	return ""
}

func (x *PlayerInitInfo) GetItemString() string {
	if x != nil && x.ItemString != nil {
		return *x.ItemString
	}
	return ""
}

func (x *PlayerInitInfo) GetIsNpc() bool {
	if x != nil && x.IsNpc != nil {
		return *x.IsNpc
	}
	return false
}

type DBOutfit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skin       string  `protobuf:"bytes,1,opt,name=skin,proto3" json:"skin,omitempty"`
	Hair       string  `protobuf:"bytes,2,opt,name=hair,proto3" json:"hair,omitempty"`
	FacialHair string  `protobuf:"bytes,3,opt,name=facial_hair,json=facialHair,proto3" json:"facial_hair,omitempty"`
	Top        string  `protobuf:"bytes,4,opt,name=top,proto3" json:"top,omitempty"`
	Bottom     string  `protobuf:"bytes,5,opt,name=bottom,proto3" json:"bottom,omitempty"`
	Shoes      string  `protobuf:"bytes,6,opt,name=shoes,proto3" json:"shoes,omitempty"`
	Hat        string  `protobuf:"bytes,7,opt,name=hat,proto3" json:"hat,omitempty"`
	Glasses    string  `protobuf:"bytes,8,opt,name=glasses,proto3" json:"glasses,omitempty"`
	Other      string  `protobuf:"bytes,9,opt,name=other,proto3" json:"other,omitempty"`
	Costume    *string `protobuf:"bytes,10,opt,name=costume,proto3,oneof" json:"costume,omitempty"`
	Mobility   *string `protobuf:"bytes,11,opt,name=mobility,proto3,oneof" json:"mobility,omitempty"`
	Jacket     *string `protobuf:"bytes,12,opt,name=jacket,proto3,oneof" json:"jacket,omitempty"`
}

func (x *DBOutfit) Reset() {
	*x = DBOutfit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBOutfit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBOutfit) ProtoMessage() {}

func (x *DBOutfit) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBOutfit.ProtoReflect.Descriptor instead.
func (*DBOutfit) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{5}
}

func (x *DBOutfit) GetSkin() string {
	if x != nil {
		return x.Skin
	}
	return ""
}

func (x *DBOutfit) GetHair() string {
	if x != nil {
		return x.Hair
	}
	return ""
}

func (x *DBOutfit) GetFacialHair() string {
	if x != nil {
		return x.FacialHair
	}
	return ""
}

func (x *DBOutfit) GetTop() string {
	if x != nil {
		return x.Top
	}
	return ""
}

func (x *DBOutfit) GetBottom() string {
	if x != nil {
		return x.Bottom
	}
	return ""
}

func (x *DBOutfit) GetShoes() string {
	if x != nil {
		return x.Shoes
	}
	return ""
}

func (x *DBOutfit) GetHat() string {
	if x != nil {
		return x.Hat
	}
	return ""
}

func (x *DBOutfit) GetGlasses() string {
	if x != nil {
		return x.Glasses
	}
	return ""
}

func (x *DBOutfit) GetOther() string {
	if x != nil {
		return x.Other
	}
	return ""
}

func (x *DBOutfit) GetCostume() string {
	if x != nil && x.Costume != nil {
		return *x.Costume
	}
	return ""
}

func (x *DBOutfit) GetMobility() string {
	if x != nil && x.Mobility != nil {
		return *x.Mobility
	}
	return ""
}

func (x *DBOutfit) GetJacket() string {
	if x != nil && x.Jacket != nil {
		return *x.Jacket
	}
	return ""
}

// Defines how to slice an incoming animation spritesheet
type WireObjectSpritesheetFraming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameWidth  int32 `protobuf:"varint,1,opt,name=frameWidth,proto3" json:"frameWidth,omitempty"`
	FrameHeight int32 `protobuf:"varint,2,opt,name=frameHeight,proto3" json:"frameHeight,omitempty"`
}

func (x *WireObjectSpritesheetFraming) Reset() {
	*x = WireObjectSpritesheetFraming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireObjectSpritesheetFraming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireObjectSpritesheetFraming) ProtoMessage() {}

func (x *WireObjectSpritesheetFraming) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireObjectSpritesheetFraming.ProtoReflect.Descriptor instead.
func (*WireObjectSpritesheetFraming) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{6}
}

func (x *WireObjectSpritesheetFraming) GetFrameWidth() int32 {
	if x != nil {
		return x.FrameWidth
	}
	return 0
}

func (x *WireObjectSpritesheetFraming) GetFrameHeight() int32 {
	if x != nil {
		return x.FrameHeight
	}
	return 0
}

// Defines an Spritesheet referencing frames from the split spritesheet
type WireObjectSpriteAnimConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Defines how to interpret the `sequence `field. If `true`, `sequence` is interpreted as a set of
	// animation key frames which are interpolated between for the animation.
	// For example, `sequence: [0,10], useSequenceAsRange: true` would mean the animation spans frames
	// 0 _through_ 10 (inclusive). Use this when your animation uses sequential frames.
	//
	// Default: `false`
	UseSequenceAsRange *bool `protobuf:"varint,1,opt,name=useSequenceAsRange,proto3,oneof" json:"useSequenceAsRange,omitempty"`
	//*
	// Defines which spritesheet frames make up this animation.
	//
	// **By default,** `sequence` should be an array of arbitrary frame numbers defining this animation.
	//   ex: [4,5,4,5,4,6,6,6] animates between frames 4, 5, and 6 - but not necessarily in sequential order.
	//
	// **When `useSequenceAsRange` is `true`,** this should be set to two integers defining the **start** and **end** caps.
	//   ex: [0, 10] means this animation starts on frame 0 and ends on frame 10 (inclusive).
	//       (This is equivalent to setting sequence to `[0, 1, 2, ...]`)
	Sequence []uint32 `protobuf:"varint,2,rep,packed,name=sequence,proto3" json:"sequence,omitempty"`
	// Does this animation repeat or should it stop on the last frame? (Default: false)
	Loop *bool `protobuf:"varint,3,opt,name=loop,proto3,oneof" json:"loop,omitempty"`
	// Frames per second this animation should display.
	FrameRate uint32 `protobuf:"varint,4,opt,name=frameRate,proto3" json:"frameRate,omitempty"`
}

func (x *WireObjectSpriteAnimConfig) Reset() {
	*x = WireObjectSpriteAnimConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireObjectSpriteAnimConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireObjectSpriteAnimConfig) ProtoMessage() {}

func (x *WireObjectSpriteAnimConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireObjectSpriteAnimConfig.ProtoReflect.Descriptor instead.
func (*WireObjectSpriteAnimConfig) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{7}
}

func (x *WireObjectSpriteAnimConfig) GetUseSequenceAsRange() bool {
	if x != nil && x.UseSequenceAsRange != nil {
		return *x.UseSequenceAsRange
	}
	return false
}

func (x *WireObjectSpriteAnimConfig) GetSequence() []uint32 {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *WireObjectSpriteAnimConfig) GetLoop() bool {
	if x != nil && x.Loop != nil {
		return *x.Loop
	}
	return false
}

func (x *WireObjectSpriteAnimConfig) GetFrameRate() uint32 {
	if x != nil {
		return x.FrameRate
	}
	return 0
}

// Animated objects need to declare their spritesheet, how to slice it, and the different Spritesheets
// provided by the given spritesheet.
type WireObjectSpritesheet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpritesheetUrl                     string                                 `protobuf:"bytes,1,opt,name=spritesheetUrl,proto3" json:"spritesheetUrl,omitempty"`
	Framing                            *WireObjectSpritesheetFraming          `protobuf:"bytes,2,opt,name=framing,proto3" json:"framing,omitempty"`
	Animations                         map[string]*WireObjectSpriteAnimConfig `protobuf:"bytes,3,rep,name=animations,proto3" json:"animations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CurrentAnim                        *string                                `protobuf:"bytes,4,opt,name=currentAnim,proto3,oneof" json:"currentAnim,omitempty"`
	PauseAnimationsIfFpsBelowFramerate *bool                                  `protobuf:"varint,5,opt,name=pauseAnimationsIfFpsBelowFramerate,proto3,oneof" json:"pauseAnimationsIfFpsBelowFramerate,omitempty"`
}

func (x *WireObjectSpritesheet) Reset() {
	*x = WireObjectSpritesheet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireObjectSpritesheet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireObjectSpritesheet) ProtoMessage() {}

func (x *WireObjectSpritesheet) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireObjectSpritesheet.ProtoReflect.Descriptor instead.
func (*WireObjectSpritesheet) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{8}
}

func (x *WireObjectSpritesheet) GetSpritesheetUrl() string {
	if x != nil {
		return x.SpritesheetUrl
	}
	return ""
}

func (x *WireObjectSpritesheet) GetFraming() *WireObjectSpritesheetFraming {
	if x != nil {
		return x.Framing
	}
	return nil
}

func (x *WireObjectSpritesheet) GetAnimations() map[string]*WireObjectSpriteAnimConfig {
	if x != nil {
		return x.Animations
	}
	return nil
}

func (x *WireObjectSpritesheet) GetCurrentAnim() string {
	if x != nil && x.CurrentAnim != nil {
		return *x.CurrentAnim
	}
	return ""
}

func (x *WireObjectSpritesheet) GetPauseAnimationsIfFpsBelowFramerate() bool {
	if x != nil && x.PauseAnimationsIfFpsBelowFramerate != nil {
		return *x.PauseAnimationsIfFpsBelowFramerate
	}
	return false
}

type WireObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId     *string               `protobuf:"bytes,1,opt,name=templateId,proto3,oneof" json:"templateId,omitempty"`
	XName          *string               `protobuf:"bytes,2,opt,name=_name,json=Name,proto3,oneof" json:"_name,omitempty"`
	XTags          []string              `protobuf:"bytes,3,rep,name=_tags,json=Tags,proto3" json:"_tags,omitempty"` // repeated is inherently optional
	X              *uint32               `protobuf:"varint,4,opt,name=x,proto3,oneof" json:"x,omitempty"`
	Y              *uint32               `protobuf:"varint,5,opt,name=y,proto3,oneof" json:"y,omitempty"`
	OffsetX        *float32              `protobuf:"fixed32,6,opt,name=offsetX,proto3,oneof" json:"offsetX,omitempty"`
	OffsetY        *float32              `protobuf:"fixed32,7,opt,name=offsetY,proto3,oneof" json:"offsetY,omitempty"`
	Color          *string               `protobuf:"bytes,8,opt,name=color,proto3,oneof" json:"color,omitempty"`
	Orientation    *uint32               `protobuf:"varint,9,opt,name=orientation,proto3,oneof" json:"orientation,omitempty"`
	Normal         *string               `protobuf:"bytes,10,opt,name=normal,proto3,oneof" json:"normal,omitempty"`
	Highlighted    *string               `protobuf:"bytes,11,opt,name=highlighted,proto3,oneof" json:"highlighted,omitempty"`
	Type           *InteractionEnum_ENUM `protobuf:"varint,12,opt,name=type,proto3,enum=gathertown.InteractionEnum_ENUM,oneof" json:"type,omitempty"`
	Width          *uint32               `protobuf:"varint,13,opt,name=width,proto3,oneof" json:"width,omitempty"`                  // deprecating hopefully?
	Height         *uint32               `protobuf:"varint,14,opt,name=height,proto3,oneof" json:"height,omitempty"`                // deprecating hopefully?
	ExtensionClass *string               `protobuf:"bytes,15,opt,name=extensionClass,proto3,oneof" json:"extensionClass,omitempty"` // useful to tag an object with which extension should pay attention to it
	// Any custom value of `previewMessage` will be shown as is, not localized
	PreviewMessage   *string                `protobuf:"bytes,16,opt,name=previewMessage,proto3,oneof" json:"previewMessage,omitempty"`
	DistThreshold    *uint32                `protobuf:"varint,17,opt,name=distThreshold,proto3,oneof" json:"distThreshold,omitempty"`
	PropertiesJson   *string                `protobuf:"bytes,18,opt,name=propertiesJson,proto3,oneof" json:"propertiesJson,omitempty"`
	Sound            *Sound                 `protobuf:"bytes,19,opt,name=sound,proto3,oneof" json:"sound,omitempty"`
	ObjectStartTime  *ObjectTime            `protobuf:"bytes,20,opt,name=objectStartTime,proto3,oneof" json:"objectStartTime,omitempty"`   // deprecated on the product side
	ObjectExpireTime *ObjectTime            `protobuf:"bytes,21,opt,name=objectExpireTime,proto3,oneof" json:"objectExpireTime,omitempty"` // deprecated on the product side
	Id               *string                `protobuf:"bytes,22,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CustomState      *string                `protobuf:"bytes,23,opt,name=customState,proto3,oneof" json:"customState,omitempty"`
	ObjectPlacerId   *string                `protobuf:"bytes,24,opt,name=objectPlacerId,proto3,oneof" json:"objectPlacerId,omitempty"`
	NumGoKarts       *uint32                `protobuf:"varint,25,opt,name=numGoKarts,proto3,oneof" json:"numGoKarts,omitempty"` // experimental - this should have been in customState :/
	Spritesheet      *WireObjectSpritesheet `protobuf:"bytes,26,opt,name=spritesheet,proto3,oneof" json:"spritesheet,omitempty"`
	ZIndex           *float32               `protobuf:"fixed32,27,opt,name=zIndex,proto3,oneof" json:"zIndex,omitempty"`
}

func (x *WireObject) Reset() {
	*x = WireObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireObject) ProtoMessage() {}

func (x *WireObject) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireObject.ProtoReflect.Descriptor instead.
func (*WireObject) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{9}
}

func (x *WireObject) GetTemplateId() string {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return ""
}

func (x *WireObject) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *WireObject) GetXTags() []string {
	if x != nil {
		return x.XTags
	}
	return nil
}

func (x *WireObject) GetX() uint32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *WireObject) GetY() uint32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *WireObject) GetOffsetX() float32 {
	if x != nil && x.OffsetX != nil {
		return *x.OffsetX
	}
	return 0
}

func (x *WireObject) GetOffsetY() float32 {
	if x != nil && x.OffsetY != nil {
		return *x.OffsetY
	}
	return 0
}

func (x *WireObject) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *WireObject) GetOrientation() uint32 {
	if x != nil && x.Orientation != nil {
		return *x.Orientation
	}
	return 0
}

func (x *WireObject) GetNormal() string {
	if x != nil && x.Normal != nil {
		return *x.Normal
	}
	return ""
}

func (x *WireObject) GetHighlighted() string {
	if x != nil && x.Highlighted != nil {
		return *x.Highlighted
	}
	return ""
}

func (x *WireObject) GetType() InteractionEnum_ENUM {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return InteractionEnum_NONE
}

func (x *WireObject) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *WireObject) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *WireObject) GetExtensionClass() string {
	if x != nil && x.ExtensionClass != nil {
		return *x.ExtensionClass
	}
	return ""
}

func (x *WireObject) GetPreviewMessage() string {
	if x != nil && x.PreviewMessage != nil {
		return *x.PreviewMessage
	}
	return ""
}

func (x *WireObject) GetDistThreshold() uint32 {
	if x != nil && x.DistThreshold != nil {
		return *x.DistThreshold
	}
	return 0
}

func (x *WireObject) GetPropertiesJson() string {
	if x != nil && x.PropertiesJson != nil {
		return *x.PropertiesJson
	}
	return ""
}

func (x *WireObject) GetSound() *Sound {
	if x != nil {
		return x.Sound
	}
	return nil
}

func (x *WireObject) GetObjectStartTime() *ObjectTime {
	if x != nil {
		return x.ObjectStartTime
	}
	return nil
}

func (x *WireObject) GetObjectExpireTime() *ObjectTime {
	if x != nil {
		return x.ObjectExpireTime
	}
	return nil
}

func (x *WireObject) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *WireObject) GetCustomState() string {
	if x != nil && x.CustomState != nil {
		return *x.CustomState
	}
	return ""
}

func (x *WireObject) GetObjectPlacerId() string {
	if x != nil && x.ObjectPlacerId != nil {
		return *x.ObjectPlacerId
	}
	return ""
}

func (x *WireObject) GetNumGoKarts() uint32 {
	if x != nil && x.NumGoKarts != nil {
		return *x.NumGoKarts
	}
	return 0
}

func (x *WireObject) GetSpritesheet() *WireObjectSpritesheet {
	if x != nil {
		return x.Spritesheet
	}
	return nil
}

func (x *WireObject) GetZIndex() float32 {
	if x != nil && x.ZIndex != nil {
		return *x.ZIndex
	}
	return 0
}

type SpaceMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// roles should be { [role in CoreRole]: boolean }, but we can't do string enums in protobuf
	Roles                      map[string]bool `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // deprecating
	Name                       *string         `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	CurrentlyEquippedWearables *DBOutfit       `protobuf:"bytes,4,opt,name=currentlyEquippedWearables,proto3,oneof" json:"currentlyEquippedWearables,omitempty"`
	AllowScreenPointer         *bool           `protobuf:"varint,6,opt,name=allowScreenPointer,proto3,oneof" json:"allowScreenPointer,omitempty"`
	// role should be CoreRole, but we can't do string enums in protobuf
	Role string `protobuf:"bytes,7,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *SpaceMemberInfo) Reset() {
	*x = SpaceMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceMemberInfo) ProtoMessage() {}

func (x *SpaceMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceMemberInfo.ProtoReflect.Descriptor instead.
func (*SpaceMemberInfo) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{10}
}

func (x *SpaceMemberInfo) GetRoles() map[string]bool {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *SpaceMemberInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SpaceMemberInfo) GetCurrentlyEquippedWearables() *DBOutfit {
	if x != nil {
		return x.CurrentlyEquippedWearables
	}
	return nil
}

func (x *SpaceMemberInfo) GetAllowScreenPointer() bool {
	if x != nil && x.AllowScreenPointer != nil {
		return *x.AllowScreenPointer
	}
	return false
}

func (x *SpaceMemberInfo) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type BackedUpDeskObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Obj     *WireObject `protobuf:"bytes,1,opt,name=obj,proto3" json:"obj,omitempty"`
	OffsetX uint32      `protobuf:"varint,2,opt,name=offsetX,proto3" json:"offsetX,omitempty"`
	OffsetY uint32      `protobuf:"varint,3,opt,name=offsetY,proto3" json:"offsetY,omitempty"`
}

func (x *BackedUpDeskObject) Reset() {
	*x = BackedUpDeskObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackedUpDeskObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackedUpDeskObject) ProtoMessage() {}

func (x *BackedUpDeskObject) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackedUpDeskObject.ProtoReflect.Descriptor instead.
func (*BackedUpDeskObject) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{11}
}

func (x *BackedUpDeskObject) GetObj() *WireObject {
	if x != nil {
		return x.Obj
	}
	return nil
}

func (x *BackedUpDeskObject) GetOffsetX() uint32 {
	if x != nil {
		return x.OffsetX
	}
	return 0
}

func (x *BackedUpDeskObject) GetOffsetY() uint32 {
	if x != nil {
		return x.OffsetY
	}
	return 0
}

type DeskObjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects map[string]*BackedUpDeskObject `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeskObjects) Reset() {
	*x = DeskObjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeskObjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeskObjects) ProtoMessage() {}

func (x *DeskObjects) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeskObjects.ProtoReflect.Descriptor instead.
func (*DeskObjects) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{12}
}

func (x *DeskObjects) GetObjects() map[string]*BackedUpDeskObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

type DeskInfoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeskId      *string `protobuf:"bytes,1,opt,name=deskId,proto3,oneof" json:"deskId,omitempty"`
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Locked      *bool   `protobuf:"varint,3,opt,name=locked,proto3,oneof" json:"locked,omitempty"`
	// this isn't up to date with what's actually on/around someone's desk, it just exists as a way to back up and restore those objects while they're switching desks
	LastDeskObjects *DeskObjects `protobuf:"bytes,4,opt,name=lastDeskObjects,proto3,oneof" json:"lastDeskObjects,omitempty"`
	MapId           *string      `protobuf:"bytes,5,opt,name=mapId,proto3,oneof" json:"mapId,omitempty"`
}

func (x *DeskInfoV2) Reset() {
	*x = DeskInfoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeskInfoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeskInfoV2) ProtoMessage() {}

func (x *DeskInfoV2) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeskInfoV2.ProtoReflect.Descriptor instead.
func (*DeskInfoV2) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{13}
}

func (x *DeskInfoV2) GetDeskId() string {
	if x != nil && x.DeskId != nil {
		return *x.DeskId
	}
	return ""
}

func (x *DeskInfoV2) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DeskInfoV2) GetLocked() bool {
	if x != nil && x.Locked != nil {
		return *x.Locked
	}
	return false
}

func (x *DeskInfoV2) GetLastDeskObjects() *DeskObjects {
	if x != nil {
		return x.LastDeskObjects
	}
	return nil
}

func (x *DeskInfoV2) GetMapId() string {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return ""
}

type MapAndDesk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId  string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	DeskId string `protobuf:"bytes,2,opt,name=deskId,proto3" json:"deskId,omitempty"`
}

func (x *MapAndDesk) Reset() {
	*x = MapAndDesk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapAndDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapAndDesk) ProtoMessage() {}

func (x *MapAndDesk) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapAndDesk.ProtoReflect.Descriptor instead.
func (*MapAndDesk) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{14}
}

func (x *MapAndDesk) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapAndDesk) GetDeskId() string {
	if x != nil {
		return x.DeskId
	}
	return ""
}

type Sound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src          string  `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Volume       float32 `protobuf:"fixed32,2,opt,name=volume,proto3" json:"volume,omitempty"`
	Loop         bool    `protobuf:"varint,3,opt,name=loop,proto3" json:"loop,omitempty"`
	MaxDistance  uint32  `protobuf:"varint,4,opt,name=maxDistance,proto3" json:"maxDistance,omitempty"`
	IsPositional *bool   `protobuf:"varint,5,opt,name=isPositional,proto3,oneof" json:"isPositional,omitempty"`
	Stream       *bool   `protobuf:"varint,6,opt,name=stream,proto3,oneof" json:"stream,omitempty"`
}

func (x *Sound) Reset() {
	*x = Sound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sound) ProtoMessage() {}

func (x *Sound) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sound.ProtoReflect.Descriptor instead.
func (*Sound) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{15}
}

func (x *Sound) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *Sound) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Sound) GetLoop() bool {
	if x != nil {
		return x.Loop
	}
	return false
}

func (x *Sound) GetMaxDistance() uint32 {
	if x != nil {
		return x.MaxDistance
	}
	return 0
}

func (x *Sound) GetIsPositional() bool {
	if x != nil && x.IsPositional != nil {
		return *x.IsPositional
	}
	return false
}

func (x *Sound) GetStream() bool {
	if x != nil && x.Stream != nil {
		return *x.Stream
	}
	return false
}

// Can be deprecated?
type ObjectTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSeconds  uint32  `protobuf:"varint,1,opt,name=_seconds,json=Seconds,proto3" json:"_seconds,omitempty"`
	XTimezone *string `protobuf:"bytes,2,opt,name=_timezone,json=Timezone,proto3,oneof" json:"_timezone,omitempty"`
}

func (x *ObjectTime) Reset() {
	*x = ObjectTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectTime) ProtoMessage() {}

func (x *ObjectTime) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectTime.ProtoReflect.Descriptor instead.
func (*ObjectTime) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{16}
}

func (x *ObjectTime) GetXSeconds() uint32 {
	if x != nil {
		return x.XSeconds
	}
	return 0
}

func (x *ObjectTime) GetXTimezone() string {
	if x != nil && x.XTimezone != nil {
		return *x.XTimezone
	}
	return ""
}

type Space struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	X       uint32 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y       uint32 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	Colored *bool  `protobuf:"varint,4,opt,name=colored,proto3,oneof" json:"colored,omitempty"`
}

func (x *Space) Reset() {
	*x = Space{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Space) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Space) ProtoMessage() {}

func (x *Space) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Space.ProtoReflect.Descriptor instead.
func (*Space) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{17}
}

func (x *Space) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Space) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Space) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Space) GetColored() bool {
	if x != nil && x.Colored != nil {
		return *x.Colored
	}
	return false
}

type NookCoords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coords []*WirePoint `protobuf:"bytes,1,rep,name=coords,proto3" json:"coords,omitempty"`
}

func (x *NookCoords) Reset() {
	*x = NookCoords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NookCoords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NookCoords) ProtoMessage() {}

func (x *NookCoords) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NookCoords.ProtoReflect.Descriptor instead.
func (*NookCoords) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{18}
}

func (x *NookCoords) GetCoords() []*WirePoint {
	if x != nil {
		return x.Coords
	}
	return nil
}

type AllowedUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []string `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *AllowedUsers) Reset() {
	*x = AllowedUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowedUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowedUsers) ProtoMessage() {}

func (x *AllowedUsers) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowedUsers.ProtoReflect.Descriptor instead.
func (*AllowedUsers) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{19}
}

func (x *AllowedUsers) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

type RequestUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *RequestUser) Reset() {
	*x = RequestUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestUser) ProtoMessage() {}

func (x *RequestUser) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestUser.ProtoReflect.Descriptor instead.
func (*RequestUser) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{20}
}

func (x *RequestUser) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type RequestedUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// maps uid to optional player metadata about users who requested to join
	Users map[string]*RequestUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RequestedUsers) Reset() {
	*x = RequestedUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestedUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedUsers) ProtoMessage() {}

func (x *RequestedUsers) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestedUsers.ProtoReflect.Descriptor instead.
func (*RequestedUsers) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{21}
}

func (x *RequestedUsers) GetUsers() map[string]*RequestUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type RecordingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active           bool    `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	InitiatingPlayer *string `protobuf:"bytes,1,opt,name=initiatingPlayer,proto3,oneof" json:"initiatingPlayer,omitempty"`
	EgressId         *string `protobuf:"bytes,4,opt,name=egressId,proto3,oneof" json:"egressId,omitempty"`
}

func (x *RecordingInfo) Reset() {
	*x = RecordingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingInfo) ProtoMessage() {}

func (x *RecordingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingInfo.ProtoReflect.Descriptor instead.
func (*RecordingInfo) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{22}
}

func (x *RecordingInfo) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *RecordingInfo) GetInitiatingPlayer() string {
	if x != nil && x.InitiatingPlayer != nil {
		return *x.InitiatingPlayer
	}
	return ""
}

func (x *RecordingInfo) GetEgressId() string {
	if x != nil && x.EgressId != nil {
		return *x.EgressId
	}
	return ""
}

type NookDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NookCoords     *NookCoords     `protobuf:"bytes,1,opt,name=nookCoords,proto3,oneof" json:"nookCoords,omitempty"`
	Colored        *bool           `protobuf:"varint,2,opt,name=colored,proto3,oneof" json:"colored,omitempty"`
	Name           *string         `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Bookable       *bool           `protobuf:"varint,4,opt,name=bookable,proto3,oneof" json:"bookable,omitempty"`
	Capacity       *uint32         `protobuf:"varint,5,opt,name=capacity,proto3,oneof" json:"capacity,omitempty"`
	Restricted     *bool           `protobuf:"varint,6,opt,name=restricted,proto3,oneof" json:"restricted,omitempty"`
	AllowedUsers   *AllowedUsers   `protobuf:"bytes,7,opt,name=allowedUsers,proto3,oneof" json:"allowedUsers,omitempty"`
	RequestedUsers *RequestedUsers `protobuf:"bytes,8,opt,name=requestedUsers,proto3,oneof" json:"requestedUsers,omitempty"`
	IsInMeeting    *bool           `protobuf:"varint,9,opt,name=isInMeeting,proto3,oneof" json:"isInMeeting,omitempty"`
	IsDesk         *bool           `protobuf:"varint,10,opt,name=isDesk,proto3,oneof" json:"isDesk,omitempty"`
	RecordingInfo  *RecordingInfo  `protobuf:"bytes,11,opt,name=recordingInfo,proto3,oneof" json:"recordingInfo,omitempty"`
}

func (x *NookDiff) Reset() {
	*x = NookDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NookDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NookDiff) ProtoMessage() {}

func (x *NookDiff) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NookDiff.ProtoReflect.Descriptor instead.
func (*NookDiff) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{23}
}

func (x *NookDiff) GetNookCoords() *NookCoords {
	if x != nil {
		return x.NookCoords
	}
	return nil
}

func (x *NookDiff) GetColored() bool {
	if x != nil && x.Colored != nil {
		return *x.Colored
	}
	return false
}

func (x *NookDiff) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NookDiff) GetBookable() bool {
	if x != nil && x.Bookable != nil {
		return *x.Bookable
	}
	return false
}

func (x *NookDiff) GetCapacity() uint32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *NookDiff) GetRestricted() bool {
	if x != nil && x.Restricted != nil {
		return *x.Restricted
	}
	return false
}

func (x *NookDiff) GetAllowedUsers() *AllowedUsers {
	if x != nil {
		return x.AllowedUsers
	}
	return nil
}

func (x *NookDiff) GetRequestedUsers() *RequestedUsers {
	if x != nil {
		return x.RequestedUsers
	}
	return nil
}

func (x *NookDiff) GetIsInMeeting() bool {
	if x != nil && x.IsInMeeting != nil {
		return *x.IsInMeeting
	}
	return false
}

func (x *NookDiff) GetIsDesk() bool {
	if x != nil && x.IsDesk != nil {
		return *x.IsDesk
	}
	return false
}

func (x *NookDiff) GetRecordingInfo() *RecordingInfo {
	if x != nil {
		return x.RecordingInfo
	}
	return nil
}

type WirePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X uint32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y uint32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *WirePoint) Reset() {
	*x = WirePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirePoint) ProtoMessage() {}

func (x *WirePoint) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirePoint.ProtoReflect.Descriptor instead.
func (*WirePoint) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{24}
}

func (x *WirePoint) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *WirePoint) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type SpawnPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X       uint32  `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y       uint32  `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	SpawnId *string `protobuf:"bytes,3,opt,name=spawnId,proto3,oneof" json:"spawnId,omitempty"`
}

func (x *SpawnPoint) Reset() {
	*x = SpawnPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpawnPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnPoint) ProtoMessage() {}

func (x *SpawnPoint) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnPoint.ProtoReflect.Descriptor instead.
func (*SpawnPoint) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{25}
}

func (x *SpawnPoint) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *SpawnPoint) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *SpawnPoint) GetSpawnId() string {
	if x != nil && x.SpawnId != nil {
		return *x.SpawnId
	}
	return ""
}

type Portal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X         uint32  `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y         uint32  `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	TargetMap *string `protobuf:"bytes,3,opt,name=targetMap,proto3,oneof" json:"targetMap,omitempty"`
	TargetUrl *string `protobuf:"bytes,4,opt,name=targetUrl,proto3,oneof" json:"targetUrl,omitempty"`
	TargetX   *uint32 `protobuf:"varint,5,opt,name=targetX,proto3,oneof" json:"targetX,omitempty"`
	TargetY   *uint32 `protobuf:"varint,6,opt,name=targetY,proto3,oneof" json:"targetY,omitempty"`
}

func (x *Portal) Reset() {
	*x = Portal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Portal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Portal) ProtoMessage() {}

func (x *Portal) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Portal.ProtoReflect.Descriptor instead.
func (*Portal) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{26}
}

func (x *Portal) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Portal) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Portal) GetTargetMap() string {
	if x != nil && x.TargetMap != nil {
		return *x.TargetMap
	}
	return ""
}

func (x *Portal) GetTargetUrl() string {
	if x != nil && x.TargetUrl != nil {
		return *x.TargetUrl
	}
	return ""
}

func (x *Portal) GetTargetX() uint32 {
	if x != nil && x.TargetX != nil {
		return *x.TargetX
	}
	return 0
}

func (x *Portal) GetTargetY() uint32 {
	if x != nil && x.TargetY != nil {
		return *x.TargetY
	}
	return 0
}

type Announcer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X uint32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y uint32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Announcer) Reset() {
	*x = Announcer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Announcer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Announcer) ProtoMessage() {}

func (x *Announcer) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Announcer.ProtoReflect.Descriptor instead.
func (*Announcer) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{27}
}

func (x *Announcer) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Announcer) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// deprecating (NGN-123)
type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X       float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y       float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Src     string  `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`
	Width   *uint32 `protobuf:"varint,4,opt,name=width,proto3,oneof" json:"width,omitempty"`
	Height  *uint32 `protobuf:"varint,5,opt,name=height,proto3,oneof" json:"height,omitempty"`
	InFront *bool   `protobuf:"varint,6,opt,name=inFront,proto3,oneof" json:"inFront,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{28}
}

func (x *Asset) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Asset) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Asset) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *Asset) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Asset) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *Asset) GetInFront() bool {
	if x != nil && x.InFront != nil {
		return *x.InFront
	}
	return false
}

type AreaPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1 uint32 `protobuf:"varint,1,opt,name=x1,proto3" json:"x1,omitempty"`
	Y1 uint32 `protobuf:"varint,2,opt,name=y1,proto3" json:"y1,omitempty"`
	X2 uint32 `protobuf:"varint,3,opt,name=x2,proto3" json:"x2,omitempty"`
	Y2 uint32 `protobuf:"varint,4,opt,name=y2,proto3" json:"y2,omitempty"`
}

func (x *AreaPosition) Reset() {
	*x = AreaPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaPosition) ProtoMessage() {}

func (x *AreaPosition) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaPosition.ProtoReflect.Descriptor instead.
func (*AreaPosition) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{29}
}

func (x *AreaPosition) GetX1() uint32 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *AreaPosition) GetY1() uint32 {
	if x != nil {
		return x.Y1
	}
	return 0
}

func (x *AreaPosition) GetX2() uint32 {
	if x != nil {
		return x.X2
	}
	return 0
}

func (x *AreaPosition) GetY2() uint32 {
	if x != nil {
		return x.Y2
	}
	return 0
}

type WireArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category *string         `protobuf:"bytes,1,opt,name=category,proto3,oneof" json:"category,omitempty"`
	Coords   []*AreaPosition `protobuf:"bytes,2,rep,name=coords,proto3" json:"coords,omitempty"`
}

func (x *WireArea) Reset() {
	*x = WireArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireArea) ProtoMessage() {}

func (x *WireArea) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireArea.ProtoReflect.Descriptor instead.
func (*WireArea) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{30}
}

func (x *WireArea) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *WireArea) GetCoords() []*AreaPosition {
	if x != nil {
		return x.Coords
	}
	return nil
}

type DBDesk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coords []*AreaPosition `protobuf:"bytes,1,rep,name=coords,proto3" json:"coords,omitempty"`
}

func (x *DBDesk) Reset() {
	*x = DBDesk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBDesk) ProtoMessage() {}

func (x *DBDesk) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBDesk.ProtoReflect.Descriptor instead.
func (*DBDesk) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{31}
}

func (x *DBDesk) GetCoords() []*AreaPosition {
	if x != nil {
		return x.Coords
	}
	return nil
}

type MapSetDimensions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId  string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Width  uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *MapSetDimensions) Reset() {
	*x = MapSetDimensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetDimensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetDimensions) ProtoMessage() {}

func (x *MapSetDimensions) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetDimensions.ProtoReflect.Descriptor instead.
func (*MapSetDimensions) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{32}
}

func (x *MapSetDimensions) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetDimensions) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MapSetDimensions) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// this is the new version of impassable. maybe we should rename it?
type MapSetCollisions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	X     uint32 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"` // this is the x,y,w,h of the rectangle being updated by this mask
	Y     uint32 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	W     uint32 `protobuf:"varint,4,opt,name=w,proto3" json:"w,omitempty"`
	H     uint32 `protobuf:"varint,5,opt,name=h,proto3" json:"h,omitempty"`
	Mask  string `protobuf:"bytes,6,opt,name=mask,proto3" json:"mask,omitempty"` // base64 encoded string of bytes, 0x00 is walkable 0x01 is impassable
}

func (x *MapSetCollisions) Reset() {
	*x = MapSetCollisions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetCollisions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetCollisions) ProtoMessage() {}

func (x *MapSetCollisions) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetCollisions.ProtoReflect.Descriptor instead.
func (*MapSetCollisions) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{33}
}

func (x *MapSetCollisions) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetCollisions) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MapSetCollisions) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MapSetCollisions) GetW() uint32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *MapSetCollisions) GetH() uint32 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *MapSetCollisions) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

type MapSetCollisionsBits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId     string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Overwrite bool   `protobuf:"varint,2,opt,name=overwrite,proto3" json:"overwrite,omitempty"` // indicates whether to overwrite previous collision data (i.e. this represents the entire map) or merge
	X         uint32 `protobuf:"varint,3,opt,name=x,proto3" json:"x,omitempty"`                 // this is the x,y,w,h of the rectangle being updated by this mask
	Y         uint32 `protobuf:"varint,4,opt,name=y,proto3" json:"y,omitempty"`
	W         uint32 `protobuf:"varint,5,opt,name=w,proto3" json:"w,omitempty"`
	H         uint32 `protobuf:"varint,6,opt,name=h,proto3" json:"h,omitempty"`
	// the mask stored as bits where 0 is walkable and 1 is impassable
	// to read a single bit:
	//  byteIndex = ((y * w + x) / 8) | 0
	//  bitIndex  = 1 << ((y * w + x) % 8)
	//  impassable = (mask[byteIndex] & (1 << bitIndex)) !== 0
	Mask []byte `protobuf:"bytes,7,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *MapSetCollisionsBits) Reset() {
	*x = MapSetCollisionsBits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetCollisionsBits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetCollisionsBits) ProtoMessage() {}

func (x *MapSetCollisionsBits) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetCollisionsBits.ProtoReflect.Descriptor instead.
func (*MapSetCollisionsBits) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{34}
}

func (x *MapSetCollisionsBits) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetCollisionsBits) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

func (x *MapSetCollisionsBits) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MapSetCollisionsBits) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MapSetCollisionsBits) GetW() uint32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *MapSetCollisionsBits) GetH() uint32 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *MapSetCollisionsBits) GetMask() []byte {
	if x != nil {
		return x.Mask
	}
	return nil
}

type MapSetBackgroundImagePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId               string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	BackgroundImagePath string `protobuf:"bytes,2,opt,name=backgroundImagePath,proto3" json:"backgroundImagePath,omitempty"` // url
}

func (x *MapSetBackgroundImagePath) Reset() {
	*x = MapSetBackgroundImagePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetBackgroundImagePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetBackgroundImagePath) ProtoMessage() {}

func (x *MapSetBackgroundImagePath) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetBackgroundImagePath.ProtoReflect.Descriptor instead.
func (*MapSetBackgroundImagePath) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{35}
}

func (x *MapSetBackgroundImagePath) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetBackgroundImagePath) GetBackgroundImagePath() string {
	if x != nil {
		return x.BackgroundImagePath
	}
	return ""
}

type MapSetForegroundImagePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId               string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	ForegroundImagePath string `protobuf:"bytes,2,opt,name=foregroundImagePath,proto3" json:"foregroundImagePath,omitempty"`
	Delete              *bool  `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetForegroundImagePath) Reset() {
	*x = MapSetForegroundImagePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetForegroundImagePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetForegroundImagePath) ProtoMessage() {}

func (x *MapSetForegroundImagePath) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetForegroundImagePath.ProtoReflect.Descriptor instead.
func (*MapSetForegroundImagePath) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{36}
}

func (x *MapSetForegroundImagePath) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetForegroundImagePath) GetForegroundImagePath() string {
	if x != nil {
		return x.ForegroundImagePath
	}
	return ""
}

func (x *MapSetForegroundImagePath) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type MapSetNooks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId     string               `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Nooks     map[string]*NookDiff `protobuf:"bytes,2,rep,name=nooks,proto3" json:"nooks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Overwrite *bool                `protobuf:"varint,3,opt,name=overwrite,proto3,oneof" json:"overwrite,omitempty"`
}

func (x *MapSetNooks) Reset() {
	*x = MapSetNooks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetNooks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetNooks) ProtoMessage() {}

func (x *MapSetNooks) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetNooks.ProtoReflect.Descriptor instead.
func (*MapSetNooks) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{37}
}

func (x *MapSetNooks) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetNooks) GetNooks() map[string]*NookDiff {
	if x != nil {
		return x.Nooks
	}
	return nil
}

func (x *MapSetNooks) GetOverwrite() bool {
	if x != nil && x.Overwrite != nil {
		return *x.Overwrite
	}
	return false
}

type MapSetSpawn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId  string     `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Spawn  *WirePoint `protobuf:"bytes,2,opt,name=spawn,proto3" json:"spawn,omitempty"`
	Delete *bool      `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetSpawn) Reset() {
	*x = MapSetSpawn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetSpawn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetSpawn) ProtoMessage() {}

func (x *MapSetSpawn) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetSpawn.ProtoReflect.Descriptor instead.
func (*MapSetSpawn) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{38}
}

func (x *MapSetSpawn) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetSpawn) GetSpawn() *WirePoint {
	if x != nil {
		return x.Spawn
	}
	return nil
}

func (x *MapSetSpawn) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type MapSetSpawns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId  string        `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Spawns []*SpawnPoint `protobuf:"bytes,2,rep,name=spawns,proto3" json:"spawns,omitempty"`
}

func (x *MapSetSpawns) Reset() {
	*x = MapSetSpawns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetSpawns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetSpawns) ProtoMessage() {}

func (x *MapSetSpawns) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetSpawns.ProtoReflect.Descriptor instead.
func (*MapSetSpawns) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{39}
}

func (x *MapSetSpawns) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetSpawns) GetSpawns() []*SpawnPoint {
	if x != nil {
		return x.Spawns
	}
	return nil
}

type MapSetPortals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId   string    `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Portals []*Portal `protobuf:"bytes,2,rep,name=portals,proto3" json:"portals,omitempty"`
}

func (x *MapSetPortals) Reset() {
	*x = MapSetPortals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetPortals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetPortals) ProtoMessage() {}

func (x *MapSetPortals) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetPortals.ProtoReflect.Descriptor instead.
func (*MapSetPortals) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{40}
}

func (x *MapSetPortals) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetPortals) GetPortals() []*Portal {
	if x != nil {
		return x.Portals
	}
	return nil
}

type MapSetAnnouncer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId     string       `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Announcer []*Announcer `protobuf:"bytes,2,rep,name=announcer,proto3" json:"announcer,omitempty"`
}

func (x *MapSetAnnouncer) Reset() {
	*x = MapSetAnnouncer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetAnnouncer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetAnnouncer) ProtoMessage() {}

func (x *MapSetAnnouncer) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetAnnouncer.ProtoReflect.Descriptor instead.
func (*MapSetAnnouncer) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{41}
}

func (x *MapSetAnnouncer) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetAnnouncer) GetAnnouncer() []*Announcer {
	if x != nil {
		return x.Announcer
	}
	return nil
}

// deprecating (NGN-123)
type MapSetAssets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId  string   `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Assets []*Asset `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	Delete *bool    `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetAssets) Reset() {
	*x = MapSetAssets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetAssets) ProtoMessage() {}

func (x *MapSetAssets) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetAssets.ProtoReflect.Descriptor instead.
func (*MapSetAssets) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{42}
}

func (x *MapSetAssets) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetAssets) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *MapSetAssets) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type MapSetObjectsV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId                string                 `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Objects              map[string]*WireObject `protobuf:"bytes,2,rep,name=objects,proto3" json:"objects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UpdatesAreOverwrites *bool                  `protobuf:"varint,3,opt,name=updatesAreOverwrites,proto3,oneof" json:"updatesAreOverwrites,omitempty"`
}

func (x *MapSetObjectsV2) Reset() {
	*x = MapSetObjectsV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetObjectsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetObjectsV2) ProtoMessage() {}

func (x *MapSetObjectsV2) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetObjectsV2.ProtoReflect.Descriptor instead.
func (*MapSetObjectsV2) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{43}
}

func (x *MapSetObjectsV2) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetObjectsV2) GetObjects() map[string]*WireObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *MapSetObjectsV2) GetUpdatesAreOverwrites() bool {
	if x != nil && x.UpdatesAreOverwrites != nil {
		return *x.UpdatesAreOverwrites
	}
	return false
}

type MapSetName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId  string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Delete *bool  `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetName) Reset() {
	*x = MapSetName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetName) ProtoMessage() {}

func (x *MapSetName) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetName.ProtoReflect.Descriptor instead.
func (*MapSetName) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{44}
}

func (x *MapSetName) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MapSetName) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type MapSetMuteOnEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId       string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	MuteOnEntry bool   `protobuf:"varint,2,opt,name=muteOnEntry,proto3" json:"muteOnEntry,omitempty"`
	Delete      *bool  `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetMuteOnEntry) Reset() {
	*x = MapSetMuteOnEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetMuteOnEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetMuteOnEntry) ProtoMessage() {}

func (x *MapSetMuteOnEntry) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetMuteOnEntry.ProtoReflect.Descriptor instead.
func (*MapSetMuteOnEntry) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{45}
}

func (x *MapSetMuteOnEntry) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetMuteOnEntry) GetMuteOnEntry() bool {
	if x != nil {
		return x.MuteOnEntry
	}
	return false
}

func (x *MapSetMuteOnEntry) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type MapSetUseDrawnBG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId      string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	UseDrawnBG bool   `protobuf:"varint,2,opt,name=useDrawnBG,proto3" json:"useDrawnBG,omitempty"`
	Delete     *bool  `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetUseDrawnBG) Reset() {
	*x = MapSetUseDrawnBG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetUseDrawnBG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetUseDrawnBG) ProtoMessage() {}

func (x *MapSetUseDrawnBG) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetUseDrawnBG.ProtoReflect.Descriptor instead.
func (*MapSetUseDrawnBG) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{46}
}

func (x *MapSetUseDrawnBG) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetUseDrawnBG) GetUseDrawnBG() bool {
	if x != nil {
		return x.UseDrawnBG
	}
	return false
}

func (x *MapSetUseDrawnBG) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type MapSetWalls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId  string            `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Walls  map[string]string `protobuf:"bytes,2,rep,name=walls,proto3" json:"walls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Delete *bool             `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetWalls) Reset() {
	*x = MapSetWalls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetWalls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetWalls) ProtoMessage() {}

func (x *MapSetWalls) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetWalls.ProtoReflect.Descriptor instead.
func (*MapSetWalls) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{47}
}

func (x *MapSetWalls) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetWalls) GetWalls() map[string]string {
	if x != nil {
		return x.Walls
	}
	return nil
}

func (x *MapSetWalls) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type MapSetFloors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId  string            `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Floors map[string]string `protobuf:"bytes,2,rep,name=floors,proto3" json:"floors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Delete *bool             `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetFloors) Reset() {
	*x = MapSetFloors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetFloors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetFloors) ProtoMessage() {}

func (x *MapSetFloors) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetFloors.ProtoReflect.Descriptor instead.
func (*MapSetFloors) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{48}
}

func (x *MapSetFloors) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetFloors) GetFloors() map[string]string {
	if x != nil {
		return x.Floors
	}
	return nil
}

func (x *MapSetFloors) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type MapSetAreas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId  string               `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Areas  map[string]*WireArea `protobuf:"bytes,2,rep,name=areas,proto3" json:"areas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Delete *bool                `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetAreas) Reset() {
	*x = MapSetAreas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetAreas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetAreas) ProtoMessage() {}

func (x *MapSetAreas) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetAreas.ProtoReflect.Descriptor instead.
func (*MapSetAreas) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{49}
}

func (x *MapSetAreas) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetAreas) GetAreas() map[string]*WireArea {
	if x != nil {
		return x.Areas
	}
	return nil
}

func (x *MapSetAreas) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type MapDeleteObjectByKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *MapDeleteObjectByKey) Reset() {
	*x = MapDeleteObjectByKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapDeleteObjectByKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapDeleteObjectByKey) ProtoMessage() {}

func (x *MapDeleteObjectByKey) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapDeleteObjectByKey.ProtoReflect.Descriptor instead.
func (*MapDeleteObjectByKey) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{50}
}

func (x *MapDeleteObjectByKey) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapDeleteObjectByKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type MapDeleteObjectById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MapDeleteObjectById) Reset() {
	*x = MapDeleteObjectById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapDeleteObjectById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapDeleteObjectById) ProtoMessage() {}

func (x *MapDeleteObjectById) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapDeleteObjectById.ProtoReflect.Descriptor instead.
func (*MapDeleteObjectById) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{51}
}

func (x *MapDeleteObjectById) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapDeleteObjectById) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MapSetMiniMapImagePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId            string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	MiniMapImagePath string `protobuf:"bytes,2,opt,name=miniMapImagePath,proto3" json:"miniMapImagePath,omitempty"`
	Delete           *bool  `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetMiniMapImagePath) Reset() {
	*x = MapSetMiniMapImagePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetMiniMapImagePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetMiniMapImagePath) ProtoMessage() {}

func (x *MapSetMiniMapImagePath) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetMiniMapImagePath.ProtoReflect.Descriptor instead.
func (*MapSetMiniMapImagePath) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{52}
}

func (x *MapSetMiniMapImagePath) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetMiniMapImagePath) GetMiniMapImagePath() string {
	if x != nil {
		return x.MiniMapImagePath
	}
	return ""
}

func (x *MapSetMiniMapImagePath) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type MapSetEnabledChats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId        string   `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	EnabledChats []string `protobuf:"bytes,2,rep,name=enabledChats,proto3" json:"enabledChats,omitempty"`
	Delete       *bool    `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetEnabledChats) Reset() {
	*x = MapSetEnabledChats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetEnabledChats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetEnabledChats) ProtoMessage() {}

func (x *MapSetEnabledChats) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetEnabledChats.ProtoReflect.Descriptor instead.
func (*MapSetEnabledChats) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{53}
}

func (x *MapSetEnabledChats) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetEnabledChats) GetEnabledChats() []string {
	if x != nil {
		return x.EnabledChats
	}
	return nil
}

func (x *MapSetEnabledChats) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type MapSetDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId       string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Delete      *bool  `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetDescription) Reset() {
	*x = MapSetDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetDescription) ProtoMessage() {}

func (x *MapSetDescription) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetDescription.ProtoReflect.Descriptor instead.
func (*MapSetDescription) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{54}
}

func (x *MapSetDescription) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MapSetDescription) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type MapSetDecoration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId      string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Decoration string `protobuf:"bytes,2,opt,name=decoration,proto3" json:"decoration,omitempty"`
	Delete     *bool  `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetDecoration) Reset() {
	*x = MapSetDecoration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetDecoration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetDecoration) ProtoMessage() {}

func (x *MapSetDecoration) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetDecoration.ProtoReflect.Descriptor instead.
func (*MapSetDecoration) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{55}
}

func (x *MapSetDecoration) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetDecoration) GetDecoration() string {
	if x != nil {
		return x.Decoration
	}
	return ""
}

func (x *MapSetDecoration) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type MapSetTutorialTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId         string             `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	TutorialTasks *WireTutorialTasks `protobuf:"bytes,2,opt,name=tutorialTasks,proto3" json:"tutorialTasks,omitempty"`
	Delete        *bool              `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetTutorialTasks) Reset() {
	*x = MapSetTutorialTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetTutorialTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetTutorialTasks) ProtoMessage() {}

func (x *MapSetTutorialTasks) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetTutorialTasks.ProtoReflect.Descriptor instead.
func (*MapSetTutorialTasks) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{56}
}

func (x *MapSetTutorialTasks) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetTutorialTasks) GetTutorialTasks() *WireTutorialTasks {
	if x != nil {
		return x.TutorialTasks
	}
	return nil
}

func (x *MapSetTutorialTasks) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type WireTutorialTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupSetId string                 `protobuf:"bytes,1,opt,name=groupSetId,proto3" json:"groupSetId,omitempty"`
	Areas      []*TutorialTaskMapArea `protobuf:"bytes,2,rep,name=areas,proto3" json:"areas,omitempty"`
	AutoStart  *bool                  `protobuf:"varint,3,opt,name=autoStart,proto3,oneof" json:"autoStart,omitempty"`
}

func (x *WireTutorialTasks) Reset() {
	*x = WireTutorialTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireTutorialTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireTutorialTasks) ProtoMessage() {}

func (x *WireTutorialTasks) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireTutorialTasks.ProtoReflect.Descriptor instead.
func (*WireTutorialTasks) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{57}
}

func (x *WireTutorialTasks) GetGroupSetId() string {
	if x != nil {
		return x.GroupSetId
	}
	return ""
}

func (x *WireTutorialTasks) GetAreas() []*TutorialTaskMapArea {
	if x != nil {
		return x.Areas
	}
	return nil
}

func (x *WireTutorialTasks) GetAutoStart() bool {
	if x != nil && x.AutoStart != nil {
		return *x.AutoStart
	}
	return false
}

type TutorialTaskMapArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId string `protobuf:"bytes,1,opt,name=areaId,proto3" json:"areaId,omitempty"`
	X      uint32 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y      uint32 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	Height uint32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Width  uint32 `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *TutorialTaskMapArea) Reset() {
	*x = TutorialTaskMapArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialTaskMapArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialTaskMapArea) ProtoMessage() {}

func (x *TutorialTaskMapArea) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialTaskMapArea.ProtoReflect.Descriptor instead.
func (*TutorialTaskMapArea) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{58}
}

func (x *TutorialTaskMapArea) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *TutorialTaskMapArea) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *TutorialTaskMapArea) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *TutorialTaskMapArea) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TutorialTaskMapArea) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type MapSetScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId  string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Script string `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	Delete *bool  `protobuf:"varint,3,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *MapSetScript) Reset() {
	*x = MapSetScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSetScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSetScript) ProtoMessage() {}

func (x *MapSetScript) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSetScript.ProtoReflect.Descriptor instead.
func (*MapSetScript) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{59}
}

func (x *MapSetScript) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapSetScript) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *MapSetScript) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

type Inventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items map[string]*InventoryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Order map[string]string         `protobuf:"bytes,2,rep,name=order,proto3" json:"order,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Inventory) Reset() {
	*x = Inventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inventory) ProtoMessage() {}

func (x *Inventory) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inventory.ProtoReflect.Descriptor instead.
func (*Inventory) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{60}
}

func (x *Inventory) GetItems() map[string]*InventoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Inventory) GetOrder() map[string]string {
	if x != nil {
		return x.Order
	}
	return nil
}

type InventoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *InventoryItem) Reset() {
	*x = InventoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryItem) ProtoMessage() {}

func (x *InventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryItem.ProtoReflect.Descriptor instead.
func (*InventoryItem) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{61}
}

func (x *InventoryItem) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SpaceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Category    *string                 `protobuf:"bytes,2,opt,name=category,proto3,oneof" json:"category,omitempty"`
	Description *string                 `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	PreviewUrl  string                  `protobuf:"bytes,4,opt,name=previewUrl,proto3" json:"previewUrl,omitempty"`
	Meta        map[string]string       `protobuf:"bytes,5,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Abilities   map[string]*ItemAbility `protobuf:"bytes,6,rep,name=abilities,proto3" json:"abilities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SpaceItem) Reset() {
	*x = SpaceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceItem) ProtoMessage() {}

func (x *SpaceItem) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceItem.ProtoReflect.Descriptor instead.
func (*SpaceItem) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{62}
}

func (x *SpaceItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpaceItem) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *SpaceItem) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SpaceItem) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

func (x *SpaceItem) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SpaceItem) GetAbilities() map[string]*ItemAbility {
	if x != nil {
		return x.Abilities
	}
	return nil
}

type ItemAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ItemAbility) Reset() {
	*x = ItemAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemAbility) ProtoMessage() {}

func (x *ItemAbility) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemAbility.ProtoReflect.Descriptor instead.
func (*ItemAbility) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{63}
}

func (x *ItemAbility) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MapLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map string `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	X   uint32 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y   uint32 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *MapLocation) Reset() {
	*x = MapLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapLocation) ProtoMessage() {}

func (x *MapLocation) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapLocation.ProtoReflect.Descriptor instead.
func (*MapLocation) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{64}
}

func (x *MapLocation) GetMap() string {
	if x != nil {
		return x.Map
	}
	return ""
}

func (x *MapLocation) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MapLocation) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type ServerClientBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*ServerClientEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"` // don't add more stuff here
}

func (x *ServerClientBatch) Reset() {
	*x = ServerClientBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerClientBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerClientBatch) ProtoMessage() {}

func (x *ServerClientBatch) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerClientBatch.ProtoReflect.Descriptor instead.
func (*ServerClientBatch) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{65}
}

func (x *ServerClientBatch) GetEvents() []*ServerClientEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type ServerClientEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*ServerClientEvent_Info
	//	*ServerClientEvent_Warn
	//	*ServerClientEvent_Error
	//	*ServerClientEvent_Ready
	//	*ServerClientEvent_ServerHeartbeat
	//	*ServerClientEvent_TransactionStatus
	//	*ServerClientEvent_PlayerMoves
	//	*ServerClientEvent_PlayerSetsStatus
	//	*ServerClientEvent_PlayerSpotlights
	//	*ServerClientEvent_PlayerRings
	//	*ServerClientEvent_PlayerChats
	//	*ServerClientEvent_PlayerGhosts
	//	*ServerClientEvent_PlayerEntersWhisper
	//	*ServerClientEvent_PlayerLeavesWhisper
	//	*ServerClientEvent_PlayerActivelySpeaks
	//	*ServerClientEvent_PlayerSetsName
	//	*ServerClientEvent_PlayerSetsTextStatus
	//	*ServerClientEvent_PlayerSetsEmojiStatus
	//	*ServerClientEvent_PlayerSetsAffiliation
	//	*ServerClientEvent_PlayerExits
	//	*ServerClientEvent_PlayerSetsIsSignedIn
	//	*ServerClientEvent_SpaceOverwrites
	//	*ServerClientEvent_SpaceIsClosed
	//	*ServerClientEvent_PlayerEntersPortal
	//	*ServerClientEvent_SpaceSetsIdMapping
	//	*ServerClientEvent_PlayerSetsLastActive
	//	*ServerClientEvent_PlayerShootsConfetti
	//	*ServerClientEvent_PlayerSetsEventStatus
	//	*ServerClientEvent_PlayerSetsInConversation
	//	*ServerClientEvent_PlayerSetsCurrentArea
	//	*ServerClientEvent_PlayerSetsImagePointer
	//	*ServerClientEvent_CookieFound
	//	*ServerClientEvent_PlayerEntersWhisperV2
	//	*ServerClientEvent_PlayerSetsGoKartId
	//	*ServerClientEvent_MapSetDimensions
	//	*ServerClientEvent_MapSetBackgroundImagePath
	//	*ServerClientEvent_MapSetForegroundImagePath
	//	*ServerClientEvent_MapSetSpawns
	//	*ServerClientEvent_MapSetPortals
	//	*ServerClientEvent_MapSetAnnouncer
	//	*ServerClientEvent_MapSetAssets
	//	*ServerClientEvent_MapSetName
	//	*ServerClientEvent_MapSetMuteOnEntry
	//	*ServerClientEvent_MapSetUseDrawnBG
	//	*ServerClientEvent_MapSetWalls
	//	*ServerClientEvent_MapSetFloors
	//	*ServerClientEvent_MapSetAreas
	//	*ServerClientEvent_MapSetSpawn
	//	*ServerClientEvent_PlayerSetsIsAlone
	//	*ServerClientEvent_PlayerJoins
	//	*ServerClientEvent_MapSetEnabledChats
	//	*ServerClientEvent_MapSetDescription
	//	*ServerClientEvent_MapSetDecoration
	//	*ServerClientEvent_MapSetTutorialTasks
	//	*ServerClientEvent_MapSetMiniMapImagePath
	//	*ServerClientEvent_SpacePlaysSound
	//	*ServerClientEvent_MapSetScript
	//	*ServerClientEvent_PlayerSetsIsMobile
	//	*ServerClientEvent_SetScreenPointerServer
	//	*ServerClientEvent_PlayerSetsEmoteV2
	//	*ServerClientEvent_PlayerSetsFocusModeEndTime
	//	*ServerClientEvent_SpaceSetsSpaceMembers
	//	*ServerClientEvent_SpaceSetsSpaceUsers
	//	*ServerClientEvent_CustomEvent
	//	*ServerClientEvent_PlayerBlocks
	//	*ServerClientEvent_PlayerUpdatesFocusModeStatus
	//	*ServerClientEvent_PlayerNotifies
	//	*ServerClientEvent_PlayerSetsItemString
	//	*ServerClientEvent_PlayerSetsFollowTarget
	//	*ServerClientEvent_PlayerRequestsToLead
	//	*ServerClientEvent_PlayerSetsManualVideoSrc
	//	*ServerClientEvent_PlayerSetsIsNpc
	//	*ServerClientEvent_PlayerSetsSubtitle
	//	*ServerClientEvent_MapCommitsChanges
	//	*ServerClientEvent_MapMoveObject
	//	*ServerClientEvent_PlayerEditsChatMessage
	//	*ServerClientEvent_FxShakeObject
	//	*ServerClientEvent_FxShakeCamera
	//	*ServerClientEvent_PlayerSendsCommand
	//	*ServerClientEvent_SpaceRegistersCommand
	//	*ServerClientEvent_SpeakerUpdatesSession
	//	*ServerClientEvent_PlayerUpdatesInventory
	//	*ServerClientEvent_SpaceUpdatesItems
	//	*ServerClientEvent_PlayerSetsVehicleId
	//	*ServerClientEvent_PlayerSetsSpeedModifier
	//	*ServerClientEvent_PlayerHighFives
	//	*ServerClientEvent_SpaceStopsSound
	//	*ServerClientEvent_HipToBeSquare
	//	*ServerClientEvent_PlayerCrafts
	//	*ServerClientEvent_PlayerTriggersInventoryItem
	//	*ServerClientEvent_PlayerSetsAllowScreenPointer
	//	*ServerClientEvent_PrecomputedEnterLocation
	//	*ServerClientEvent_GotRequestMute
	//	*ServerClientEvent_PlayerSetsDeskInfo
	//	*ServerClientEvent_MapSetNooks
	//	*ServerClientEvent_DynamicGates
	//	*ServerClientEvent_PlayerWaves
	//	*ServerClientEvent_PlayerSetsPronouns
	//	*ServerClientEvent_PlayerSetsTitle
	//	*ServerClientEvent_PlayerSetsTimezone
	//	*ServerClientEvent_PlayerSetsDescription
	//	*ServerClientEvent_PlayerSetsPhone
	//	*ServerClientEvent_PlayerSetsPersonalImageUrl
	//	*ServerClientEvent_PlayerSetsProfileImageUrl
	//	*ServerClientEvent_SpaceSetsCapacity
	//	*ServerClientEvent_SpaceOverCapacityDeniesUser
	//	*ServerClientEvent_PlayerSetsAway
	//	*ServerClientEvent_MapSetCollisionsBits
	//	*ServerClientEvent_PlayerSetsCity
	//	*ServerClientEvent_PlayerSetsCountry
	//	*ServerClientEvent_PlayerSetsStartDate
	//	*ServerClientEvent_PlayerStartsRecording
	//	*ServerClientEvent_AccessRequestsUpdated
	//	*ServerClientEvent_AccessRequestRespondedTo
	//	*ServerClientEvent_SpaceSetsGuestPassStatuses
	//	*ServerClientEvent_PlayerSetsAvailability
	//	*ServerClientEvent_SubscriptionsUpdated
	//	*ServerClientEvent_SpaceRolePermissionOverrideUpdated
	//	*ServerClientEvent_PlayerSetsLastRaisedHand
	//	*ServerClientEvent_PlayerSetsCurrentlyEquippedWearables
	//	*ServerClientEvent_PlayerSetsDisplayEmail
	//	*ServerClientEvent_MapDeleteObjectByKey
	//	*ServerClientEvent_MapSetObjectsV2
	//	*ServerClientEvent_PlayerInteractsWithObject
	//	*ServerClientEvent_PlayerTriggersObject
	//	*ServerClientEvent_ChimeSetsUserInfo
	Event isServerClientEvent_Event `protobuf_oneof:"event"`
}

func (x *ServerClientEvent) Reset() {
	*x = ServerClientEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerClientEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerClientEvent) ProtoMessage() {}

func (x *ServerClientEvent) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerClientEvent.ProtoReflect.Descriptor instead.
func (*ServerClientEvent) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{66}
}

func (m *ServerClientEvent) GetEvent() isServerClientEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ServerClientEvent) GetInfo() *Info {
	if x, ok := x.GetEvent().(*ServerClientEvent_Info); ok {
		return x.Info
	}
	return nil
}

func (x *ServerClientEvent) GetWarn() *Warn {
	if x, ok := x.GetEvent().(*ServerClientEvent_Warn); ok {
		return x.Warn
	}
	return nil
}

func (x *ServerClientEvent) GetError() *ErrorEvent {
	if x, ok := x.GetEvent().(*ServerClientEvent_Error); ok {
		return x.Error
	}
	return nil
}

func (x *ServerClientEvent) GetReady() *Ready {
	if x, ok := x.GetEvent().(*ServerClientEvent_Ready); ok {
		return x.Ready
	}
	return nil
}

func (x *ServerClientEvent) GetServerHeartbeat() *ServerHeartbeat {
	if x, ok := x.GetEvent().(*ServerClientEvent_ServerHeartbeat); ok {
		return x.ServerHeartbeat
	}
	return nil
}

func (x *ServerClientEvent) GetTransactionStatus() *TransactionStatus {
	if x, ok := x.GetEvent().(*ServerClientEvent_TransactionStatus); ok {
		return x.TransactionStatus
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerMoves() *PlayerMoves {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerMoves); ok {
		return x.PlayerMoves
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsStatus() *PlayerSetsStatus {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsStatus); ok {
		return x.PlayerSetsStatus
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSpotlights() *PlayerSpotlights {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSpotlights); ok {
		return x.PlayerSpotlights
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerRings() *PlayerRings {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerRings); ok {
		return x.PlayerRings
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerChats() *PlayerChats {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerChats); ok {
		return x.PlayerChats
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerGhosts() *PlayerGhosts {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerGhosts); ok {
		return x.PlayerGhosts
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerEntersWhisper() *PlayerEntersWhisper {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerEntersWhisper); ok {
		return x.PlayerEntersWhisper
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerLeavesWhisper() *PlayerLeavesWhisper {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerLeavesWhisper); ok {
		return x.PlayerLeavesWhisper
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerActivelySpeaks() *PlayerActivelySpeaks {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerActivelySpeaks); ok {
		return x.PlayerActivelySpeaks
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsName() *PlayerSetsName {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsName); ok {
		return x.PlayerSetsName
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsTextStatus() *PlayerSetsTextStatus {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsTextStatus); ok {
		return x.PlayerSetsTextStatus
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsEmojiStatus() *PlayerSetsEmojiStatus {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsEmojiStatus); ok {
		return x.PlayerSetsEmojiStatus
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsAffiliation() *PlayerSetsAffiliation {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsAffiliation); ok {
		return x.PlayerSetsAffiliation
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerExits() *PlayerExits {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerExits); ok {
		return x.PlayerExits
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsIsSignedIn() *PlayerSetsIsSignedIn {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsIsSignedIn); ok {
		return x.PlayerSetsIsSignedIn
	}
	return nil
}

func (x *ServerClientEvent) GetSpaceOverwrites() *SpaceOverwrites {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpaceOverwrites); ok {
		return x.SpaceOverwrites
	}
	return nil
}

func (x *ServerClientEvent) GetSpaceIsClosed() *SpaceIsClosed {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpaceIsClosed); ok {
		return x.SpaceIsClosed
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerEntersPortal() *PlayerEntersPortal {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerEntersPortal); ok {
		return x.PlayerEntersPortal
	}
	return nil
}

func (x *ServerClientEvent) GetSpaceSetsIdMapping() *SpaceSetsIdMapping {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpaceSetsIdMapping); ok {
		return x.SpaceSetsIdMapping
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsLastActive() *PlayerSetsLastActive {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsLastActive); ok {
		return x.PlayerSetsLastActive
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerShootsConfetti() *PlayerShootsConfetti {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerShootsConfetti); ok {
		return x.PlayerShootsConfetti
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsEventStatus() *PlayerSetsEventStatus {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsEventStatus); ok {
		return x.PlayerSetsEventStatus
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsInConversation() *PlayerSetsInConversation {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsInConversation); ok {
		return x.PlayerSetsInConversation
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsCurrentArea() *PlayerSetsCurrentArea {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsCurrentArea); ok {
		return x.PlayerSetsCurrentArea
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsImagePointer() *PlayerSetsImagePointer {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsImagePointer); ok {
		return x.PlayerSetsImagePointer
	}
	return nil
}

func (x *ServerClientEvent) GetCookieFound() *CookieFound {
	if x, ok := x.GetEvent().(*ServerClientEvent_CookieFound); ok {
		return x.CookieFound
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerEntersWhisperV2() *PlayerEntersWhisperV2 {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerEntersWhisperV2); ok {
		return x.PlayerEntersWhisperV2
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsGoKartId() *PlayerSetsGoKartId {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsGoKartId); ok {
		return x.PlayerSetsGoKartId
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetDimensions() *MapSetDimensions {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetDimensions); ok {
		return x.MapSetDimensions
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetBackgroundImagePath() *MapSetBackgroundImagePath {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetBackgroundImagePath); ok {
		return x.MapSetBackgroundImagePath
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetForegroundImagePath() *MapSetForegroundImagePath {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetForegroundImagePath); ok {
		return x.MapSetForegroundImagePath
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetSpawns() *MapSetSpawns {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetSpawns); ok {
		return x.MapSetSpawns
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetPortals() *MapSetPortals {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetPortals); ok {
		return x.MapSetPortals
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetAnnouncer() *MapSetAnnouncer {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetAnnouncer); ok {
		return x.MapSetAnnouncer
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetAssets() *MapSetAssets {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetAssets); ok {
		return x.MapSetAssets
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetName() *MapSetName {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetName); ok {
		return x.MapSetName
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetMuteOnEntry() *MapSetMuteOnEntry {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetMuteOnEntry); ok {
		return x.MapSetMuteOnEntry
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetUseDrawnBG() *MapSetUseDrawnBG {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetUseDrawnBG); ok {
		return x.MapSetUseDrawnBG
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetWalls() *MapSetWalls {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetWalls); ok {
		return x.MapSetWalls
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetFloors() *MapSetFloors {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetFloors); ok {
		return x.MapSetFloors
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetAreas() *MapSetAreas {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetAreas); ok {
		return x.MapSetAreas
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetSpawn() *MapSetSpawn {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetSpawn); ok {
		return x.MapSetSpawn
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsIsAlone() *PlayerSetsIsAlone {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsIsAlone); ok {
		return x.PlayerSetsIsAlone
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerJoins() *PlayerJoins {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerJoins); ok {
		return x.PlayerJoins
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetEnabledChats() *MapSetEnabledChats {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetEnabledChats); ok {
		return x.MapSetEnabledChats
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetDescription() *MapSetDescription {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetDescription); ok {
		return x.MapSetDescription
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetDecoration() *MapSetDecoration {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetDecoration); ok {
		return x.MapSetDecoration
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetTutorialTasks() *MapSetTutorialTasks {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetTutorialTasks); ok {
		return x.MapSetTutorialTasks
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetMiniMapImagePath() *MapSetMiniMapImagePath {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetMiniMapImagePath); ok {
		return x.MapSetMiniMapImagePath
	}
	return nil
}

func (x *ServerClientEvent) GetSpacePlaysSound() *SpacePlaysSound {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpacePlaysSound); ok {
		return x.SpacePlaysSound
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetScript() *MapSetScript {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetScript); ok {
		return x.MapSetScript
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsIsMobile() *PlayerSetsIsMobile {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsIsMobile); ok {
		return x.PlayerSetsIsMobile
	}
	return nil
}

func (x *ServerClientEvent) GetSetScreenPointerServer() *SetScreenPointerServer {
	if x, ok := x.GetEvent().(*ServerClientEvent_SetScreenPointerServer); ok {
		return x.SetScreenPointerServer
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsEmoteV2() *PlayerSetsEmoteV2 {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsEmoteV2); ok {
		return x.PlayerSetsEmoteV2
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsFocusModeEndTime() *PlayerSetsFocusModeEndTime {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsFocusModeEndTime); ok {
		return x.PlayerSetsFocusModeEndTime
	}
	return nil
}

func (x *ServerClientEvent) GetSpaceSetsSpaceMembers() *SpaceSetsSpaceMembers {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpaceSetsSpaceMembers); ok {
		return x.SpaceSetsSpaceMembers
	}
	return nil
}

func (x *ServerClientEvent) GetSpaceSetsSpaceUsers() *SpaceSetsSpaceUsers {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpaceSetsSpaceUsers); ok {
		return x.SpaceSetsSpaceUsers
	}
	return nil
}

func (x *ServerClientEvent) GetCustomEvent() *CustomEvent {
	if x, ok := x.GetEvent().(*ServerClientEvent_CustomEvent); ok {
		return x.CustomEvent
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerBlocks() *PlayerBlocks {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerBlocks); ok {
		return x.PlayerBlocks
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerUpdatesFocusModeStatus() *PlayerUpdatesFocusModeStatus {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerUpdatesFocusModeStatus); ok {
		return x.PlayerUpdatesFocusModeStatus
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerNotifies() *PlayerNotifies {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerNotifies); ok {
		return x.PlayerNotifies
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsItemString() *PlayerSetsItemString {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsItemString); ok {
		return x.PlayerSetsItemString
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsFollowTarget() *PlayerSetsFollowTarget {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsFollowTarget); ok {
		return x.PlayerSetsFollowTarget
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerRequestsToLead() *PlayerRequestsToLead {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerRequestsToLead); ok {
		return x.PlayerRequestsToLead
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsManualVideoSrc() *PlayerSetsManualVideoSrc {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsManualVideoSrc); ok {
		return x.PlayerSetsManualVideoSrc
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsIsNpc() *PlayerSetsIsNpc {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsIsNpc); ok {
		return x.PlayerSetsIsNpc
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsSubtitle() *PlayerSetsSubtitle {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsSubtitle); ok {
		return x.PlayerSetsSubtitle
	}
	return nil
}

func (x *ServerClientEvent) GetMapCommitsChanges() *MapCommitsChanges {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapCommitsChanges); ok {
		return x.MapCommitsChanges
	}
	return nil
}

func (x *ServerClientEvent) GetMapMoveObject() *MapMoveObject {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapMoveObject); ok {
		return x.MapMoveObject
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerEditsChatMessage() *PlayerEditsChatMessage {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerEditsChatMessage); ok {
		return x.PlayerEditsChatMessage
	}
	return nil
}

func (x *ServerClientEvent) GetFxShakeObject() *FXShakeObject {
	if x, ok := x.GetEvent().(*ServerClientEvent_FxShakeObject); ok {
		return x.FxShakeObject
	}
	return nil
}

func (x *ServerClientEvent) GetFxShakeCamera() *FXShakeCamera {
	if x, ok := x.GetEvent().(*ServerClientEvent_FxShakeCamera); ok {
		return x.FxShakeCamera
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSendsCommand() *PlayerSendsCommand {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSendsCommand); ok {
		return x.PlayerSendsCommand
	}
	return nil
}

func (x *ServerClientEvent) GetSpaceRegistersCommand() *SpaceRegistersCommand {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpaceRegistersCommand); ok {
		return x.SpaceRegistersCommand
	}
	return nil
}

func (x *ServerClientEvent) GetSpeakerUpdatesSession() *SpeakerUpdatesSession {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpeakerUpdatesSession); ok {
		return x.SpeakerUpdatesSession
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerUpdatesInventory() *PlayerUpdatesInventory {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerUpdatesInventory); ok {
		return x.PlayerUpdatesInventory
	}
	return nil
}

func (x *ServerClientEvent) GetSpaceUpdatesItems() *SpaceUpdatesItems {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpaceUpdatesItems); ok {
		return x.SpaceUpdatesItems
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsVehicleId() *PlayerSetsVehicleId {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsVehicleId); ok {
		return x.PlayerSetsVehicleId
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsSpeedModifier() *PlayerSetsSpeedModifier {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsSpeedModifier); ok {
		return x.PlayerSetsSpeedModifier
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerHighFives() *PlayerHighFives {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerHighFives); ok {
		return x.PlayerHighFives
	}
	return nil
}

func (x *ServerClientEvent) GetSpaceStopsSound() *SpaceStopsSound {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpaceStopsSound); ok {
		return x.SpaceStopsSound
	}
	return nil
}

func (x *ServerClientEvent) GetHipToBeSquare() *HipToBeSquare {
	if x, ok := x.GetEvent().(*ServerClientEvent_HipToBeSquare); ok {
		return x.HipToBeSquare
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerCrafts() *PlayerCrafts {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerCrafts); ok {
		return x.PlayerCrafts
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerTriggersInventoryItem() *PlayerTriggersInventoryItem {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerTriggersInventoryItem); ok {
		return x.PlayerTriggersInventoryItem
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsAllowScreenPointer() *PlayerSetsAllowScreenPointer {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsAllowScreenPointer); ok {
		return x.PlayerSetsAllowScreenPointer
	}
	return nil
}

func (x *ServerClientEvent) GetPrecomputedEnterLocation() *PrecomputedEnterLocation {
	if x, ok := x.GetEvent().(*ServerClientEvent_PrecomputedEnterLocation); ok {
		return x.PrecomputedEnterLocation
	}
	return nil
}

func (x *ServerClientEvent) GetGotRequestMute() *GotRequestMute {
	if x, ok := x.GetEvent().(*ServerClientEvent_GotRequestMute); ok {
		return x.GotRequestMute
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsDeskInfo() *PlayerSetsDeskInfo {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsDeskInfo); ok {
		return x.PlayerSetsDeskInfo
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetNooks() *MapSetNooks {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetNooks); ok {
		return x.MapSetNooks
	}
	return nil
}

func (x *ServerClientEvent) GetDynamicGates() *DynamicGates {
	if x, ok := x.GetEvent().(*ServerClientEvent_DynamicGates); ok {
		return x.DynamicGates
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerWaves() *PlayerWaves {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerWaves); ok {
		return x.PlayerWaves
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsPronouns() *PlayerSetsPronouns {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsPronouns); ok {
		return x.PlayerSetsPronouns
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsTitle() *PlayerSetsTitle {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsTitle); ok {
		return x.PlayerSetsTitle
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsTimezone() *PlayerSetsTimezone {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsTimezone); ok {
		return x.PlayerSetsTimezone
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsDescription() *PlayerSetsDescription {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsDescription); ok {
		return x.PlayerSetsDescription
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsPhone() *PlayerSetsPhone {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsPhone); ok {
		return x.PlayerSetsPhone
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsPersonalImageUrl() *PlayerSetsPersonalImageUrl {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsPersonalImageUrl); ok {
		return x.PlayerSetsPersonalImageUrl
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsProfileImageUrl() *PlayerSetsProfileImageUrl {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsProfileImageUrl); ok {
		return x.PlayerSetsProfileImageUrl
	}
	return nil
}

func (x *ServerClientEvent) GetSpaceSetsCapacity() *SpaceSetsCapacity {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpaceSetsCapacity); ok {
		return x.SpaceSetsCapacity
	}
	return nil
}

func (x *ServerClientEvent) GetSpaceOverCapacityDeniesUser() *SpaceOverCapacityDeniesUser {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpaceOverCapacityDeniesUser); ok {
		return x.SpaceOverCapacityDeniesUser
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsAway() *PlayerSetsAway {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsAway); ok {
		return x.PlayerSetsAway
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetCollisionsBits() *MapSetCollisionsBits {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetCollisionsBits); ok {
		return x.MapSetCollisionsBits
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsCity() *PlayerSetsCity {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsCity); ok {
		return x.PlayerSetsCity
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsCountry() *PlayerSetsCountry {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsCountry); ok {
		return x.PlayerSetsCountry
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsStartDate() *PlayerSetsStartDate {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsStartDate); ok {
		return x.PlayerSetsStartDate
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerStartsRecording() *PlayerStartsRecording {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerStartsRecording); ok {
		return x.PlayerStartsRecording
	}
	return nil
}

func (x *ServerClientEvent) GetAccessRequestsUpdated() *AccessRequestsUpdated {
	if x, ok := x.GetEvent().(*ServerClientEvent_AccessRequestsUpdated); ok {
		return x.AccessRequestsUpdated
	}
	return nil
}

func (x *ServerClientEvent) GetAccessRequestRespondedTo() *AccessRequestRespondedTo {
	if x, ok := x.GetEvent().(*ServerClientEvent_AccessRequestRespondedTo); ok {
		return x.AccessRequestRespondedTo
	}
	return nil
}

func (x *ServerClientEvent) GetSpaceSetsGuestPassStatuses() *SpaceSetsGuestPassStatuses {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpaceSetsGuestPassStatuses); ok {
		return x.SpaceSetsGuestPassStatuses
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsAvailability() *PlayerSetsAvailability {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsAvailability); ok {
		return x.PlayerSetsAvailability
	}
	return nil
}

func (x *ServerClientEvent) GetSubscriptionsUpdated() *SubscriptionsUpdated {
	if x, ok := x.GetEvent().(*ServerClientEvent_SubscriptionsUpdated); ok {
		return x.SubscriptionsUpdated
	}
	return nil
}

func (x *ServerClientEvent) GetSpaceRolePermissionOverrideUpdated() *SpaceRolePermissionOverrideUpdated {
	if x, ok := x.GetEvent().(*ServerClientEvent_SpaceRolePermissionOverrideUpdated); ok {
		return x.SpaceRolePermissionOverrideUpdated
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsLastRaisedHand() *PlayerSetsLastRaisedHand {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsLastRaisedHand); ok {
		return x.PlayerSetsLastRaisedHand
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsCurrentlyEquippedWearables() *PlayerSetsCurrentlyEquippedWearables {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsCurrentlyEquippedWearables); ok {
		return x.PlayerSetsCurrentlyEquippedWearables
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerSetsDisplayEmail() *PlayerSetsDisplayEmail {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerSetsDisplayEmail); ok {
		return x.PlayerSetsDisplayEmail
	}
	return nil
}

func (x *ServerClientEvent) GetMapDeleteObjectByKey() *MapDeleteObjectByKey {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapDeleteObjectByKey); ok {
		return x.MapDeleteObjectByKey
	}
	return nil
}

func (x *ServerClientEvent) GetMapSetObjectsV2() *MapSetObjectsV2 {
	if x, ok := x.GetEvent().(*ServerClientEvent_MapSetObjectsV2); ok {
		return x.MapSetObjectsV2
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerInteractsWithObject() *PlayerInteractsWithObject {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerInteractsWithObject); ok {
		return x.PlayerInteractsWithObject
	}
	return nil
}

func (x *ServerClientEvent) GetPlayerTriggersObject() *PlayerTriggersObject {
	if x, ok := x.GetEvent().(*ServerClientEvent_PlayerTriggersObject); ok {
		return x.PlayerTriggersObject
	}
	return nil
}

func (x *ServerClientEvent) GetChimeSetsUserInfo() *ChimeSetsUserInfo {
	if x, ok := x.GetEvent().(*ServerClientEvent_ChimeSetsUserInfo); ok {
		return x.ChimeSetsUserInfo
	}
	return nil
}

type isServerClientEvent_Event interface {
	isServerClientEvent_Event()
}

type ServerClientEvent_Info struct {
	Info *Info `protobuf:"bytes,100,opt,name=info,proto3,oneof"`
}

type ServerClientEvent_Warn struct {
	Warn *Warn `protobuf:"bytes,101,opt,name=warn,proto3,oneof"`
}

type ServerClientEvent_Error struct {
	Error *ErrorEvent `protobuf:"bytes,102,opt,name=error,proto3,oneof"`
}

type ServerClientEvent_Ready struct {
	Ready *Ready `protobuf:"bytes,103,opt,name=ready,proto3,oneof"`
}

type ServerClientEvent_ServerHeartbeat struct {
	ServerHeartbeat *ServerHeartbeat `protobuf:"bytes,105,opt,name=serverHeartbeat,proto3,oneof"`
}

type ServerClientEvent_TransactionStatus struct {
	TransactionStatus *TransactionStatus `protobuf:"bytes,107,opt,name=transactionStatus,proto3,oneof"`
}

type ServerClientEvent_PlayerMoves struct {
	PlayerMoves *PlayerMoves `protobuf:"bytes,1,opt,name=playerMoves,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsStatus struct {
	PlayerSetsStatus *PlayerSetsStatus `protobuf:"bytes,5,opt,name=playerSetsStatus,proto3,oneof"`
}

type ServerClientEvent_PlayerSpotlights struct {
	PlayerSpotlights *PlayerSpotlights `protobuf:"bytes,6,opt,name=playerSpotlights,proto3,oneof"`
}

type ServerClientEvent_PlayerRings struct {
	PlayerRings *PlayerRings `protobuf:"bytes,7,opt,name=playerRings,proto3,oneof"`
}

type ServerClientEvent_PlayerChats struct {
	PlayerChats *PlayerChats `protobuf:"bytes,9,opt,name=playerChats,proto3,oneof"`
}

type ServerClientEvent_PlayerGhosts struct {
	PlayerGhosts *PlayerGhosts `protobuf:"bytes,11,opt,name=playerGhosts,proto3,oneof"`
}

type ServerClientEvent_PlayerEntersWhisper struct {
	PlayerEntersWhisper *PlayerEntersWhisper `protobuf:"bytes,12,opt,name=playerEntersWhisper,proto3,oneof"` // deprecating (NGN-114)
}

type ServerClientEvent_PlayerLeavesWhisper struct {
	PlayerLeavesWhisper *PlayerLeavesWhisper `protobuf:"bytes,13,opt,name=playerLeavesWhisper,proto3,oneof"`
}

type ServerClientEvent_PlayerActivelySpeaks struct {
	PlayerActivelySpeaks *PlayerActivelySpeaks `protobuf:"bytes,14,opt,name=playerActivelySpeaks,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsName struct {
	PlayerSetsName *PlayerSetsName `protobuf:"bytes,17,opt,name=playerSetsName,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsTextStatus struct {
	PlayerSetsTextStatus *PlayerSetsTextStatus `protobuf:"bytes,18,opt,name=playerSetsTextStatus,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsEmojiStatus struct {
	PlayerSetsEmojiStatus *PlayerSetsEmojiStatus `protobuf:"bytes,19,opt,name=playerSetsEmojiStatus,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsAffiliation struct {
	PlayerSetsAffiliation *PlayerSetsAffiliation `protobuf:"bytes,20,opt,name=playerSetsAffiliation,proto3,oneof"`
}

type ServerClientEvent_PlayerExits struct {
	PlayerExits *PlayerExits `protobuf:"bytes,21,opt,name=playerExits,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsIsSignedIn struct {
	PlayerSetsIsSignedIn *PlayerSetsIsSignedIn `protobuf:"bytes,41,opt,name=playerSetsIsSignedIn,proto3,oneof"`
}

type ServerClientEvent_SpaceOverwrites struct {
	SpaceOverwrites *SpaceOverwrites `protobuf:"bytes,44,opt,name=spaceOverwrites,proto3,oneof"`
}

type ServerClientEvent_SpaceIsClosed struct {
	SpaceIsClosed *SpaceIsClosed `protobuf:"bytes,45,opt,name=spaceIsClosed,proto3,oneof"`
}

type ServerClientEvent_PlayerEntersPortal struct {
	PlayerEntersPortal *PlayerEntersPortal `protobuf:"bytes,46,opt,name=playerEntersPortal,proto3,oneof"`
}

type ServerClientEvent_SpaceSetsIdMapping struct {
	SpaceSetsIdMapping *SpaceSetsIdMapping `protobuf:"bytes,47,opt,name=spaceSetsIdMapping,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsLastActive struct {
	PlayerSetsLastActive *PlayerSetsLastActive `protobuf:"bytes,48,opt,name=playerSetsLastActive,proto3,oneof"` // experimental
}

type ServerClientEvent_PlayerShootsConfetti struct {
	PlayerShootsConfetti *PlayerShootsConfetti `protobuf:"bytes,49,opt,name=playerShootsConfetti,proto3,oneof"` // experimental
}

type ServerClientEvent_PlayerSetsEventStatus struct {
	PlayerSetsEventStatus *PlayerSetsEventStatus `protobuf:"bytes,50,opt,name=playerSetsEventStatus,proto3,oneof"` // experimental
}

type ServerClientEvent_PlayerSetsInConversation struct {
	PlayerSetsInConversation *PlayerSetsInConversation `protobuf:"bytes,51,opt,name=playerSetsInConversation,proto3,oneof"` // experimental
}

type ServerClientEvent_PlayerSetsCurrentArea struct {
	PlayerSetsCurrentArea *PlayerSetsCurrentArea `protobuf:"bytes,53,opt,name=playerSetsCurrentArea,proto3,oneof"` // experimental
}

type ServerClientEvent_PlayerSetsImagePointer struct {
	PlayerSetsImagePointer *PlayerSetsImagePointer `protobuf:"bytes,54,opt,name=playerSetsImagePointer,proto3,oneof"`
}

type ServerClientEvent_CookieFound struct {
	CookieFound *CookieFound `protobuf:"bytes,55,opt,name=cookieFound,proto3,oneof"` // experimental
}

type ServerClientEvent_PlayerEntersWhisperV2 struct {
	PlayerEntersWhisperV2 *PlayerEntersWhisperV2 `protobuf:"bytes,56,opt,name=playerEntersWhisperV2,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsGoKartId struct {
	PlayerSetsGoKartId *PlayerSetsGoKartId `protobuf:"bytes,57,opt,name=playerSetsGoKartId,proto3,oneof"` // deprecated (NGN-709)
}

type ServerClientEvent_MapSetDimensions struct {
	MapSetDimensions *MapSetDimensions `protobuf:"bytes,58,opt,name=mapSetDimensions,proto3,oneof"`
}

type ServerClientEvent_MapSetBackgroundImagePath struct {
	MapSetBackgroundImagePath *MapSetBackgroundImagePath `protobuf:"bytes,60,opt,name=mapSetBackgroundImagePath,proto3,oneof"`
}

type ServerClientEvent_MapSetForegroundImagePath struct {
	MapSetForegroundImagePath *MapSetForegroundImagePath `protobuf:"bytes,61,opt,name=mapSetForegroundImagePath,proto3,oneof"`
}

type ServerClientEvent_MapSetSpawns struct {
	MapSetSpawns *MapSetSpawns `protobuf:"bytes,64,opt,name=mapSetSpawns,proto3,oneof"`
}

type ServerClientEvent_MapSetPortals struct {
	MapSetPortals *MapSetPortals `protobuf:"bytes,65,opt,name=mapSetPortals,proto3,oneof"`
}

type ServerClientEvent_MapSetAnnouncer struct {
	MapSetAnnouncer *MapSetAnnouncer `protobuf:"bytes,66,opt,name=mapSetAnnouncer,proto3,oneof"`
}

type ServerClientEvent_MapSetAssets struct {
	MapSetAssets *MapSetAssets `protobuf:"bytes,69,opt,name=mapSetAssets,proto3,oneof"` // deprecating (NGN-123)
}

type ServerClientEvent_MapSetName struct {
	MapSetName *MapSetName `protobuf:"bytes,71,opt,name=mapSetName,proto3,oneof"`
}

type ServerClientEvent_MapSetMuteOnEntry struct {
	MapSetMuteOnEntry *MapSetMuteOnEntry `protobuf:"bytes,73,opt,name=mapSetMuteOnEntry,proto3,oneof"`
}

type ServerClientEvent_MapSetUseDrawnBG struct {
	MapSetUseDrawnBG *MapSetUseDrawnBG `protobuf:"bytes,74,opt,name=mapSetUseDrawnBG,proto3,oneof"`
}

type ServerClientEvent_MapSetWalls struct {
	MapSetWalls *MapSetWalls `protobuf:"bytes,75,opt,name=mapSetWalls,proto3,oneof"`
}

type ServerClientEvent_MapSetFloors struct {
	MapSetFloors *MapSetFloors `protobuf:"bytes,76,opt,name=mapSetFloors,proto3,oneof"`
}

type ServerClientEvent_MapSetAreas struct {
	MapSetAreas *MapSetAreas `protobuf:"bytes,77,opt,name=mapSetAreas,proto3,oneof"` // experimental
}

type ServerClientEvent_MapSetSpawn struct {
	MapSetSpawn *MapSetSpawn `protobuf:"bytes,79,opt,name=mapSetSpawn,proto3,oneof"` // deprecating (NGN-104)
}

type ServerClientEvent_PlayerSetsIsAlone struct {
	PlayerSetsIsAlone *PlayerSetsIsAlone `protobuf:"bytes,80,opt,name=playerSetsIsAlone,proto3,oneof"` // experimental
}

type ServerClientEvent_PlayerJoins struct {
	PlayerJoins *PlayerJoins `protobuf:"bytes,81,opt,name=playerJoins,proto3,oneof"`
}

type ServerClientEvent_MapSetEnabledChats struct {
	MapSetEnabledChats *MapSetEnabledChats `protobuf:"bytes,82,opt,name=mapSetEnabledChats,proto3,oneof"`
}

type ServerClientEvent_MapSetDescription struct {
	MapSetDescription *MapSetDescription `protobuf:"bytes,83,opt,name=mapSetDescription,proto3,oneof"`
}

type ServerClientEvent_MapSetDecoration struct {
	MapSetDecoration *MapSetDecoration `protobuf:"bytes,84,opt,name=mapSetDecoration,proto3,oneof"`
}

type ServerClientEvent_MapSetTutorialTasks struct {
	MapSetTutorialTasks *MapSetTutorialTasks `protobuf:"bytes,85,opt,name=mapSetTutorialTasks,proto3,oneof"`
}

type ServerClientEvent_MapSetMiniMapImagePath struct {
	MapSetMiniMapImagePath *MapSetMiniMapImagePath `protobuf:"bytes,86,opt,name=mapSetMiniMapImagePath,proto3,oneof"`
}

type ServerClientEvent_SpacePlaysSound struct {
	SpacePlaysSound *SpacePlaysSound `protobuf:"bytes,87,opt,name=spacePlaysSound,proto3,oneof"`
}

type ServerClientEvent_MapSetScript struct {
	MapSetScript *MapSetScript `protobuf:"bytes,88,opt,name=mapSetScript,proto3,oneof"` // experimental
}

type ServerClientEvent_PlayerSetsIsMobile struct {
	PlayerSetsIsMobile *PlayerSetsIsMobile `protobuf:"bytes,90,opt,name=playerSetsIsMobile,proto3,oneof"` // experimental
}

type ServerClientEvent_SetScreenPointerServer struct {
	SetScreenPointerServer *SetScreenPointerServer `protobuf:"bytes,91,opt,name=setScreenPointerServer,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsEmoteV2 struct {
	PlayerSetsEmoteV2 *PlayerSetsEmoteV2 `protobuf:"bytes,92,opt,name=playerSetsEmoteV2,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsFocusModeEndTime struct {
	PlayerSetsFocusModeEndTime *PlayerSetsFocusModeEndTime `protobuf:"bytes,93,opt,name=playerSetsFocusModeEndTime,proto3,oneof"` // experimental
}

type ServerClientEvent_SpaceSetsSpaceMembers struct {
	SpaceSetsSpaceMembers *SpaceSetsSpaceMembers `protobuf:"bytes,94,opt,name=spaceSetsSpaceMembers,proto3,oneof"` // deprecating soon (NGN-762)
}

type ServerClientEvent_SpaceSetsSpaceUsers struct {
	SpaceSetsSpaceUsers *SpaceSetsSpaceUsers `protobuf:"bytes,167,opt,name=spaceSetsSpaceUsers,proto3,oneof"`
}

type ServerClientEvent_CustomEvent struct {
	CustomEvent *CustomEvent `protobuf:"bytes,95,opt,name=customEvent,proto3,oneof"`
}

type ServerClientEvent_PlayerBlocks struct {
	PlayerBlocks *PlayerBlocks `protobuf:"bytes,97,opt,name=playerBlocks,proto3,oneof"`
}

type ServerClientEvent_PlayerUpdatesFocusModeStatus struct {
	PlayerUpdatesFocusModeStatus *PlayerUpdatesFocusModeStatus `protobuf:"bytes,98,opt,name=playerUpdatesFocusModeStatus,proto3,oneof"`
}

type ServerClientEvent_PlayerNotifies struct {
	PlayerNotifies *PlayerNotifies `protobuf:"bytes,99,opt,name=playerNotifies,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsItemString struct {
	PlayerSetsItemString *PlayerSetsItemString `protobuf:"bytes,108,opt,name=playerSetsItemString,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsFollowTarget struct {
	PlayerSetsFollowTarget *PlayerSetsFollowTarget `protobuf:"bytes,110,opt,name=playerSetsFollowTarget,proto3,oneof"`
}

type ServerClientEvent_PlayerRequestsToLead struct {
	PlayerRequestsToLead *PlayerRequestsToLead `protobuf:"bytes,111,opt,name=playerRequestsToLead,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsManualVideoSrc struct {
	PlayerSetsManualVideoSrc *PlayerSetsManualVideoSrc `protobuf:"bytes,112,opt,name=playerSetsManualVideoSrc,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsIsNpc struct {
	PlayerSetsIsNpc *PlayerSetsIsNpc `protobuf:"bytes,113,opt,name=playerSetsIsNpc,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsSubtitle struct {
	PlayerSetsSubtitle *PlayerSetsSubtitle `protobuf:"bytes,114,opt,name=playerSetsSubtitle,proto3,oneof"`
}

type ServerClientEvent_MapCommitsChanges struct {
	MapCommitsChanges *MapCommitsChanges `protobuf:"bytes,115,opt,name=mapCommitsChanges,proto3,oneof"`
}

type ServerClientEvent_MapMoveObject struct {
	MapMoveObject *MapMoveObject `protobuf:"bytes,117,opt,name=mapMoveObject,proto3,oneof"`
}

type ServerClientEvent_PlayerEditsChatMessage struct {
	PlayerEditsChatMessage *PlayerEditsChatMessage `protobuf:"bytes,118,opt,name=playerEditsChatMessage,proto3,oneof"`
}

type ServerClientEvent_FxShakeObject struct {
	FxShakeObject *FXShakeObject `protobuf:"bytes,119,opt,name=fxShakeObject,proto3,oneof"`
}

type ServerClientEvent_FxShakeCamera struct {
	FxShakeCamera *FXShakeCamera `protobuf:"bytes,120,opt,name=fxShakeCamera,proto3,oneof"`
}

type ServerClientEvent_PlayerSendsCommand struct {
	PlayerSendsCommand *PlayerSendsCommand `protobuf:"bytes,121,opt,name=playerSendsCommand,proto3,oneof"`
}

type ServerClientEvent_SpaceRegistersCommand struct {
	SpaceRegistersCommand *SpaceRegistersCommand `protobuf:"bytes,122,opt,name=spaceRegistersCommand,proto3,oneof"`
}

type ServerClientEvent_SpeakerUpdatesSession struct {
	SpeakerUpdatesSession *SpeakerUpdatesSession `protobuf:"bytes,123,opt,name=speakerUpdatesSession,proto3,oneof"`
}

type ServerClientEvent_PlayerUpdatesInventory struct {
	PlayerUpdatesInventory *PlayerUpdatesInventory `protobuf:"bytes,124,opt,name=playerUpdatesInventory,proto3,oneof"`
}

type ServerClientEvent_SpaceUpdatesItems struct {
	SpaceUpdatesItems *SpaceUpdatesItems `protobuf:"bytes,125,opt,name=spaceUpdatesItems,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsVehicleId struct {
	PlayerSetsVehicleId *PlayerSetsVehicleId `protobuf:"bytes,126,opt,name=playerSetsVehicleId,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsSpeedModifier struct {
	PlayerSetsSpeedModifier *PlayerSetsSpeedModifier `protobuf:"bytes,127,opt,name=playerSetsSpeedModifier,proto3,oneof"`
}

type ServerClientEvent_PlayerHighFives struct {
	PlayerHighFives *PlayerHighFives `protobuf:"bytes,128,opt,name=playerHighFives,proto3,oneof"`
}

type ServerClientEvent_SpaceStopsSound struct {
	SpaceStopsSound *SpaceStopsSound `protobuf:"bytes,130,opt,name=spaceStopsSound,proto3,oneof"`
}

type ServerClientEvent_HipToBeSquare struct {
	HipToBeSquare *HipToBeSquare `protobuf:"bytes,131,opt,name=hipToBeSquare,proto3,oneof"`
}

type ServerClientEvent_PlayerCrafts struct {
	PlayerCrafts *PlayerCrafts `protobuf:"bytes,132,opt,name=playerCrafts,proto3,oneof"`
}

type ServerClientEvent_PlayerTriggersInventoryItem struct {
	PlayerTriggersInventoryItem *PlayerTriggersInventoryItem `protobuf:"bytes,133,opt,name=playerTriggersInventoryItem,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsAllowScreenPointer struct {
	PlayerSetsAllowScreenPointer *PlayerSetsAllowScreenPointer `protobuf:"bytes,134,opt,name=playerSetsAllowScreenPointer,proto3,oneof"`
}

type ServerClientEvent_PrecomputedEnterLocation struct {
	PrecomputedEnterLocation *PrecomputedEnterLocation `protobuf:"bytes,135,opt,name=precomputedEnterLocation,proto3,oneof"`
}

type ServerClientEvent_GotRequestMute struct {
	GotRequestMute *GotRequestMute `protobuf:"bytes,136,opt,name=gotRequestMute,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsDeskInfo struct {
	PlayerSetsDeskInfo *PlayerSetsDeskInfo `protobuf:"bytes,137,opt,name=playerSetsDeskInfo,proto3,oneof"`
}

type ServerClientEvent_MapSetNooks struct {
	MapSetNooks *MapSetNooks `protobuf:"bytes,138,opt,name=mapSetNooks,proto3,oneof"`
}

type ServerClientEvent_DynamicGates struct {
	DynamicGates *DynamicGates `protobuf:"bytes,139,opt,name=dynamicGates,proto3,oneof"`
}

type ServerClientEvent_PlayerWaves struct {
	PlayerWaves *PlayerWaves `protobuf:"bytes,140,opt,name=playerWaves,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsPronouns struct {
	PlayerSetsPronouns *PlayerSetsPronouns `protobuf:"bytes,141,opt,name=playerSetsPronouns,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsTitle struct {
	PlayerSetsTitle *PlayerSetsTitle `protobuf:"bytes,142,opt,name=playerSetsTitle,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsTimezone struct {
	PlayerSetsTimezone *PlayerSetsTimezone `protobuf:"bytes,143,opt,name=playerSetsTimezone,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsDescription struct {
	PlayerSetsDescription *PlayerSetsDescription `protobuf:"bytes,144,opt,name=playerSetsDescription,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsPhone struct {
	PlayerSetsPhone *PlayerSetsPhone `protobuf:"bytes,145,opt,name=playerSetsPhone,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsPersonalImageUrl struct {
	PlayerSetsPersonalImageUrl *PlayerSetsPersonalImageUrl `protobuf:"bytes,146,opt,name=playerSetsPersonalImageUrl,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsProfileImageUrl struct {
	PlayerSetsProfileImageUrl *PlayerSetsProfileImageUrl `protobuf:"bytes,147,opt,name=playerSetsProfileImageUrl,proto3,oneof"`
}

type ServerClientEvent_SpaceSetsCapacity struct {
	SpaceSetsCapacity *SpaceSetsCapacity `protobuf:"bytes,148,opt,name=spaceSetsCapacity,proto3,oneof"`
}

type ServerClientEvent_SpaceOverCapacityDeniesUser struct {
	SpaceOverCapacityDeniesUser *SpaceOverCapacityDeniesUser `protobuf:"bytes,149,opt,name=spaceOverCapacityDeniesUser,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsAway struct {
	PlayerSetsAway *PlayerSetsAway `protobuf:"bytes,150,opt,name=playerSetsAway,proto3,oneof"`
}

type ServerClientEvent_MapSetCollisionsBits struct {
	MapSetCollisionsBits *MapSetCollisionsBits `protobuf:"bytes,151,opt,name=mapSetCollisionsBits,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsCity struct {
	PlayerSetsCity *PlayerSetsCity `protobuf:"bytes,152,opt,name=playerSetsCity,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsCountry struct {
	PlayerSetsCountry *PlayerSetsCountry `protobuf:"bytes,153,opt,name=playerSetsCountry,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsStartDate struct {
	PlayerSetsStartDate *PlayerSetsStartDate `protobuf:"bytes,154,opt,name=playerSetsStartDate,proto3,oneof"`
}

type ServerClientEvent_PlayerStartsRecording struct {
	PlayerStartsRecording *PlayerStartsRecording `protobuf:"bytes,156,opt,name=playerStartsRecording,proto3,oneof"`
}

type ServerClientEvent_AccessRequestsUpdated struct {
	AccessRequestsUpdated *AccessRequestsUpdated `protobuf:"bytes,157,opt,name=accessRequestsUpdated,proto3,oneof"`
}

type ServerClientEvent_AccessRequestRespondedTo struct {
	AccessRequestRespondedTo *AccessRequestRespondedTo `protobuf:"bytes,158,opt,name=accessRequestRespondedTo,proto3,oneof"`
}

type ServerClientEvent_SpaceSetsGuestPassStatuses struct {
	SpaceSetsGuestPassStatuses *SpaceSetsGuestPassStatuses `protobuf:"bytes,159,opt,name=spaceSetsGuestPassStatuses,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsAvailability struct {
	PlayerSetsAvailability *PlayerSetsAvailability `protobuf:"bytes,160,opt,name=playerSetsAvailability,proto3,oneof"`
}

type ServerClientEvent_SubscriptionsUpdated struct {
	SubscriptionsUpdated *SubscriptionsUpdated `protobuf:"bytes,161,opt,name=subscriptionsUpdated,proto3,oneof"`
}

type ServerClientEvent_SpaceRolePermissionOverrideUpdated struct {
	SpaceRolePermissionOverrideUpdated *SpaceRolePermissionOverrideUpdated `protobuf:"bytes,164,opt,name=spaceRolePermissionOverrideUpdated,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsLastRaisedHand struct {
	PlayerSetsLastRaisedHand *PlayerSetsLastRaisedHand `protobuf:"bytes,165,opt,name=playerSetsLastRaisedHand,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsCurrentlyEquippedWearables struct {
	PlayerSetsCurrentlyEquippedWearables *PlayerSetsCurrentlyEquippedWearables `protobuf:"bytes,166,opt,name=playerSetsCurrentlyEquippedWearables,proto3,oneof"`
}

type ServerClientEvent_PlayerSetsDisplayEmail struct {
	PlayerSetsDisplayEmail *PlayerSetsDisplayEmail `protobuf:"bytes,168,opt,name=playerSetsDisplayEmail,proto3,oneof"`
}

type ServerClientEvent_MapDeleteObjectByKey struct {
	MapDeleteObjectByKey *MapDeleteObjectByKey `protobuf:"bytes,169,opt,name=mapDeleteObjectByKey,proto3,oneof"`
}

type ServerClientEvent_MapSetObjectsV2 struct {
	MapSetObjectsV2 *MapSetObjectsV2 `protobuf:"bytes,170,opt,name=mapSetObjectsV2,proto3,oneof"`
}

type ServerClientEvent_PlayerInteractsWithObject struct {
	PlayerInteractsWithObject *PlayerInteractsWithObject `protobuf:"bytes,171,opt,name=playerInteractsWithObject,proto3,oneof"`
}

type ServerClientEvent_PlayerTriggersObject struct {
	PlayerTriggersObject *PlayerTriggersObject `protobuf:"bytes,172,opt,name=playerTriggersObject,proto3,oneof"`
}

type ServerClientEvent_ChimeSetsUserInfo struct {
	ChimeSetsUserInfo *ChimeSetsUserInfo `protobuf:"bytes,173,opt,name=chimeSetsUserInfo,proto3,oneof"` // experimental
}

func (*ServerClientEvent_Info) isServerClientEvent_Event() {}

func (*ServerClientEvent_Warn) isServerClientEvent_Event() {}

func (*ServerClientEvent_Error) isServerClientEvent_Event() {}

func (*ServerClientEvent_Ready) isServerClientEvent_Event() {}

func (*ServerClientEvent_ServerHeartbeat) isServerClientEvent_Event() {}

func (*ServerClientEvent_TransactionStatus) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerMoves) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsStatus) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSpotlights) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerRings) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerChats) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerGhosts) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerEntersWhisper) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerLeavesWhisper) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerActivelySpeaks) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsName) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsTextStatus) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsEmojiStatus) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsAffiliation) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerExits) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsIsSignedIn) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpaceOverwrites) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpaceIsClosed) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerEntersPortal) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpaceSetsIdMapping) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsLastActive) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerShootsConfetti) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsEventStatus) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsInConversation) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsCurrentArea) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsImagePointer) isServerClientEvent_Event() {}

func (*ServerClientEvent_CookieFound) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerEntersWhisperV2) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsGoKartId) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetDimensions) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetBackgroundImagePath) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetForegroundImagePath) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetSpawns) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetPortals) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetAnnouncer) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetAssets) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetName) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetMuteOnEntry) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetUseDrawnBG) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetWalls) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetFloors) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetAreas) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetSpawn) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsIsAlone) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerJoins) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetEnabledChats) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetDescription) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetDecoration) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetTutorialTasks) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetMiniMapImagePath) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpacePlaysSound) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetScript) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsIsMobile) isServerClientEvent_Event() {}

func (*ServerClientEvent_SetScreenPointerServer) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsEmoteV2) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsFocusModeEndTime) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpaceSetsSpaceMembers) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpaceSetsSpaceUsers) isServerClientEvent_Event() {}

func (*ServerClientEvent_CustomEvent) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerBlocks) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerUpdatesFocusModeStatus) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerNotifies) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsItemString) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsFollowTarget) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerRequestsToLead) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsManualVideoSrc) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsIsNpc) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsSubtitle) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapCommitsChanges) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapMoveObject) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerEditsChatMessage) isServerClientEvent_Event() {}

func (*ServerClientEvent_FxShakeObject) isServerClientEvent_Event() {}

func (*ServerClientEvent_FxShakeCamera) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSendsCommand) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpaceRegistersCommand) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpeakerUpdatesSession) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerUpdatesInventory) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpaceUpdatesItems) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsVehicleId) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsSpeedModifier) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerHighFives) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpaceStopsSound) isServerClientEvent_Event() {}

func (*ServerClientEvent_HipToBeSquare) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerCrafts) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerTriggersInventoryItem) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsAllowScreenPointer) isServerClientEvent_Event() {}

func (*ServerClientEvent_PrecomputedEnterLocation) isServerClientEvent_Event() {}

func (*ServerClientEvent_GotRequestMute) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsDeskInfo) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetNooks) isServerClientEvent_Event() {}

func (*ServerClientEvent_DynamicGates) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerWaves) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsPronouns) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsTitle) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsTimezone) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsDescription) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsPhone) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsPersonalImageUrl) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsProfileImageUrl) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpaceSetsCapacity) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpaceOverCapacityDeniesUser) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsAway) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetCollisionsBits) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsCity) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsCountry) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsStartDate) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerStartsRecording) isServerClientEvent_Event() {}

func (*ServerClientEvent_AccessRequestsUpdated) isServerClientEvent_Event() {}

func (*ServerClientEvent_AccessRequestRespondedTo) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpaceSetsGuestPassStatuses) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsAvailability) isServerClientEvent_Event() {}

func (*ServerClientEvent_SubscriptionsUpdated) isServerClientEvent_Event() {}

func (*ServerClientEvent_SpaceRolePermissionOverrideUpdated) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsLastRaisedHand) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsCurrentlyEquippedWearables) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerSetsDisplayEmail) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapDeleteObjectByKey) isServerClientEvent_Event() {}

func (*ServerClientEvent_MapSetObjectsV2) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerInteractsWithObject) isServerClientEvent_Event() {}

func (*ServerClientEvent_PlayerTriggersObject) isServerClientEvent_Event() {}

func (*ServerClientEvent_ChimeSetsUserInfo) isServerClientEvent_Event() {}

// the events the client is subscribed to has been changed on the server
type SubscriptionsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// array of event names the client will be notified about
	Subscriptions []string `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *SubscriptionsUpdated) Reset() {
	*x = SubscriptionsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionsUpdated) ProtoMessage() {}

func (x *SubscriptionsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionsUpdated.ProtoReflect.Descriptor instead.
func (*SubscriptionsUpdated) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{67}
}

func (x *SubscriptionsUpdated) GetSubscriptions() []string {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type ServerHeartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRTT uint32 `protobuf:"varint,1,opt,name=lastRTT,proto3" json:"lastRTT,omitempty"` // no longer used
}

func (x *ServerHeartbeat) Reset() {
	*x = ServerHeartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerHeartbeat) ProtoMessage() {}

func (x *ServerHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerHeartbeat.ProtoReflect.Descriptor instead.
func (*ServerHeartbeat) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{68}
}

func (x *ServerHeartbeat) GetLastRTT() uint32 {
	if x != nil {
		return x.LastRTT
	}
	return 0
}

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{69}
}

func (x *Info) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Warn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Warn) Reset() {
	*x = Warn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Warn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warn) ProtoMessage() {}

func (x *Warn) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warn.ProtoReflect.Descriptor instead.
func (*Warn) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{70}
}

func (x *Warn) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ErrorEvent) Reset() {
	*x = ErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorEvent) ProtoMessage() {}

func (x *ErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorEvent.ProtoReflect.Descriptor instead.
func (*ErrorEvent) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{71}
}

func (x *ErrorEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorEvent) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type Ready struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Ready) Reset() {
	*x = Ready{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ready) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ready) ProtoMessage() {}

func (x *Ready) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ready.ProtoReflect.Descriptor instead.
func (*Ready) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{72}
}

func (x *Ready) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TransactionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnId     uint32  `protobuf:"varint,1,opt,name=txnId,proto3" json:"txnId,omitempty"`
	Succeeded bool    `protobuf:"varint,2,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Reason    *string `protobuf:"bytes,3,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
}

func (x *TransactionStatus) Reset() {
	*x = TransactionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStatus) ProtoMessage() {}

func (x *TransactionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStatus.ProtoReflect.Descriptor instead.
func (*TransactionStatus) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{73}
}

func (x *TransactionStatus) GetTxnId() uint32 {
	if x != nil {
		return x.TxnId
	}
	return 0
}

func (x *TransactionStatus) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *TransactionStatus) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

// Always sent as the first message about any given player. If there are fields that must be initialized on clients
// immediately, they should be included in this message.
type PlayerJoins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
}

func (x *PlayerJoins) Reset() {
	*x = PlayerJoins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerJoins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerJoins) ProtoMessage() {}

func (x *PlayerJoins) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerJoins.ProtoReflect.Descriptor instead.
func (*PlayerJoins) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{74}
}

func (x *PlayerJoins) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

type GotRequestMute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MuterId string `protobuf:"bytes,1,opt,name=muterId,proto3" json:"muterId,omitempty"`
	Video   bool   `protobuf:"varint,2,opt,name=video,proto3" json:"video,omitempty"`
}

func (x *GotRequestMute) Reset() {
	*x = GotRequestMute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GotRequestMute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GotRequestMute) ProtoMessage() {}

func (x *GotRequestMute) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GotRequestMute.ProtoReflect.Descriptor instead.
func (*GotRequestMute) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{75}
}

func (x *GotRequestMute) GetMuterId() string {
	if x != nil {
		return x.MuterId
	}
	return ""
}

func (x *GotRequestMute) GetVideo() bool {
	if x != nil {
		return x.Video
	}
	return false
}

type PlayerMoves struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	// all optional, only send what's changed
	X           *uint32                   `protobuf:"varint,2,opt,name=x,proto3,oneof" json:"x,omitempty"`
	Y           *uint32                   `protobuf:"varint,3,opt,name=y,proto3,oneof" json:"y,omitempty"`
	Direction   *SpriteDirectionEnum_ENUM `protobuf:"varint,4,opt,name=direction,proto3,enum=gathertown.SpriteDirectionEnum_ENUM,oneof" json:"direction,omitempty"`
	MapId       *string                   `protobuf:"bytes,5,opt,name=mapId,proto3,oneof" json:"mapId,omitempty"`
	LastInputId uint32                    `protobuf:"varint,6,opt,name=lastInputId,proto3" json:"lastInputId,omitempty"`
}

func (x *PlayerMoves) Reset() {
	*x = PlayerMoves{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMoves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMoves) ProtoMessage() {}

func (x *PlayerMoves) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMoves.ProtoReflect.Descriptor instead.
func (*PlayerMoves) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{76}
}

func (x *PlayerMoves) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerMoves) GetX() uint32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *PlayerMoves) GetY() uint32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *PlayerMoves) GetDirection() SpriteDirectionEnum_ENUM {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return SpriteDirectionEnum_Stand
}

func (x *PlayerMoves) GetMapId() string {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return ""
}

func (x *PlayerMoves) GetLastInputId() uint32 {
	if x != nil {
		return x.LastInputId
	}
	return 0
}

type PlayerSetsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Busy  bool   `protobuf:"varint,2,opt,name=busy,proto3" json:"busy,omitempty"`
}

func (x *PlayerSetsStatus) Reset() {
	*x = PlayerSetsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsStatus) ProtoMessage() {}

func (x *PlayerSetsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsStatus.ProtoReflect.Descriptor instead.
func (*PlayerSetsStatus) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{77}
}

func (x *PlayerSetsStatus) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsStatus) GetBusy() bool {
	if x != nil {
		return x.Busy
	}
	return false
}

type PlayerSetsAvailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId           uint32  `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Status          string  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	StatusUpdatedAt *string `protobuf:"bytes,3,opt,name=statusUpdatedAt,proto3,oneof" json:"statusUpdatedAt,omitempty"`
	StatusEndOption *string `protobuf:"bytes,4,opt,name=statusEndOption,proto3,oneof" json:"statusEndOption,omitempty"`
}

func (x *PlayerSetsAvailability) Reset() {
	*x = PlayerSetsAvailability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsAvailability) ProtoMessage() {}

func (x *PlayerSetsAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsAvailability.ProtoReflect.Descriptor instead.
func (*PlayerSetsAvailability) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{78}
}

func (x *PlayerSetsAvailability) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsAvailability) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PlayerSetsAvailability) GetStatusUpdatedAt() string {
	if x != nil && x.StatusUpdatedAt != nil {
		return *x.StatusUpdatedAt
	}
	return ""
}

func (x *PlayerSetsAvailability) GetStatusEndOption() string {
	if x != nil && x.StatusEndOption != nil {
		return *x.StatusEndOption
	}
	return ""
}

type PlayerSpotlights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId         uint32 `protobuf:"varint,2,opt,name=encId,proto3" json:"encId,omitempty"`                 // the person who is being spotlit
	SpotlightedBy uint32 `protobuf:"varint,1,opt,name=spotlightedBy,proto3" json:"spotlightedBy,omitempty"` // the person who is doing the spotlighting; legacy \holdover
	Spotlighted   uint32 `protobuf:"varint,3,opt,name=spotlighted,proto3" json:"spotlighted,omitempty"`
}

func (x *PlayerSpotlights) Reset() {
	*x = PlayerSpotlights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSpotlights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSpotlights) ProtoMessage() {}

func (x *PlayerSpotlights) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSpotlights.ProtoReflect.Descriptor instead.
func (*PlayerSpotlights) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{79}
}

func (x *PlayerSpotlights) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSpotlights) GetSpotlightedBy() uint32 {
	if x != nil {
		return x.SpotlightedBy
	}
	return 0
}

func (x *PlayerSpotlights) GetSpotlighted() uint32 {
	if x != nil {
		return x.Spotlighted
	}
	return 0
}

type PlayerRings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"` // the ringer
}

func (x *PlayerRings) Reset() {
	*x = PlayerRings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRings) ProtoMessage() {}

func (x *PlayerRings) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRings.ProtoReflect.Descriptor instead.
func (*PlayerRings) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{80}
}

func (x *PlayerRings) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

type PlayerSetsImagePointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId    uint32  `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	ObjectId string  `protobuf:"bytes,2,opt,name=objectId,proto3" json:"objectId,omitempty"`
	X        float64 `protobuf:"fixed64,3,opt,name=x,proto3" json:"x,omitempty"`
	Y        float64 `protobuf:"fixed64,4,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *PlayerSetsImagePointer) Reset() {
	*x = PlayerSetsImagePointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsImagePointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsImagePointer) ProtoMessage() {}

func (x *PlayerSetsImagePointer) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsImagePointer.ProtoReflect.Descriptor instead.
func (*PlayerSetsImagePointer) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{81}
}

func (x *PlayerSetsImagePointer) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsImagePointer) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *PlayerSetsImagePointer) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PlayerSetsImagePointer) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type SetScreenPointerServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId    uint32  `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	ScreenId string  `protobuf:"bytes,2,opt,name=screenId,proto3" json:"screenId,omitempty"`
	X        float64 `protobuf:"fixed64,3,opt,name=x,proto3" json:"x,omitempty"`
	Y        float64 `protobuf:"fixed64,4,opt,name=y,proto3" json:"y,omitempty"`
	Color    string  `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *SetScreenPointerServer) Reset() {
	*x = SetScreenPointerServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetScreenPointerServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetScreenPointerServer) ProtoMessage() {}

func (x *SetScreenPointerServer) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetScreenPointerServer.ProtoReflect.Descriptor instead.
func (*SetScreenPointerServer) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{82}
}

func (x *SetScreenPointerServer) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *SetScreenPointerServer) GetScreenId() string {
	if x != nil {
		return x.ScreenId
	}
	return ""
}

func (x *SetScreenPointerServer) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *SetScreenPointerServer) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *SetScreenPointerServer) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type PlayerChats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId    string     `protobuf:"bytes,1,opt,name=senderId,proto3" json:"senderId,omitempty"`
	Recipient   string     `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Contents    string     `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
	SenderName  string     `protobuf:"bytes,4,opt,name=senderName,proto3" json:"senderName,omitempty"`
	Timestamp   *Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"` // deprecating (NGN-710)
	MessageType string     `protobuf:"bytes,6,opt,name=messageType,proto3" json:"messageType,omitempty"`
	UnixTime    float64    `protobuf:"fixed64,7,opt,name=unixTime,proto3" json:"unixTime,omitempty"`
	Id          *string    `protobuf:"bytes,8,opt,name=id,proto3,oneof" json:"id,omitempty"`
	RoomId      *string    `protobuf:"bytes,9,opt,name=roomId,proto3,oneof" json:"roomId,omitempty"`
	Approved    *bool      `protobuf:"varint,10,opt,name=approved,proto3,oneof" json:"approved,omitempty"`
	NookId      *string    `protobuf:"bytes,11,opt,name=nookId,proto3,oneof" json:"nookId,omitempty"`
}

func (x *PlayerChats) Reset() {
	*x = PlayerChats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerChats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerChats) ProtoMessage() {}

func (x *PlayerChats) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerChats.ProtoReflect.Descriptor instead.
func (*PlayerChats) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{83}
}

func (x *PlayerChats) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *PlayerChats) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *PlayerChats) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *PlayerChats) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *PlayerChats) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PlayerChats) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *PlayerChats) GetUnixTime() float64 {
	if x != nil {
		return x.UnixTime
	}
	return 0
}

func (x *PlayerChats) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *PlayerChats) GetRoomId() string {
	if x != nil && x.RoomId != nil {
		return *x.RoomId
	}
	return ""
}

func (x *PlayerChats) GetApproved() bool {
	if x != nil && x.Approved != nil {
		return *x.Approved
	}
	return false
}

func (x *PlayerChats) GetNookId() string {
	if x != nil && x.NookId != nil {
		return *x.NookId
	}
	return ""
}

type PlayerWaves struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId    uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	TargetId string `protobuf:"bytes,2,opt,name=targetId,proto3" json:"targetId,omitempty"`
	IsReply  bool   `protobuf:"varint,3,opt,name=isReply,proto3" json:"isReply,omitempty"`
}

func (x *PlayerWaves) Reset() {
	*x = PlayerWaves{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerWaves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerWaves) ProtoMessage() {}

func (x *PlayerWaves) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerWaves.ProtoReflect.Descriptor instead.
func (*PlayerWaves) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{84}
}

func (x *PlayerWaves) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerWaves) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *PlayerWaves) GetIsReply() bool {
	if x != nil {
		return x.IsReply
	}
	return false
}

// deprecating this (NGN-710)
type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seconds     float32 `protobuf:"fixed32,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds float32 `protobuf:"fixed32,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{85}
}

func (x *Timestamp) GetSeconds() float32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanoseconds() float32 {
	if x != nil {
		return x.Nanoseconds
	}
	return 0
}

type PlayerInteractsWithObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId    uint32  `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	MapId    string  `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Key      string  `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	DataJson *string `protobuf:"bytes,4,opt,name=dataJson,proto3,oneof" json:"dataJson,omitempty"` // JSON string
}

func (x *PlayerInteractsWithObject) Reset() {
	*x = PlayerInteractsWithObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInteractsWithObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInteractsWithObject) ProtoMessage() {}

func (x *PlayerInteractsWithObject) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInteractsWithObject.ProtoReflect.Descriptor instead.
func (*PlayerInteractsWithObject) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{86}
}

func (x *PlayerInteractsWithObject) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerInteractsWithObject) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *PlayerInteractsWithObject) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PlayerInteractsWithObject) GetDataJson() string {
	if x != nil && x.DataJson != nil {
		return *x.DataJson
	}
	return ""
}

type PlayerGhosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Ghost uint32 `protobuf:"varint,2,opt,name=ghost,proto3" json:"ghost,omitempty"`
}

func (x *PlayerGhosts) Reset() {
	*x = PlayerGhosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGhosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGhosts) ProtoMessage() {}

func (x *PlayerGhosts) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGhosts.ProtoReflect.Descriptor instead.
func (*PlayerGhosts) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{87}
}

func (x *PlayerGhosts) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerGhosts) GetGhost() uint32 {
	if x != nil {
		return x.Ghost
	}
	return 0
}

type PlayerEntersWhisper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId            uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	WhisperRecipient string `protobuf:"bytes,2,opt,name=whisperRecipient,proto3" json:"whisperRecipient,omitempty"`
	WhisperId        string `protobuf:"bytes,3,opt,name=whisperId,proto3" json:"whisperId,omitempty"`
}

func (x *PlayerEntersWhisper) Reset() {
	*x = PlayerEntersWhisper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerEntersWhisper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerEntersWhisper) ProtoMessage() {}

func (x *PlayerEntersWhisper) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerEntersWhisper.ProtoReflect.Descriptor instead.
func (*PlayerEntersWhisper) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{88}
}

func (x *PlayerEntersWhisper) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerEntersWhisper) GetWhisperRecipient() string {
	if x != nil {
		return x.WhisperRecipient
	}
	return ""
}

func (x *PlayerEntersWhisper) GetWhisperId() string {
	if x != nil {
		return x.WhisperId
	}
	return ""
}

type PlayerEntersWhisperV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId       uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	EncIdTarget uint32 `protobuf:"varint,2,opt,name=encIdTarget,proto3" json:"encIdTarget,omitempty"` // the person you intend to be whispering; will apply whisperId property to them as well
	WhisperId   string `protobuf:"bytes,3,opt,name=whisperId,proto3" json:"whisperId,omitempty"`
}

func (x *PlayerEntersWhisperV2) Reset() {
	*x = PlayerEntersWhisperV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerEntersWhisperV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerEntersWhisperV2) ProtoMessage() {}

func (x *PlayerEntersWhisperV2) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerEntersWhisperV2.ProtoReflect.Descriptor instead.
func (*PlayerEntersWhisperV2) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{89}
}

func (x *PlayerEntersWhisperV2) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerEntersWhisperV2) GetEncIdTarget() uint32 {
	if x != nil {
		return x.EncIdTarget
	}
	return 0
}

func (x *PlayerEntersWhisperV2) GetWhisperId() string {
	if x != nil {
		return x.WhisperId
	}
	return ""
}

type PlayerLeavesWhisper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
}

func (x *PlayerLeavesWhisper) Reset() {
	*x = PlayerLeavesWhisper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerLeavesWhisper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLeavesWhisper) ProtoMessage() {}

func (x *PlayerLeavesWhisper) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLeavesWhisper.ProtoReflect.Descriptor instead.
func (*PlayerLeavesWhisper) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{90}
}

func (x *PlayerLeavesWhisper) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

type PlayerActivelySpeaks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId            uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	ActivelySpeaking uint32 `protobuf:"varint,2,opt,name=activelySpeaking,proto3" json:"activelySpeaking,omitempty"`
}

func (x *PlayerActivelySpeaks) Reset() {
	*x = PlayerActivelySpeaks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerActivelySpeaks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerActivelySpeaks) ProtoMessage() {}

func (x *PlayerActivelySpeaks) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerActivelySpeaks.ProtoReflect.Descriptor instead.
func (*PlayerActivelySpeaks) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{91}
}

func (x *PlayerActivelySpeaks) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerActivelySpeaks) GetActivelySpeaking() uint32 {
	if x != nil {
		return x.ActivelySpeaking
	}
	return 0
}

type PlayerSetsEmoteV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32  `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Emote *string `protobuf:"bytes,2,opt,name=emote,proto3,oneof" json:"emote,omitempty"`
	Count *uint32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PlayerSetsEmoteV2) Reset() {
	*x = PlayerSetsEmoteV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsEmoteV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsEmoteV2) ProtoMessage() {}

func (x *PlayerSetsEmoteV2) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsEmoteV2.ProtoReflect.Descriptor instead.
func (*PlayerSetsEmoteV2) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{92}
}

func (x *PlayerSetsEmoteV2) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsEmoteV2) GetEmote() string {
	if x != nil && x.Emote != nil {
		return *x.Emote
	}
	return ""
}

func (x *PlayerSetsEmoteV2) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type PlayerSetsLastRaisedHand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId          uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	LastRaisedHand string `protobuf:"bytes,2,opt,name=lastRaisedHand,proto3" json:"lastRaisedHand,omitempty"`
}

func (x *PlayerSetsLastRaisedHand) Reset() {
	*x = PlayerSetsLastRaisedHand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsLastRaisedHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsLastRaisedHand) ProtoMessage() {}

func (x *PlayerSetsLastRaisedHand) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsLastRaisedHand.ProtoReflect.Descriptor instead.
func (*PlayerSetsLastRaisedHand) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{93}
}

func (x *PlayerSetsLastRaisedHand) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsLastRaisedHand) GetLastRaisedHand() string {
	if x != nil {
		return x.LastRaisedHand
	}
	return ""
}

type PlayerSetsLastActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId      uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	LastActive string `protobuf:"bytes,2,opt,name=lastActive,proto3" json:"lastActive,omitempty"`
}

func (x *PlayerSetsLastActive) Reset() {
	*x = PlayerSetsLastActive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsLastActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsLastActive) ProtoMessage() {}

func (x *PlayerSetsLastActive) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsLastActive.ProtoReflect.Descriptor instead.
func (*PlayerSetsLastActive) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{94}
}

func (x *PlayerSetsLastActive) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsLastActive) GetLastActive() string {
	if x != nil {
		return x.LastActive
	}
	return ""
}

type PlayerSetsName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PlayerSetsName) Reset() {
	*x = PlayerSetsName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsName) ProtoMessage() {}

func (x *PlayerSetsName) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsName.ProtoReflect.Descriptor instead.
func (*PlayerSetsName) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{95}
}

func (x *PlayerSetsName) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PlayerSetsTextStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId      uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	TextStatus string `protobuf:"bytes,2,opt,name=textStatus,proto3" json:"textStatus,omitempty"`
}

func (x *PlayerSetsTextStatus) Reset() {
	*x = PlayerSetsTextStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsTextStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsTextStatus) ProtoMessage() {}

func (x *PlayerSetsTextStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsTextStatus.ProtoReflect.Descriptor instead.
func (*PlayerSetsTextStatus) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{96}
}

func (x *PlayerSetsTextStatus) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsTextStatus) GetTextStatus() string {
	if x != nil {
		return x.TextStatus
	}
	return ""
}

type PlayerSetsPronouns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId    uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Pronouns string `protobuf:"bytes,2,opt,name=pronouns,proto3" json:"pronouns,omitempty"`
}

func (x *PlayerSetsPronouns) Reset() {
	*x = PlayerSetsPronouns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsPronouns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsPronouns) ProtoMessage() {}

func (x *PlayerSetsPronouns) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsPronouns.ProtoReflect.Descriptor instead.
func (*PlayerSetsPronouns) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{97}
}

func (x *PlayerSetsPronouns) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsPronouns) GetPronouns() string {
	if x != nil {
		return x.Pronouns
	}
	return ""
}

type PlayerSetsTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *PlayerSetsTitle) Reset() {
	*x = PlayerSetsTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsTitle) ProtoMessage() {}

func (x *PlayerSetsTitle) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsTitle.ProtoReflect.Descriptor instead.
func (*PlayerSetsTitle) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{98}
}

func (x *PlayerSetsTitle) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type PlayerSetsCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	City  string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
}

func (x *PlayerSetsCity) Reset() {
	*x = PlayerSetsCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsCity) ProtoMessage() {}

func (x *PlayerSetsCity) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsCity.ProtoReflect.Descriptor instead.
func (*PlayerSetsCity) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{99}
}

func (x *PlayerSetsCity) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsCity) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type PlayerSetsCountry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId   uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *PlayerSetsCountry) Reset() {
	*x = PlayerSetsCountry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsCountry) ProtoMessage() {}

func (x *PlayerSetsCountry) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsCountry.ProtoReflect.Descriptor instead.
func (*PlayerSetsCountry) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{100}
}

func (x *PlayerSetsCountry) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsCountry) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type PlayerSetsStartDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId     uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	StartDate string `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
}

func (x *PlayerSetsStartDate) Reset() {
	*x = PlayerSetsStartDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsStartDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsStartDate) ProtoMessage() {}

func (x *PlayerSetsStartDate) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsStartDate.ProtoReflect.Descriptor instead.
func (*PlayerSetsStartDate) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{101}
}

func (x *PlayerSetsStartDate) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsStartDate) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

type PlayerSetsTimezone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId    uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Timezone string `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *PlayerSetsTimezone) Reset() {
	*x = PlayerSetsTimezone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsTimezone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsTimezone) ProtoMessage() {}

func (x *PlayerSetsTimezone) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsTimezone.ProtoReflect.Descriptor instead.
func (*PlayerSetsTimezone) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{102}
}

func (x *PlayerSetsTimezone) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsTimezone) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type PlayerSetsPhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Phone string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *PlayerSetsPhone) Reset() {
	*x = PlayerSetsPhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsPhone) ProtoMessage() {}

func (x *PlayerSetsPhone) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsPhone.ProtoReflect.Descriptor instead.
func (*PlayerSetsPhone) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{103}
}

func (x *PlayerSetsPhone) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsPhone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type PlayerSetsDisplayEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId        uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	DisplayEmail string `protobuf:"bytes,2,opt,name=displayEmail,proto3" json:"displayEmail,omitempty"`
}

func (x *PlayerSetsDisplayEmail) Reset() {
	*x = PlayerSetsDisplayEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsDisplayEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsDisplayEmail) ProtoMessage() {}

func (x *PlayerSetsDisplayEmail) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsDisplayEmail.ProtoReflect.Descriptor instead.
func (*PlayerSetsDisplayEmail) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{104}
}

func (x *PlayerSetsDisplayEmail) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsDisplayEmail) GetDisplayEmail() string {
	if x != nil {
		return x.DisplayEmail
	}
	return ""
}

type PlayerSetsDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId       uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PlayerSetsDescription) Reset() {
	*x = PlayerSetsDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsDescription) ProtoMessage() {}

func (x *PlayerSetsDescription) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsDescription.ProtoReflect.Descriptor instead.
func (*PlayerSetsDescription) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{105}
}

func (x *PlayerSetsDescription) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type PlayerSetsProfileImageUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId           uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	ProfileImageUrl string `protobuf:"bytes,2,opt,name=profileImageUrl,proto3" json:"profileImageUrl,omitempty"`
}

func (x *PlayerSetsProfileImageUrl) Reset() {
	*x = PlayerSetsProfileImageUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsProfileImageUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsProfileImageUrl) ProtoMessage() {}

func (x *PlayerSetsProfileImageUrl) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsProfileImageUrl.ProtoReflect.Descriptor instead.
func (*PlayerSetsProfileImageUrl) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{106}
}

func (x *PlayerSetsProfileImageUrl) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsProfileImageUrl) GetProfileImageUrl() string {
	if x != nil {
		return x.ProfileImageUrl
	}
	return ""
}

type PlayerSetsPersonalImageUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId            uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	PersonalImageUrl string `protobuf:"bytes,2,opt,name=personalImageUrl,proto3" json:"personalImageUrl,omitempty"`
}

func (x *PlayerSetsPersonalImageUrl) Reset() {
	*x = PlayerSetsPersonalImageUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsPersonalImageUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsPersonalImageUrl) ProtoMessage() {}

func (x *PlayerSetsPersonalImageUrl) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsPersonalImageUrl.ProtoReflect.Descriptor instead.
func (*PlayerSetsPersonalImageUrl) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{107}
}

func (x *PlayerSetsPersonalImageUrl) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsPersonalImageUrl) GetPersonalImageUrl() string {
	if x != nil {
		return x.PersonalImageUrl
	}
	return ""
}

type PlayerSetsIsMobile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId    uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	IsMobile bool   `protobuf:"varint,2,opt,name=isMobile,proto3" json:"isMobile,omitempty"`
}

func (x *PlayerSetsIsMobile) Reset() {
	*x = PlayerSetsIsMobile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsIsMobile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsIsMobile) ProtoMessage() {}

func (x *PlayerSetsIsMobile) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsIsMobile.ProtoReflect.Descriptor instead.
func (*PlayerSetsIsMobile) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{108}
}

func (x *PlayerSetsIsMobile) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsIsMobile) GetIsMobile() bool {
	if x != nil {
		return x.IsMobile
	}
	return false
}

type PlayerSetsEmojiStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId       uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	EmojiStatus string `protobuf:"bytes,2,opt,name=emojiStatus,proto3" json:"emojiStatus,omitempty"`
}

func (x *PlayerSetsEmojiStatus) Reset() {
	*x = PlayerSetsEmojiStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsEmojiStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsEmojiStatus) ProtoMessage() {}

func (x *PlayerSetsEmojiStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsEmojiStatus.ProtoReflect.Descriptor instead.
func (*PlayerSetsEmojiStatus) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{109}
}

func (x *PlayerSetsEmojiStatus) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsEmojiStatus) GetEmojiStatus() string {
	if x != nil {
		return x.EmojiStatus
	}
	return ""
}

type PlayerSetsAffiliation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId       uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Affiliation string `protobuf:"bytes,2,opt,name=affiliation,proto3" json:"affiliation,omitempty"`
}

func (x *PlayerSetsAffiliation) Reset() {
	*x = PlayerSetsAffiliation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsAffiliation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsAffiliation) ProtoMessage() {}

func (x *PlayerSetsAffiliation) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsAffiliation.ProtoReflect.Descriptor instead.
func (*PlayerSetsAffiliation) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{110}
}

func (x *PlayerSetsAffiliation) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsAffiliation) GetAffiliation() string {
	if x != nil {
		return x.Affiliation
	}
	return ""
}

type PlayerExits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
}

func (x *PlayerExits) Reset() {
	*x = PlayerExits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerExits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerExits) ProtoMessage() {}

func (x *PlayerExits) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerExits.ProtoReflect.Descriptor instead.
func (*PlayerExits) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{111}
}

func (x *PlayerExits) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

type PlayerSetsCurrentlyEquippedWearables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId                      uint32    `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	CurrentlyEquippedWearables *DBOutfit `protobuf:"bytes,2,opt,name=currentlyEquippedWearables,proto3" json:"currentlyEquippedWearables,omitempty"`
}

func (x *PlayerSetsCurrentlyEquippedWearables) Reset() {
	*x = PlayerSetsCurrentlyEquippedWearables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsCurrentlyEquippedWearables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsCurrentlyEquippedWearables) ProtoMessage() {}

func (x *PlayerSetsCurrentlyEquippedWearables) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsCurrentlyEquippedWearables.ProtoReflect.Descriptor instead.
func (*PlayerSetsCurrentlyEquippedWearables) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{112}
}

func (x *PlayerSetsCurrentlyEquippedWearables) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsCurrentlyEquippedWearables) GetCurrentlyEquippedWearables() *DBOutfit {
	if x != nil {
		return x.CurrentlyEquippedWearables
	}
	return nil
}

type PlayerSetsIsSignedIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId      uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	IsSignedIn bool   `protobuf:"varint,2,opt,name=isSignedIn,proto3" json:"isSignedIn,omitempty"`
}

func (x *PlayerSetsIsSignedIn) Reset() {
	*x = PlayerSetsIsSignedIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsIsSignedIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsIsSignedIn) ProtoMessage() {}

func (x *PlayerSetsIsSignedIn) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsIsSignedIn.ProtoReflect.Descriptor instead.
func (*PlayerSetsIsSignedIn) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{113}
}

func (x *PlayerSetsIsSignedIn) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsIsSignedIn) GetIsSignedIn() bool {
	if x != nil {
		return x.IsSignedIn
	}
	return false
}

// It's pretty wack that we're using JSON to serialize / deserialize space data here.
// TODO: improve this by splitting this up into several events or using a better message interface
// for this or something that doesn't require the client to JSON.parse().
type SpaceOverwrites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceData string `protobuf:"bytes,1,opt,name=spaceData,proto3" json:"spaceData,omitempty"`
}

func (x *SpaceOverwrites) Reset() {
	*x = SpaceOverwrites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceOverwrites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceOverwrites) ProtoMessage() {}

func (x *SpaceOverwrites) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceOverwrites.ProtoReflect.Descriptor instead.
func (*SpaceOverwrites) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{114}
}

func (x *SpaceOverwrites) GetSpaceData() string {
	if x != nil {
		return x.SpaceData
	}
	return ""
}

type DynamicGate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exposure              float32  `protobuf:"fixed32,1,opt,name=exposure,proto3" json:"exposure,omitempty"`
	Spaces                []string `protobuf:"bytes,2,rep,name=spaces,proto3" json:"spaces,omitempty"` // to hardcode a list of spaces that should have it on
	RefreshOnChange       *bool    `protobuf:"varint,3,opt,name=refreshOnChange,proto3,oneof" json:"refreshOnChange,omitempty"`
	MinimumBuildTimestamp *uint64  `protobuf:"varint,4,opt,name=minimumBuildTimestamp,proto3,oneof" json:"minimumBuildTimestamp,omitempty"`
}

func (x *DynamicGate) Reset() {
	*x = DynamicGate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicGate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicGate) ProtoMessage() {}

func (x *DynamicGate) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicGate.ProtoReflect.Descriptor instead.
func (*DynamicGate) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{115}
}

func (x *DynamicGate) GetExposure() float32 {
	if x != nil {
		return x.Exposure
	}
	return 0
}

func (x *DynamicGate) GetSpaces() []string {
	if x != nil {
		return x.Spaces
	}
	return nil
}

func (x *DynamicGate) GetRefreshOnChange() bool {
	if x != nil && x.RefreshOnChange != nil {
		return *x.RefreshOnChange
	}
	return false
}

func (x *DynamicGate) GetMinimumBuildTimestamp() uint64 {
	if x != nil && x.MinimumBuildTimestamp != nil {
		return *x.MinimumBuildTimestamp
	}
	return 0
}

type DynamicGates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LivekitEnabled         *DynamicGate `protobuf:"bytes,1,opt,name=livekitEnabled,proto3" json:"livekitEnabled,omitempty"`
	LivekitSelfhostEnabled *DynamicGate `protobuf:"bytes,2,opt,name=livekitSelfhostEnabled,proto3,oneof" json:"livekitSelfhostEnabled,omitempty"`
	AgoraEnabled           *DynamicGate `protobuf:"bytes,3,opt,name=agoraEnabled,proto3,oneof" json:"agoraEnabled,omitempty"`
	ChimeEnabled           *DynamicGate `protobuf:"bytes,4,opt,name=chimeEnabled,proto3,oneof" json:"chimeEnabled,omitempty"`
	GatherEnabled          *DynamicGate `protobuf:"bytes,5,opt,name=gatherEnabled,proto3,oneof" json:"gatherEnabled,omitempty"` // BEFORE ADDING MORE OF THESE, DO A PROPER DESIGN AND RFC PLEASE!
}

func (x *DynamicGates) Reset() {
	*x = DynamicGates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicGates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicGates) ProtoMessage() {}

func (x *DynamicGates) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicGates.ProtoReflect.Descriptor instead.
func (*DynamicGates) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{116}
}

func (x *DynamicGates) GetLivekitEnabled() *DynamicGate {
	if x != nil {
		return x.LivekitEnabled
	}
	return nil
}

func (x *DynamicGates) GetLivekitSelfhostEnabled() *DynamicGate {
	if x != nil {
		return x.LivekitSelfhostEnabled
	}
	return nil
}

func (x *DynamicGates) GetAgoraEnabled() *DynamicGate {
	if x != nil {
		return x.AgoraEnabled
	}
	return nil
}

func (x *DynamicGates) GetChimeEnabled() *DynamicGate {
	if x != nil {
		return x.ChimeEnabled
	}
	return nil
}

func (x *DynamicGates) GetGatherEnabled() *DynamicGate {
	if x != nil {
		return x.GatherEnabled
	}
	return nil
}

type SpaceSetsSpaceMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members map[string]*SpaceMemberInfo `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SpaceSetsSpaceMembers) Reset() {
	*x = SpaceSetsSpaceMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceSetsSpaceMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceSetsSpaceMembers) ProtoMessage() {}

func (x *SpaceSetsSpaceMembers) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceSetsSpaceMembers.ProtoReflect.Descriptor instead.
func (*SpaceSetsSpaceMembers) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{117}
}

func (x *SpaceSetsSpaceMembers) GetMembers() map[string]*SpaceMemberInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

type WireSpaceUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// role should be CoreRole, but we can't do string enums in protobuf
	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *WireSpaceUser) Reset() {
	*x = WireSpaceUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireSpaceUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireSpaceUser) ProtoMessage() {}

func (x *WireSpaceUser) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireSpaceUser.ProtoReflect.Descriptor instead.
func (*WireSpaceUser) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{118}
}

func (x *WireSpaceUser) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type SpaceSetsSpaceUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceUsers map[string]*WireSpaceUser `protobuf:"bytes,1,rep,name=spaceUsers,proto3" json:"spaceUsers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SpaceSetsSpaceUsers) Reset() {
	*x = SpaceSetsSpaceUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceSetsSpaceUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceSetsSpaceUsers) ProtoMessage() {}

func (x *SpaceSetsSpaceUsers) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceSetsSpaceUsers.ProtoReflect.Descriptor instead.
func (*SpaceSetsSpaceUsers) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{119}
}

func (x *SpaceSetsSpaceUsers) GetSpaceUsers() map[string]*WireSpaceUser {
	if x != nil {
		return x.SpaceUsers
	}
	return nil
}

type SpaceIsClosed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpaceIsClosed) Reset() {
	*x = SpaceIsClosed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceIsClosed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceIsClosed) ProtoMessage() {}

func (x *SpaceIsClosed) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceIsClosed.ProtoReflect.Descriptor instead.
func (*SpaceIsClosed) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{120}
}

type PlayerEntersPortal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUrl    string `protobuf:"bytes,1,opt,name=targetUrl,proto3" json:"targetUrl,omitempty"`
	BypassPrompt *bool  `protobuf:"varint,2,opt,name=bypassPrompt,proto3,oneof" json:"bypassPrompt,omitempty"`
}

func (x *PlayerEntersPortal) Reset() {
	*x = PlayerEntersPortal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerEntersPortal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerEntersPortal) ProtoMessage() {}

func (x *PlayerEntersPortal) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerEntersPortal.ProtoReflect.Descriptor instead.
func (*PlayerEntersPortal) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{121}
}

func (x *PlayerEntersPortal) GetTargetUrl() string {
	if x != nil {
		return x.TargetUrl
	}
	return ""
}

func (x *PlayerEntersPortal) GetBypassPrompt() bool {
	if x != nil && x.BypassPrompt != nil {
		return *x.BypassPrompt
	}
	return false
}

type CookieFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
}

func (x *CookieFound) Reset() {
	*x = CookieFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookieFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookieFound) ProtoMessage() {}

func (x *CookieFound) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookieFound.ProtoReflect.Descriptor instead.
func (*CookieFound) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{122}
}

func (x *CookieFound) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

// Each client has a unique string id, but this is costly to send over the wire
// so an integer value is used in its place and then converted back to the
// corresponding string id on the client and server.
// This event provides the mapping between a player's string id [uid]
// and their corresponding integer id [encId].
// (see "Player..." events above for use of encId)
type SpaceSetsIdMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	EncId uint32 `protobuf:"varint,2,opt,name=encId,proto3" json:"encId,omitempty"`
}

func (x *SpaceSetsIdMapping) Reset() {
	*x = SpaceSetsIdMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceSetsIdMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceSetsIdMapping) ProtoMessage() {}

func (x *SpaceSetsIdMapping) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceSetsIdMapping.ProtoReflect.Descriptor instead.
func (*SpaceSetsIdMapping) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{123}
}

func (x *SpaceSetsIdMapping) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SpaceSetsIdMapping) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

type PlayerShootsConfetti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"` // the confetti shooter
}

func (x *PlayerShootsConfetti) Reset() {
	*x = PlayerShootsConfetti{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerShootsConfetti) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerShootsConfetti) ProtoMessage() {}

func (x *PlayerShootsConfetti) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerShootsConfetti.ProtoReflect.Descriptor instead.
func (*PlayerShootsConfetti) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{124}
}

func (x *PlayerShootsConfetti) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

type PlayerSetsEventStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId       uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	EventStatus string `protobuf:"bytes,2,opt,name=eventStatus,proto3" json:"eventStatus,omitempty"`
}

func (x *PlayerSetsEventStatus) Reset() {
	*x = PlayerSetsEventStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsEventStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsEventStatus) ProtoMessage() {}

func (x *PlayerSetsEventStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsEventStatus.ProtoReflect.Descriptor instead.
func (*PlayerSetsEventStatus) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{125}
}

func (x *PlayerSetsEventStatus) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsEventStatus) GetEventStatus() string {
	if x != nil {
		return x.EventStatus
	}
	return ""
}

type PlayerSetsInConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId          uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	InConversation bool   `protobuf:"varint,2,opt,name=inConversation,proto3" json:"inConversation,omitempty"`
}

func (x *PlayerSetsInConversation) Reset() {
	*x = PlayerSetsInConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsInConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsInConversation) ProtoMessage() {}

func (x *PlayerSetsInConversation) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsInConversation.ProtoReflect.Descriptor instead.
func (*PlayerSetsInConversation) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{126}
}

func (x *PlayerSetsInConversation) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsInConversation) GetInConversation() bool {
	if x != nil {
		return x.InConversation
	}
	return false
}

type PlayerSetsCurrentArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId       uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	CurrentArea string `protobuf:"bytes,2,opt,name=currentArea,proto3" json:"currentArea,omitempty"`
}

func (x *PlayerSetsCurrentArea) Reset() {
	*x = PlayerSetsCurrentArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsCurrentArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsCurrentArea) ProtoMessage() {}

func (x *PlayerSetsCurrentArea) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsCurrentArea.ProtoReflect.Descriptor instead.
func (*PlayerSetsCurrentArea) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{127}
}

func (x *PlayerSetsCurrentArea) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsCurrentArea) GetCurrentArea() string {
	if x != nil {
		return x.CurrentArea
	}
	return ""
}

type PlayerSetsGoKartId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId    uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	GoKartId string `protobuf:"bytes,2,opt,name=goKartId,proto3" json:"goKartId,omitempty"`
}

func (x *PlayerSetsGoKartId) Reset() {
	*x = PlayerSetsGoKartId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsGoKartId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsGoKartId) ProtoMessage() {}

func (x *PlayerSetsGoKartId) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsGoKartId.ProtoReflect.Descriptor instead.
func (*PlayerSetsGoKartId) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{128}
}

func (x *PlayerSetsGoKartId) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsGoKartId) GetGoKartId() string {
	if x != nil {
		return x.GoKartId
	}
	return ""
}

type PlayerSetsVehicleId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId             uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	VehicleId         string `protobuf:"bytes,2,opt,name=vehicleId,proto3" json:"vehicleId,omitempty"`
	Action            string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	PreviousVehicleId string `protobuf:"bytes,4,opt,name=previousVehicleId,proto3" json:"previousVehicleId,omitempty"`
}

func (x *PlayerSetsVehicleId) Reset() {
	*x = PlayerSetsVehicleId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsVehicleId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsVehicleId) ProtoMessage() {}

func (x *PlayerSetsVehicleId) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsVehicleId.ProtoReflect.Descriptor instead.
func (*PlayerSetsVehicleId) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{129}
}

func (x *PlayerSetsVehicleId) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsVehicleId) GetVehicleId() string {
	if x != nil {
		return x.VehicleId
	}
	return ""
}

func (x *PlayerSetsVehicleId) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PlayerSetsVehicleId) GetPreviousVehicleId() string {
	if x != nil {
		return x.PreviousVehicleId
	}
	return ""
}

type PlayerSetsSpeedModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId         uint32  `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	SpeedModifier float32 `protobuf:"fixed32,2,opt,name=speedModifier,proto3" json:"speedModifier,omitempty"`
}

func (x *PlayerSetsSpeedModifier) Reset() {
	*x = PlayerSetsSpeedModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsSpeedModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsSpeedModifier) ProtoMessage() {}

func (x *PlayerSetsSpeedModifier) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsSpeedModifier.ProtoReflect.Descriptor instead.
func (*PlayerSetsSpeedModifier) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{130}
}

func (x *PlayerSetsSpeedModifier) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsSpeedModifier) GetSpeedModifier() float32 {
	if x != nil {
		return x.SpeedModifier
	}
	return 0
}

type PlayerSetsIsAlone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId   uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	IsAlone bool   `protobuf:"varint,2,opt,name=isAlone,proto3" json:"isAlone,omitempty"`
}

func (x *PlayerSetsIsAlone) Reset() {
	*x = PlayerSetsIsAlone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsIsAlone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsIsAlone) ProtoMessage() {}

func (x *PlayerSetsIsAlone) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsIsAlone.ProtoReflect.Descriptor instead.
func (*PlayerSetsIsAlone) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{131}
}

func (x *PlayerSetsIsAlone) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsIsAlone) GetIsAlone() bool {
	if x != nil {
		return x.IsAlone
	}
	return false
}

type SpacePlaysSound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src    string  `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Volume float32 `protobuf:"fixed32,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *SpacePlaysSound) Reset() {
	*x = SpacePlaysSound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpacePlaysSound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpacePlaysSound) ProtoMessage() {}

func (x *SpacePlaysSound) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpacePlaysSound.ProtoReflect.Descriptor instead.
func (*SpacePlaysSound) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{132}
}

func (x *SpacePlaysSound) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *SpacePlaysSound) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type SpaceStopsSound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src string `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
}

func (x *SpaceStopsSound) Reset() {
	*x = SpaceStopsSound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceStopsSound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceStopsSound) ProtoMessage() {}

func (x *SpaceStopsSound) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceStopsSound.ProtoReflect.Descriptor instead.
func (*SpaceStopsSound) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{133}
}

func (x *SpaceStopsSound) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

type PlayerSetsFocusModeEndTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId            uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	FocusModeEndTime string `protobuf:"bytes,2,opt,name=focusModeEndTime,proto3" json:"focusModeEndTime,omitempty"`
}

func (x *PlayerSetsFocusModeEndTime) Reset() {
	*x = PlayerSetsFocusModeEndTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsFocusModeEndTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsFocusModeEndTime) ProtoMessage() {}

func (x *PlayerSetsFocusModeEndTime) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsFocusModeEndTime.ProtoReflect.Descriptor instead.
func (*PlayerSetsFocusModeEndTime) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{134}
}

func (x *PlayerSetsFocusModeEndTime) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsFocusModeEndTime) GetFocusModeEndTime() string {
	if x != nil {
		return x.FocusModeEndTime
	}
	return ""
}

type PlayerBlocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockedBy string `protobuf:"bytes,1,opt,name=blockedBy,proto3" json:"blockedBy,omitempty"`
	Blocked   bool   `protobuf:"varint,2,opt,name=blocked,proto3" json:"blocked,omitempty"`
}

func (x *PlayerBlocks) Reset() {
	*x = PlayerBlocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBlocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBlocks) ProtoMessage() {}

func (x *PlayerBlocks) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBlocks.ProtoReflect.Descriptor instead.
func (*PlayerBlocks) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{135}
}

func (x *PlayerBlocks) GetBlockedBy() string {
	if x != nil {
		return x.BlockedBy
	}
	return ""
}

func (x *PlayerBlocks) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

type CustomEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CustomEvent) Reset() {
	*x = CustomEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomEvent) ProtoMessage() {}

func (x *CustomEvent) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomEvent.ProtoReflect.Descriptor instead.
func (*CustomEvent) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{136}
}

func (x *CustomEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomEvent) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type PlayerUpdatesFocusModeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId         uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	IsInFocusMode bool   `protobuf:"varint,2,opt,name=isInFocusMode,proto3" json:"isInFocusMode,omitempty"`
}

func (x *PlayerUpdatesFocusModeStatus) Reset() {
	*x = PlayerUpdatesFocusModeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerUpdatesFocusModeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerUpdatesFocusModeStatus) ProtoMessage() {}

func (x *PlayerUpdatesFocusModeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerUpdatesFocusModeStatus.ProtoReflect.Descriptor instead.
func (*PlayerUpdatesFocusModeStatus) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{137}
}

func (x *PlayerUpdatesFocusModeStatus) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerUpdatesFocusModeStatus) GetIsInFocusMode() bool {
	if x != nil {
		return x.IsInFocusMode
	}
	return false
}

type PlayerSetsItemString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId      uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	ItemString string `protobuf:"bytes,2,opt,name=itemString,proto3" json:"itemString,omitempty"`
}

func (x *PlayerSetsItemString) Reset() {
	*x = PlayerSetsItemString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsItemString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsItemString) ProtoMessage() {}

func (x *PlayerSetsItemString) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsItemString.ProtoReflect.Descriptor instead.
func (*PlayerSetsItemString) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{138}
}

func (x *PlayerSetsItemString) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsItemString) GetItemString() string {
	if x != nil {
		return x.ItemString
	}
	return ""
}

type PlayerTriggersObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	// mapId and key are optional because the same action is used (with empty data) to drop the thing you're carrying
	MapId *string `protobuf:"bytes,2,opt,name=mapId,proto3,oneof" json:"mapId,omitempty"`
	Key   *string `protobuf:"bytes,3,opt,name=key,proto3,oneof" json:"key,omitempty"`
}

func (x *PlayerTriggersObject) Reset() {
	*x = PlayerTriggersObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerTriggersObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerTriggersObject) ProtoMessage() {}

func (x *PlayerTriggersObject) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerTriggersObject.ProtoReflect.Descriptor instead.
func (*PlayerTriggersObject) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{139}
}

func (x *PlayerTriggersObject) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerTriggersObject) GetMapId() string {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return ""
}

func (x *PlayerTriggersObject) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type PlayerNotifies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId        uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Notification string `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
}

func (x *PlayerNotifies) Reset() {
	*x = PlayerNotifies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerNotifies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerNotifies) ProtoMessage() {}

func (x *PlayerNotifies) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerNotifies.ProtoReflect.Descriptor instead.
func (*PlayerNotifies) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{140}
}

func (x *PlayerNotifies) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerNotifies) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

type PlayerSetsFollowTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId        uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	FollowTarget string `protobuf:"bytes,2,opt,name=followTarget,proto3" json:"followTarget,omitempty"`
}

func (x *PlayerSetsFollowTarget) Reset() {
	*x = PlayerSetsFollowTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsFollowTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsFollowTarget) ProtoMessage() {}

func (x *PlayerSetsFollowTarget) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsFollowTarget.ProtoReflect.Descriptor instead.
func (*PlayerSetsFollowTarget) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{141}
}

func (x *PlayerSetsFollowTarget) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsFollowTarget) GetFollowTarget() string {
	if x != nil {
		return x.FollowTarget
	}
	return ""
}

type PlayerRequestsToLead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId    uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Snapshot string `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *PlayerRequestsToLead) Reset() {
	*x = PlayerRequestsToLead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRequestsToLead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRequestsToLead) ProtoMessage() {}

func (x *PlayerRequestsToLead) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRequestsToLead.ProtoReflect.Descriptor instead.
func (*PlayerRequestsToLead) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{142}
}

func (x *PlayerRequestsToLead) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerRequestsToLead) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

type PlayerSetsManualVideoSrc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId          uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	ManualVideoSrc string `protobuf:"bytes,2,opt,name=manualVideoSrc,proto3" json:"manualVideoSrc,omitempty"`
}

func (x *PlayerSetsManualVideoSrc) Reset() {
	*x = PlayerSetsManualVideoSrc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsManualVideoSrc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsManualVideoSrc) ProtoMessage() {}

func (x *PlayerSetsManualVideoSrc) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsManualVideoSrc.ProtoReflect.Descriptor instead.
func (*PlayerSetsManualVideoSrc) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{143}
}

func (x *PlayerSetsManualVideoSrc) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsManualVideoSrc) GetManualVideoSrc() string {
	if x != nil {
		return x.ManualVideoSrc
	}
	return ""
}

type PlayerSetsIsNpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	IsNpc bool   `protobuf:"varint,2,opt,name=isNpc,proto3" json:"isNpc,omitempty"`
}

func (x *PlayerSetsIsNpc) Reset() {
	*x = PlayerSetsIsNpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsIsNpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsIsNpc) ProtoMessage() {}

func (x *PlayerSetsIsNpc) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsIsNpc.ProtoReflect.Descriptor instead.
func (*PlayerSetsIsNpc) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{144}
}

func (x *PlayerSetsIsNpc) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsIsNpc) GetIsNpc() bool {
	if x != nil {
		return x.IsNpc
	}
	return false
}

type PlayerSetsSubtitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId    uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Subtitle string `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
}

func (x *PlayerSetsSubtitle) Reset() {
	*x = PlayerSetsSubtitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsSubtitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsSubtitle) ProtoMessage() {}

func (x *PlayerSetsSubtitle) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsSubtitle.ProtoReflect.Descriptor instead.
func (*PlayerSetsSubtitle) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{145}
}

func (x *PlayerSetsSubtitle) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsSubtitle) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

type PlayerCrafts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId  uint32            `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Inputs map[string]uint32 `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlayerCrafts) Reset() {
	*x = PlayerCrafts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCrafts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCrafts) ProtoMessage() {}

func (x *PlayerCrafts) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCrafts.ProtoReflect.Descriptor instead.
func (*PlayerCrafts) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{146}
}

func (x *PlayerCrafts) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerCrafts) GetInputs() map[string]uint32 {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type MapMoveObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId         string   `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	ObjectId      string   `protobuf:"bytes,2,opt,name=objectId,proto3" json:"objectId,omitempty"`
	TargetX       float32  `protobuf:"fixed32,3,opt,name=targetX,proto3" json:"targetX,omitempty"`
	TargetY       float32  `protobuf:"fixed32,4,opt,name=targetY,proto3" json:"targetY,omitempty"`
	TargetXOffset *float32 `protobuf:"fixed32,5,opt,name=targetXOffset,proto3,oneof" json:"targetXOffset,omitempty"`
	TargetYOffset *float32 `protobuf:"fixed32,6,opt,name=targetYOffset,proto3,oneof" json:"targetYOffset,omitempty"`
	// Time it takes to move object (in milliseconds)
	Duration float32 `protobuf:"fixed32,7,opt,name=duration,proto3" json:"duration,omitempty"`
	// "Linear" (default) | "Cubic" | "Elastic" | "Bounce" | "Back"
	// ---
	// Linear = constant speed.
	// Cubic = slight easing.
	// Elastic = spring-like motion; object overshoots point and ping-pongs until settling on the target.
	// Bounce = similar to a bouncing object coming to rest
	// Back = object slightly overshoots point and quickly settles back onto target.
	Easing *string `protobuf:"bytes,8,opt,name=easing,proto3,oneof" json:"easing,omitempty"`
}

func (x *MapMoveObject) Reset() {
	*x = MapMoveObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMoveObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMoveObject) ProtoMessage() {}

func (x *MapMoveObject) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMoveObject.ProtoReflect.Descriptor instead.
func (*MapMoveObject) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{147}
}

func (x *MapMoveObject) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapMoveObject) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *MapMoveObject) GetTargetX() float32 {
	if x != nil {
		return x.TargetX
	}
	return 0
}

func (x *MapMoveObject) GetTargetY() float32 {
	if x != nil {
		return x.TargetY
	}
	return 0
}

func (x *MapMoveObject) GetTargetXOffset() float32 {
	if x != nil && x.TargetXOffset != nil {
		return *x.TargetXOffset
	}
	return 0
}

func (x *MapMoveObject) GetTargetYOffset() float32 {
	if x != nil && x.TargetYOffset != nil {
		return *x.TargetYOffset
	}
	return 0
}

func (x *MapMoveObject) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MapMoveObject) GetEasing() string {
	if x != nil && x.Easing != nil {
		return *x.Easing
	}
	return ""
}

type PlayerEditsChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Likes    *uint32    `protobuf:"varint,2,opt,name=likes,proto3,oneof" json:"likes,omitempty"`
	Replied  *bool      `protobuf:"varint,3,opt,name=replied,proto3,oneof" json:"replied,omitempty"`
	Reply    *ChatReply `protobuf:"bytes,4,opt,name=reply,proto3,oneof" json:"reply,omitempty"`
	Approved *bool      `protobuf:"varint,5,opt,name=approved,proto3,oneof" json:"approved,omitempty"`
}

func (x *PlayerEditsChatMessage) Reset() {
	*x = PlayerEditsChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerEditsChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerEditsChatMessage) ProtoMessage() {}

func (x *PlayerEditsChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerEditsChatMessage.ProtoReflect.Descriptor instead.
func (*PlayerEditsChatMessage) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{148}
}

func (x *PlayerEditsChatMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlayerEditsChatMessage) GetLikes() uint32 {
	if x != nil && x.Likes != nil {
		return *x.Likes
	}
	return 0
}

func (x *PlayerEditsChatMessage) GetReplied() bool {
	if x != nil && x.Replied != nil {
		return *x.Replied
	}
	return false
}

func (x *PlayerEditsChatMessage) GetReply() *ChatReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *PlayerEditsChatMessage) GetApproved() bool {
	if x != nil && x.Approved != nil {
		return *x.Approved
	}
	return false
}

type FXShakeObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId      string   `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	TargetId   string   `protobuf:"bytes,2,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Intensity  *float32 `protobuf:"fixed32,3,opt,name=intensity,proto3,oneof" json:"intensity,omitempty"`
	DurationMs *float32 `protobuf:"fixed32,4,opt,name=durationMs,proto3,oneof" json:"durationMs,omitempty"`
	Mode       *uint32  `protobuf:"varint,5,opt,name=mode,proto3,oneof" json:"mode,omitempty"`
}

func (x *FXShakeObject) Reset() {
	*x = FXShakeObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FXShakeObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FXShakeObject) ProtoMessage() {}

func (x *FXShakeObject) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FXShakeObject.ProtoReflect.Descriptor instead.
func (*FXShakeObject) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{149}
}

func (x *FXShakeObject) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *FXShakeObject) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *FXShakeObject) GetIntensity() float32 {
	if x != nil && x.Intensity != nil {
		return *x.Intensity
	}
	return 0
}

func (x *FXShakeObject) GetDurationMs() float32 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *FXShakeObject) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type FXShakeCamera struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intensity  *float32 `protobuf:"fixed32,1,opt,name=intensity,proto3,oneof" json:"intensity,omitempty"`
	DurationMs *float32 `protobuf:"fixed32,2,opt,name=durationMs,proto3,oneof" json:"durationMs,omitempty"`
	// Map on which this should be applied (empty = entire space shakes)
	MapId *string `protobuf:"bytes,3,opt,name=mapId,proto3,oneof" json:"mapId,omitempty"`
	// User ID this shake should apply to (empty = everyone in the given map or space will shake)
	// If mapID _and_ a target is provided, the map ID is disregarded and only the target user will shake.
	TargetUserId *string `protobuf:"bytes,4,opt,name=targetUserId,proto3,oneof" json:"targetUserId,omitempty"`
}

func (x *FXShakeCamera) Reset() {
	*x = FXShakeCamera{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FXShakeCamera) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FXShakeCamera) ProtoMessage() {}

func (x *FXShakeCamera) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FXShakeCamera.ProtoReflect.Descriptor instead.
func (*FXShakeCamera) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{150}
}

func (x *FXShakeCamera) GetIntensity() float32 {
	if x != nil && x.Intensity != nil {
		return *x.Intensity
	}
	return 0
}

func (x *FXShakeCamera) GetDurationMs() float32 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *FXShakeCamera) GetMapId() string {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return ""
}

func (x *FXShakeCamera) GetTargetUserId() string {
	if x != nil && x.TargetUserId != nil {
		return *x.TargetUserId
	}
	return ""
}

type PlayerHighFives struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId       uint32  `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	EncIdTarget uint32  `protobuf:"varint,2,opt,name=encIdTarget,proto3" json:"encIdTarget,omitempty"`
	Emote       *string `protobuf:"bytes,3,opt,name=emote,proto3,oneof" json:"emote,omitempty"`
}

func (x *PlayerHighFives) Reset() {
	*x = PlayerHighFives{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHighFives) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHighFives) ProtoMessage() {}

func (x *PlayerHighFives) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHighFives.ProtoReflect.Descriptor instead.
func (*PlayerHighFives) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{151}
}

func (x *PlayerHighFives) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerHighFives) GetEncIdTarget() uint32 {
	if x != nil {
		return x.EncIdTarget
	}
	return 0
}

func (x *PlayerHighFives) GetEmote() string {
	if x != nil && x.Emote != nil {
		return *x.Emote
	}
	return ""
}

type PlayerSendsCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId   uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *PlayerSendsCommand) Reset() {
	*x = PlayerSendsCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSendsCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSendsCommand) ProtoMessage() {}

func (x *PlayerSendsCommand) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSendsCommand.ProtoReflect.Descriptor instead.
func (*PlayerSendsCommand) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{152}
}

func (x *PlayerSendsCommand) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSendsCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type SpaceRegistersCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *SpaceRegistersCommand) Reset() {
	*x = SpaceRegistersCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceRegistersCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceRegistersCommand) ProtoMessage() {}

func (x *SpaceRegistersCommand) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceRegistersCommand.ProtoReflect.Descriptor instead.
func (*SpaceRegistersCommand) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{153}
}

func (x *SpaceRegistersCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type PlayerUpdatesInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32                    `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Items map[string]*InventoryItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // maps item ids to item data
	Order map[string]string         `protobuf:"bytes,3,rep,name=order,proto3" json:"order,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // maps item ids to order string (e.g. "1,2" or "left-hand")
}

func (x *PlayerUpdatesInventory) Reset() {
	*x = PlayerUpdatesInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerUpdatesInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerUpdatesInventory) ProtoMessage() {}

func (x *PlayerUpdatesInventory) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerUpdatesInventory.ProtoReflect.Descriptor instead.
func (*PlayerUpdatesInventory) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{154}
}

func (x *PlayerUpdatesInventory) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerUpdatesInventory) GetItems() map[string]*InventoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *PlayerUpdatesInventory) GetOrder() map[string]string {
	if x != nil {
		return x.Order
	}
	return nil
}

type SpaceUpdatesItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items map[string]*SpaceItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // maps item id to the full info about that Item
}

func (x *SpaceUpdatesItems) Reset() {
	*x = SpaceUpdatesItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceUpdatesItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceUpdatesItems) ProtoMessage() {}

func (x *SpaceUpdatesItems) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceUpdatesItems.ProtoReflect.Descriptor instead.
func (*SpaceUpdatesItems) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{155}
}

func (x *SpaceUpdatesItems) GetItems() map[string]*SpaceItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type PlayerTriggersInventoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId     uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	ItemId    string `protobuf:"bytes,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
	AbilityId string `protobuf:"bytes,3,opt,name=abilityId,proto3" json:"abilityId,omitempty"`
}

func (x *PlayerTriggersInventoryItem) Reset() {
	*x = PlayerTriggersInventoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerTriggersInventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerTriggersInventoryItem) ProtoMessage() {}

func (x *PlayerTriggersInventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerTriggersInventoryItem.ProtoReflect.Descriptor instead.
func (*PlayerTriggersInventoryItem) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{156}
}

func (x *PlayerTriggersInventoryItem) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerTriggersInventoryItem) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *PlayerTriggersInventoryItem) GetAbilityId() string {
	if x != nil {
		return x.AbilityId
	}
	return ""
}

type PlayerSetsAllowScreenPointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId              uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	AllowScreenPointer bool   `protobuf:"varint,2,opt,name=allowScreenPointer,proto3" json:"allowScreenPointer,omitempty"`
}

func (x *PlayerSetsAllowScreenPointer) Reset() {
	*x = PlayerSetsAllowScreenPointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsAllowScreenPointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsAllowScreenPointer) ProtoMessage() {}

func (x *PlayerSetsAllowScreenPointer) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsAllowScreenPointer.ProtoReflect.Descriptor instead.
func (*PlayerSetsAllowScreenPointer) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{157}
}

func (x *PlayerSetsAllowScreenPointer) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsAllowScreenPointer) GetAllowScreenPointer() bool {
	if x != nil {
		return x.AllowScreenPointer
	}
	return false
}

type PrecomputedEnterLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterLocation *MapLocation `protobuf:"bytes,1,opt,name=enterLocation,proto3" json:"enterLocation,omitempty"`
}

func (x *PrecomputedEnterLocation) Reset() {
	*x = PrecomputedEnterLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrecomputedEnterLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrecomputedEnterLocation) ProtoMessage() {}

func (x *PrecomputedEnterLocation) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrecomputedEnterLocation.ProtoReflect.Descriptor instead.
func (*PrecomputedEnterLocation) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{158}
}

func (x *PrecomputedEnterLocation) GetEnterLocation() *MapLocation {
	if x != nil {
		return x.EnterLocation
	}
	return nil
}

type PlayerSetsDeskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId    uint32      `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	DeskInfo *DeskInfoV2 `protobuf:"bytes,2,opt,name=deskInfo,proto3" json:"deskInfo,omitempty"`
}

func (x *PlayerSetsDeskInfo) Reset() {
	*x = PlayerSetsDeskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsDeskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsDeskInfo) ProtoMessage() {}

func (x *PlayerSetsDeskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsDeskInfo.ProtoReflect.Descriptor instead.
func (*PlayerSetsDeskInfo) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{159}
}

func (x *PlayerSetsDeskInfo) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsDeskInfo) GetDeskInfo() *DeskInfoV2 {
	if x != nil {
		return x.DeskInfo
	}
	return nil
}

type SpaceSetsCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capacity uint32 `protobuf:"varint,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *SpaceSetsCapacity) Reset() {
	*x = SpaceSetsCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceSetsCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceSetsCapacity) ProtoMessage() {}

func (x *SpaceSetsCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceSetsCapacity.ProtoReflect.Descriptor instead.
func (*SpaceSetsCapacity) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{160}
}

func (x *SpaceSetsCapacity) GetCapacity() uint32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

type SpaceOverCapacityDeniesUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *SpaceOverCapacityDeniesUser) Reset() {
	*x = SpaceOverCapacityDeniesUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceOverCapacityDeniesUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceOverCapacityDeniesUser) ProtoMessage() {}

func (x *SpaceOverCapacityDeniesUser) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceOverCapacityDeniesUser.ProtoReflect.Descriptor instead.
func (*SpaceOverCapacityDeniesUser) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{161}
}

func (x *SpaceOverCapacityDeniesUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type PlayerSetsAway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	Away  bool   `protobuf:"varint,2,opt,name=away,proto3" json:"away,omitempty"`
}

func (x *PlayerSetsAway) Reset() {
	*x = PlayerSetsAway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSetsAway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSetsAway) ProtoMessage() {}

func (x *PlayerSetsAway) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSetsAway.ProtoReflect.Descriptor instead.
func (*PlayerSetsAway) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{162}
}

func (x *PlayerSetsAway) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerSetsAway) GetAway() bool {
	if x != nil {
		return x.Away
	}
	return false
}

type PlayerStartsRecording struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncId        uint32 `protobuf:"varint,1,opt,name=encId,proto3" json:"encId,omitempty"`
	NookId       string `protobuf:"bytes,2,opt,name=nookId,proto3" json:"nookId,omitempty"`
	Initializing *bool  `protobuf:"varint,3,opt,name=initializing,proto3,oneof" json:"initializing,omitempty"`
}

func (x *PlayerStartsRecording) Reset() {
	*x = PlayerStartsRecording{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStartsRecording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStartsRecording) ProtoMessage() {}

func (x *PlayerStartsRecording) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStartsRecording.ProtoReflect.Descriptor instead.
func (*PlayerStartsRecording) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{163}
}

func (x *PlayerStartsRecording) GetEncId() uint32 {
	if x != nil {
		return x.EncId
	}
	return 0
}

func (x *PlayerStartsRecording) GetNookId() string {
	if x != nil {
		return x.NookId
	}
	return ""
}

func (x *PlayerStartsRecording) GetInitializing() bool {
	if x != nil && x.Initializing != nil {
		return *x.Initializing
	}
	return false
}

type AccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuestId                         string    `protobuf:"bytes,1,opt,name=guestId,proto3" json:"guestId,omitempty"`
	MemberId                        string    `protobuf:"bytes,2,opt,name=memberId,proto3" json:"memberId,omitempty"`
	RequestedAtUnixTime             uint64    `protobuf:"varint,3,opt,name=requestedAtUnixTime,proto3" json:"requestedAtUnixTime,omitempty"`
	GuestName                       string    `protobuf:"bytes,4,opt,name=guestName,proto3" json:"guestName,omitempty"`
	GuestCurrentlyEquippedWearables *DBOutfit `protobuf:"bytes,6,opt,name=guestCurrentlyEquippedWearables,proto3,oneof" json:"guestCurrentlyEquippedWearables,omitempty"`
}

func (x *AccessRequest) Reset() {
	*x = AccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRequest) ProtoMessage() {}

func (x *AccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRequest.ProtoReflect.Descriptor instead.
func (*AccessRequest) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{164}
}

func (x *AccessRequest) GetGuestId() string {
	if x != nil {
		return x.GuestId
	}
	return ""
}

func (x *AccessRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *AccessRequest) GetRequestedAtUnixTime() uint64 {
	if x != nil {
		return x.RequestedAtUnixTime
	}
	return 0
}

func (x *AccessRequest) GetGuestName() string {
	if x != nil {
		return x.GuestName
	}
	return ""
}

func (x *AccessRequest) GetGuestCurrentlyEquippedWearables() *DBOutfit {
	if x != nil {
		return x.GuestCurrentlyEquippedWearables
	}
	return nil
}

type AccessRequestsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*AccessRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *AccessRequestsUpdated) Reset() {
	*x = AccessRequestsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRequestsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRequestsUpdated) ProtoMessage() {}

func (x *AccessRequestsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRequestsUpdated.ProtoReflect.Descriptor instead.
func (*AccessRequestsUpdated) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{165}
}

func (x *AccessRequestsUpdated) GetRequests() []*AccessRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type AccessRequestRespondedTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId string       `protobuf:"bytes,1,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Accepted bool         `protobuf:"varint,2,opt,name=accepted,proto3" json:"accepted,omitempty"`
	Location *MapLocation `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *AccessRequestRespondedTo) Reset() {
	*x = AccessRequestRespondedTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRequestRespondedTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRequestRespondedTo) ProtoMessage() {}

func (x *AccessRequestRespondedTo) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRequestRespondedTo.ProtoReflect.Descriptor instead.
func (*AccessRequestRespondedTo) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{166}
}

func (x *AccessRequestRespondedTo) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *AccessRequestRespondedTo) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *AccessRequestRespondedTo) GetLocation() *MapLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

type PlayerGuestPassStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	GuestPassStatus string `protobuf:"bytes,2,opt,name=guestPassStatus,proto3" json:"guestPassStatus,omitempty"`
}

func (x *PlayerGuestPassStatus) Reset() {
	*x = PlayerGuestPassStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGuestPassStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGuestPassStatus) ProtoMessage() {}

func (x *PlayerGuestPassStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGuestPassStatus.ProtoReflect.Descriptor instead.
func (*PlayerGuestPassStatus) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{167}
}

func (x *PlayerGuestPassStatus) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlayerGuestPassStatus) GetGuestPassStatus() string {
	if x != nil {
		return x.GuestPassStatus
	}
	return ""
}

type SpaceSetsGuestPassStatuses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerGuestPassStatuses []*PlayerGuestPassStatus `protobuf:"bytes,1,rep,name=playerGuestPassStatuses,proto3" json:"playerGuestPassStatuses,omitempty"`
}

func (x *SpaceSetsGuestPassStatuses) Reset() {
	*x = SpaceSetsGuestPassStatuses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceSetsGuestPassStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceSetsGuestPassStatuses) ProtoMessage() {}

func (x *SpaceSetsGuestPassStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceSetsGuestPassStatuses.ProtoReflect.Descriptor instead.
func (*SpaceSetsGuestPassStatuses) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{168}
}

func (x *SpaceSetsGuestPassStatuses) GetPlayerGuestPassStatuses() []*PlayerGuestPassStatus {
	if x != nil {
		return x.PlayerGuestPassStatuses
	}
	return nil
}

type SetDeskFromNextAvailableDesk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId      *string       `protobuf:"bytes,1,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
	PreferredDesk *MapAndDesk   `protobuf:"bytes,2,opt,name=preferredDesk,proto3,oneof" json:"preferredDesk,omitempty"`
	DesksToIgnore []*MapAndDesk `protobuf:"bytes,3,rep,name=desksToIgnore,proto3" json:"desksToIgnore,omitempty"`
}

func (x *SetDeskFromNextAvailableDesk) Reset() {
	*x = SetDeskFromNextAvailableDesk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeskFromNextAvailableDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeskFromNextAvailableDesk) ProtoMessage() {}

func (x *SetDeskFromNextAvailableDesk) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeskFromNextAvailableDesk.ProtoReflect.Descriptor instead.
func (*SetDeskFromNextAvailableDesk) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{169}
}

func (x *SetDeskFromNextAvailableDesk) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

func (x *SetDeskFromNextAvailableDesk) GetPreferredDesk() *MapAndDesk {
	if x != nil {
		return x.PreferredDesk
	}
	return nil
}

func (x *SetDeskFromNextAvailableDesk) GetDesksToIgnore() []*MapAndDesk {
	if x != nil {
		return x.DesksToIgnore
	}
	return nil
}

type SpaceRolePermissionOverrideUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role       string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Permission string `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"`
	Enabled    bool   `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SpaceRolePermissionOverrideUpdated) Reset() {
	*x = SpaceRolePermissionOverrideUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceRolePermissionOverrideUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceRolePermissionOverrideUpdated) ProtoMessage() {}

func (x *SpaceRolePermissionOverrideUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceRolePermissionOverrideUpdated.ProtoReflect.Descriptor instead.
func (*SpaceRolePermissionOverrideUpdated) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{170}
}

func (x *SpaceRolePermissionOverrideUpdated) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *SpaceRolePermissionOverrideUpdated) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *SpaceRolePermissionOverrideUpdated) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ChimeSetsUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *ChimeSetsUserInfo) Reset() {
	*x = ChimeSetsUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChimeSetsUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChimeSetsUserInfo) ProtoMessage() {}

func (x *ChimeSetsUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChimeSetsUserInfo.ProtoReflect.Descriptor instead.
func (*ChimeSetsUserInfo) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{171}
}

func (x *ChimeSetsUserInfo) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

type ClientServerBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*ClientServerAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"` // don't add more stuff here
}

func (x *ClientServerBatch) Reset() {
	*x = ClientServerBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientServerBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientServerBatch) ProtoMessage() {}

func (x *ClientServerBatch) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientServerBatch.ProtoReflect.Descriptor instead.
func (*ClientServerBatch) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{172}
}

func (x *ClientServerBatch) GetActions() []*ClientServerAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ClientServerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// future: optional txnID field
	TxnId *uint32 `protobuf:"varint,100,opt,name=txnId,proto3,oneof" json:"txnId,omitempty"`
	// Types that are assignable to Action:
	//	*ClientServerAction_ClientHeartbeat
	//	*ClientServerAction_ClientBackupHeartbeat
	//	*ClientServerAction_UpdateSubscriptions
	//	*ClientServerAction_Move
	//	*ClientServerAction_SetAffiliation
	//	*ClientServerAction_SetStatus
	//	*ClientServerAction_Spotlight
	//	*ClientServerAction_Ring
	//	*ClientServerAction_Ban
	//	*ClientServerAction_Kick
	//	*ClientServerAction_SetImpassable
	//	*ClientServerAction_Chat
	//	*ClientServerAction_Interact
	//	*ClientServerAction_EnterWhisper
	//	*ClientServerAction_LeaveWhisper
	//	*ClientServerAction_SetEmojiStatus
	//	*ClientServerAction_ActivelySpeaking
	//	*ClientServerAction_SetName
	//	*ClientServerAction_SetTextStatus
	//	*ClientServerAction_Teleport
	//	*ClientServerAction_Exit
	//	*ClientServerAction_Enter
	//	*ClientServerAction_SetWorkCondition
	//	*ClientServerAction_Respawn
	//	*ClientServerAction_Spawn
	//	*ClientServerAction_Ghost
	//	*ClientServerAction_Init
	//	*ClientServerAction_SetOutfitString
	//	*ClientServerAction_ShootConfetti
	//	*ClientServerAction_SetEventStatus
	//	*ClientServerAction_SetInConversation
	//	*ClientServerAction_SetCurrentDesk
	//	*ClientServerAction_SetCurrentArea
	//	*ClientServerAction_SetImagePointer
	//	*ClientServerAction_SetGoKartId
	//	*ClientServerAction_MapSetDimensions
	//	*ClientServerAction_MapSetCollisions
	//	*ClientServerAction_MapSetBackgroundImagePath
	//	*ClientServerAction_MapSetForegroundImagePath
	//	*ClientServerAction_MapSetSprites
	//	*ClientServerAction_MapSetSpawns
	//	*ClientServerAction_MapSetSpaces
	//	*ClientServerAction_MapSetPortals
	//	*ClientServerAction_MapSetAnnouncer
	//	*ClientServerAction_MapSetAssets
	//	*ClientServerAction_MapSetObjects
	//	*ClientServerAction_MapSetName
	//	*ClientServerAction_MapSetMuteOnEntry
	//	*ClientServerAction_MapSetUseDrawnBG
	//	*ClientServerAction_MapSetWalls
	//	*ClientServerAction_MapSetFloors
	//	*ClientServerAction_MapSetAreas
	//	*ClientServerAction_MapAddObject
	//	*ClientServerAction_MapDeleteObject
	//	*ClientServerAction_MapSetSpawn
	//	*ClientServerAction_SetIsAlone
	//	*ClientServerAction_MapSetMiniMapImagePath
	//	*ClientServerAction_MapSetEnabledChats
	//	*ClientServerAction_MapSetDescription
	//	*ClientServerAction_MapSetDecoration
	//	*ClientServerAction_MapSetTutorialTasks
	//	*ClientServerAction_PlaySound
	//	*ClientServerAction_MapSetScript
	//	*ClientServerAction_SetIsMobile
	//	*ClientServerAction_SetScreenPointer
	//	*ClientServerAction_SetEmoteV2
	//	*ClientServerAction_SetFocusModeEndTime
	//	*ClientServerAction_MapDeleteObjectById
	//	*ClientServerAction_CustomAction
	//	*ClientServerAction_Block
	//	*ClientServerAction_SetItemString
	//	*ClientServerAction_TriggerItem
	//	*ClientServerAction_Notify
	//	*ClientServerAction_SetFollowTarget
	//	*ClientServerAction_RequestToLead
	//	*ClientServerAction_EnterPortal
	//	*ClientServerAction_SetManualVideoSrc
	//	*ClientServerAction_SetSubtitle
	//	*ClientServerAction_PlayerUpdatesSession
	//	*ClientServerAction_MapMoveObject
	//	*ClientServerAction_ChatMessageUpdated
	//	*ClientServerAction_FxShakeObject
	//	*ClientServerAction_FxShakeCamera
	//	*ClientServerAction_RegisterCommand
	//	*ClientServerAction_SendCommand
	//	*ClientServerAction_SpeakerUpdatesSession
	//	*ClientServerAction_AddInventoryItem
	//	*ClientServerAction_RemoveInventoryItem
	//	*ClientServerAction_SetVehicleId
	//	*ClientServerAction_SetSpeedModifier
	//	*ClientServerAction_HighFive
	//	*ClientServerAction_UpdateSpaceItems
	//	*ClientServerAction_StopSound
	//	*ClientServerAction_HipToBeSquare
	//	*ClientServerAction_Craft
	//	*ClientServerAction_TriggerInventoryItem
	//	*ClientServerAction_SetAllowScreenPointer
	//	*ClientServerAction_PrecomputeEnter
	//	*ClientServerAction_RequestMute
	//	*ClientServerAction_SetDeskInfo
	//	*ClientServerAction_MapSetNooks
	//	*ClientServerAction_RequestToJoinNook
	//	*ClientServerAction_UpdateNookPermission
	//	*ClientServerAction_Wave
	//	*ClientServerAction_SetPronouns
	//	*ClientServerAction_SetTitle
	//	*ClientServerAction_SetTimezone
	//	*ClientServerAction_SetPhone
	//	*ClientServerAction_SetDescription
	//	*ClientServerAction_SetProfileImageUrl
	//	*ClientServerAction_SetPersonalImageUrl
	//	*ClientServerAction_SetAway
	//	*ClientServerAction_SetCity
	//	*ClientServerAction_SetCountry
	//	*ClientServerAction_SetStartDate
	//	*ClientServerAction_StartRecording
	//	*ClientServerAction_RequestAccessViaCheckIn
	//	*ClientServerAction_RespondToAccessRequest
	//	*ClientServerAction_SetAvailability
	//	*ClientServerAction_RespawnAtDesk
	//	*ClientServerAction_SetDeskFromNextAvailableDesk
	//	*ClientServerAction_SetSpaceRolePermissionOverride
	//	*ClientServerAction_SetCurrentlyEquippedWearables
	//	*ClientServerAction_SetDisplayEmail
	//	*ClientServerAction_MapDeleteObjectByKey
	//	*ClientServerAction_MapUpdateObjects
	//	*ClientServerAction_InteractWithObject
	//	*ClientServerAction_TriggerObject
	//	*ClientServerAction_JoinChimeMeeting
	Action isClientServerAction_Action `protobuf_oneof:"action"`
}

func (x *ClientServerAction) Reset() {
	*x = ClientServerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientServerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientServerAction) ProtoMessage() {}

func (x *ClientServerAction) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientServerAction.ProtoReflect.Descriptor instead.
func (*ClientServerAction) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{173}
}

func (x *ClientServerAction) GetTxnId() uint32 {
	if x != nil && x.TxnId != nil {
		return *x.TxnId
	}
	return 0
}

func (m *ClientServerAction) GetAction() isClientServerAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ClientServerAction) GetClientHeartbeat() *ClientHeartbeat {
	if x, ok := x.GetAction().(*ClientServerAction_ClientHeartbeat); ok {
		return x.ClientHeartbeat
	}
	return nil
}

func (x *ClientServerAction) GetClientBackupHeartbeat() *ClientBackupHeartbeat {
	if x, ok := x.GetAction().(*ClientServerAction_ClientBackupHeartbeat); ok {
		return x.ClientBackupHeartbeat
	}
	return nil
}

func (x *ClientServerAction) GetUpdateSubscriptions() *UpdateSubscriptions {
	if x, ok := x.GetAction().(*ClientServerAction_UpdateSubscriptions); ok {
		return x.UpdateSubscriptions
	}
	return nil
}

func (x *ClientServerAction) GetMove() *Move {
	if x, ok := x.GetAction().(*ClientServerAction_Move); ok {
		return x.Move
	}
	return nil
}

func (x *ClientServerAction) GetSetAffiliation() *SetAffiliation {
	if x, ok := x.GetAction().(*ClientServerAction_SetAffiliation); ok {
		return x.SetAffiliation
	}
	return nil
}

func (x *ClientServerAction) GetSetStatus() *SetStatus {
	if x, ok := x.GetAction().(*ClientServerAction_SetStatus); ok {
		return x.SetStatus
	}
	return nil
}

func (x *ClientServerAction) GetSpotlight() *Spotlight {
	if x, ok := x.GetAction().(*ClientServerAction_Spotlight); ok {
		return x.Spotlight
	}
	return nil
}

func (x *ClientServerAction) GetRing() *Ring {
	if x, ok := x.GetAction().(*ClientServerAction_Ring); ok {
		return x.Ring
	}
	return nil
}

func (x *ClientServerAction) GetBan() *Ban {
	if x, ok := x.GetAction().(*ClientServerAction_Ban); ok {
		return x.Ban
	}
	return nil
}

func (x *ClientServerAction) GetKick() *Kick {
	if x, ok := x.GetAction().(*ClientServerAction_Kick); ok {
		return x.Kick
	}
	return nil
}

func (x *ClientServerAction) GetSetImpassable() *SetImpassable {
	if x, ok := x.GetAction().(*ClientServerAction_SetImpassable); ok {
		return x.SetImpassable
	}
	return nil
}

func (x *ClientServerAction) GetChat() *Chat {
	if x, ok := x.GetAction().(*ClientServerAction_Chat); ok {
		return x.Chat
	}
	return nil
}

func (x *ClientServerAction) GetInteract() *Deprecated {
	if x, ok := x.GetAction().(*ClientServerAction_Interact); ok {
		return x.Interact
	}
	return nil
}

func (x *ClientServerAction) GetEnterWhisper() *EnterWhisper {
	if x, ok := x.GetAction().(*ClientServerAction_EnterWhisper); ok {
		return x.EnterWhisper
	}
	return nil
}

func (x *ClientServerAction) GetLeaveWhisper() *LeaveWhisper {
	if x, ok := x.GetAction().(*ClientServerAction_LeaveWhisper); ok {
		return x.LeaveWhisper
	}
	return nil
}

func (x *ClientServerAction) GetSetEmojiStatus() *SetEmojiStatus {
	if x, ok := x.GetAction().(*ClientServerAction_SetEmojiStatus); ok {
		return x.SetEmojiStatus
	}
	return nil
}

func (x *ClientServerAction) GetActivelySpeaking() *ActivelySpeaking {
	if x, ok := x.GetAction().(*ClientServerAction_ActivelySpeaking); ok {
		return x.ActivelySpeaking
	}
	return nil
}

func (x *ClientServerAction) GetSetName() *SetName {
	if x, ok := x.GetAction().(*ClientServerAction_SetName); ok {
		return x.SetName
	}
	return nil
}

func (x *ClientServerAction) GetSetTextStatus() *SetTextStatus {
	if x, ok := x.GetAction().(*ClientServerAction_SetTextStatus); ok {
		return x.SetTextStatus
	}
	return nil
}

func (x *ClientServerAction) GetTeleport() *Teleport {
	if x, ok := x.GetAction().(*ClientServerAction_Teleport); ok {
		return x.Teleport
	}
	return nil
}

func (x *ClientServerAction) GetExit() *Exit {
	if x, ok := x.GetAction().(*ClientServerAction_Exit); ok {
		return x.Exit
	}
	return nil
}

func (x *ClientServerAction) GetEnter() *Enter {
	if x, ok := x.GetAction().(*ClientServerAction_Enter); ok {
		return x.Enter
	}
	return nil
}

func (x *ClientServerAction) GetSetWorkCondition() *Deprecated {
	if x, ok := x.GetAction().(*ClientServerAction_SetWorkCondition); ok {
		return x.SetWorkCondition
	}
	return nil
}

func (x *ClientServerAction) GetRespawn() *Respawn {
	if x, ok := x.GetAction().(*ClientServerAction_Respawn); ok {
		return x.Respawn
	}
	return nil
}

func (x *ClientServerAction) GetSpawn() *Spawn {
	if x, ok := x.GetAction().(*ClientServerAction_Spawn); ok {
		return x.Spawn
	}
	return nil
}

func (x *ClientServerAction) GetGhost() *Ghost {
	if x, ok := x.GetAction().(*ClientServerAction_Ghost); ok {
		return x.Ghost
	}
	return nil
}

func (x *ClientServerAction) GetInit() *Init {
	if x, ok := x.GetAction().(*ClientServerAction_Init); ok {
		return x.Init
	}
	return nil
}

func (x *ClientServerAction) GetSetOutfitString() *Deprecated {
	if x, ok := x.GetAction().(*ClientServerAction_SetOutfitString); ok {
		return x.SetOutfitString
	}
	return nil
}

func (x *ClientServerAction) GetShootConfetti() *ShootConfetti {
	if x, ok := x.GetAction().(*ClientServerAction_ShootConfetti); ok {
		return x.ShootConfetti
	}
	return nil
}

func (x *ClientServerAction) GetSetEventStatus() *SetEventStatus {
	if x, ok := x.GetAction().(*ClientServerAction_SetEventStatus); ok {
		return x.SetEventStatus
	}
	return nil
}

func (x *ClientServerAction) GetSetInConversation() *SetInConversation {
	if x, ok := x.GetAction().(*ClientServerAction_SetInConversation); ok {
		return x.SetInConversation
	}
	return nil
}

func (x *ClientServerAction) GetSetCurrentDesk() *Deprecated {
	if x, ok := x.GetAction().(*ClientServerAction_SetCurrentDesk); ok {
		return x.SetCurrentDesk
	}
	return nil
}

func (x *ClientServerAction) GetSetCurrentArea() *SetCurrentArea {
	if x, ok := x.GetAction().(*ClientServerAction_SetCurrentArea); ok {
		return x.SetCurrentArea
	}
	return nil
}

func (x *ClientServerAction) GetSetImagePointer() *SetImagePointer {
	if x, ok := x.GetAction().(*ClientServerAction_SetImagePointer); ok {
		return x.SetImagePointer
	}
	return nil
}

func (x *ClientServerAction) GetSetGoKartId() *Deprecated {
	if x, ok := x.GetAction().(*ClientServerAction_SetGoKartId); ok {
		return x.SetGoKartId
	}
	return nil
}

func (x *ClientServerAction) GetMapSetDimensions() *MapSetDimensions {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetDimensions); ok {
		return x.MapSetDimensions
	}
	return nil
}

func (x *ClientServerAction) GetMapSetCollisions() *MapSetCollisions {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetCollisions); ok {
		return x.MapSetCollisions
	}
	return nil
}

func (x *ClientServerAction) GetMapSetBackgroundImagePath() *MapSetBackgroundImagePath {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetBackgroundImagePath); ok {
		return x.MapSetBackgroundImagePath
	}
	return nil
}

func (x *ClientServerAction) GetMapSetForegroundImagePath() *MapSetForegroundImagePath {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetForegroundImagePath); ok {
		return x.MapSetForegroundImagePath
	}
	return nil
}

func (x *ClientServerAction) GetMapSetSprites() *Deprecated {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetSprites); ok {
		return x.MapSetSprites
	}
	return nil
}

func (x *ClientServerAction) GetMapSetSpawns() *MapSetSpawns {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetSpawns); ok {
		return x.MapSetSpawns
	}
	return nil
}

func (x *ClientServerAction) GetMapSetSpaces() *Deprecated {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetSpaces); ok {
		return x.MapSetSpaces
	}
	return nil
}

func (x *ClientServerAction) GetMapSetPortals() *MapSetPortals {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetPortals); ok {
		return x.MapSetPortals
	}
	return nil
}

func (x *ClientServerAction) GetMapSetAnnouncer() *MapSetAnnouncer {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetAnnouncer); ok {
		return x.MapSetAnnouncer
	}
	return nil
}

func (x *ClientServerAction) GetMapSetAssets() *MapSetAssets {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetAssets); ok {
		return x.MapSetAssets
	}
	return nil
}

func (x *ClientServerAction) GetMapSetObjects() *Deprecated {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetObjects); ok {
		return x.MapSetObjects
	}
	return nil
}

func (x *ClientServerAction) GetMapSetName() *MapSetName {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetName); ok {
		return x.MapSetName
	}
	return nil
}

func (x *ClientServerAction) GetMapSetMuteOnEntry() *MapSetMuteOnEntry {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetMuteOnEntry); ok {
		return x.MapSetMuteOnEntry
	}
	return nil
}

func (x *ClientServerAction) GetMapSetUseDrawnBG() *MapSetUseDrawnBG {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetUseDrawnBG); ok {
		return x.MapSetUseDrawnBG
	}
	return nil
}

func (x *ClientServerAction) GetMapSetWalls() *MapSetWalls {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetWalls); ok {
		return x.MapSetWalls
	}
	return nil
}

func (x *ClientServerAction) GetMapSetFloors() *MapSetFloors {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetFloors); ok {
		return x.MapSetFloors
	}
	return nil
}

func (x *ClientServerAction) GetMapSetAreas() *MapSetAreas {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetAreas); ok {
		return x.MapSetAreas
	}
	return nil
}

func (x *ClientServerAction) GetMapAddObject() *MapAddObject {
	if x, ok := x.GetAction().(*ClientServerAction_MapAddObject); ok {
		return x.MapAddObject
	}
	return nil
}

func (x *ClientServerAction) GetMapDeleteObject() *Deprecated {
	if x, ok := x.GetAction().(*ClientServerAction_MapDeleteObject); ok {
		return x.MapDeleteObject
	}
	return nil
}

func (x *ClientServerAction) GetMapSetSpawn() *MapSetSpawn {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetSpawn); ok {
		return x.MapSetSpawn
	}
	return nil
}

func (x *ClientServerAction) GetSetIsAlone() *SetIsAlone {
	if x, ok := x.GetAction().(*ClientServerAction_SetIsAlone); ok {
		return x.SetIsAlone
	}
	return nil
}

func (x *ClientServerAction) GetMapSetMiniMapImagePath() *MapSetMiniMapImagePath {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetMiniMapImagePath); ok {
		return x.MapSetMiniMapImagePath
	}
	return nil
}

func (x *ClientServerAction) GetMapSetEnabledChats() *MapSetEnabledChats {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetEnabledChats); ok {
		return x.MapSetEnabledChats
	}
	return nil
}

func (x *ClientServerAction) GetMapSetDescription() *MapSetDescription {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetDescription); ok {
		return x.MapSetDescription
	}
	return nil
}

func (x *ClientServerAction) GetMapSetDecoration() *MapSetDecoration {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetDecoration); ok {
		return x.MapSetDecoration
	}
	return nil
}

func (x *ClientServerAction) GetMapSetTutorialTasks() *MapSetTutorialTasks {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetTutorialTasks); ok {
		return x.MapSetTutorialTasks
	}
	return nil
}

func (x *ClientServerAction) GetPlaySound() *PlaySound {
	if x, ok := x.GetAction().(*ClientServerAction_PlaySound); ok {
		return x.PlaySound
	}
	return nil
}

func (x *ClientServerAction) GetMapSetScript() *MapSetScript {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetScript); ok {
		return x.MapSetScript
	}
	return nil
}

func (x *ClientServerAction) GetSetIsMobile() *SetIsMobile {
	if x, ok := x.GetAction().(*ClientServerAction_SetIsMobile); ok {
		return x.SetIsMobile
	}
	return nil
}

func (x *ClientServerAction) GetSetScreenPointer() *SetScreenPointer {
	if x, ok := x.GetAction().(*ClientServerAction_SetScreenPointer); ok {
		return x.SetScreenPointer
	}
	return nil
}

func (x *ClientServerAction) GetSetEmoteV2() *SetEmoteV2 {
	if x, ok := x.GetAction().(*ClientServerAction_SetEmoteV2); ok {
		return x.SetEmoteV2
	}
	return nil
}

func (x *ClientServerAction) GetSetFocusModeEndTime() *SetFocusModeEndTime {
	if x, ok := x.GetAction().(*ClientServerAction_SetFocusModeEndTime); ok {
		return x.SetFocusModeEndTime
	}
	return nil
}

func (x *ClientServerAction) GetMapDeleteObjectById() *MapDeleteObjectById {
	if x, ok := x.GetAction().(*ClientServerAction_MapDeleteObjectById); ok {
		return x.MapDeleteObjectById
	}
	return nil
}

func (x *ClientServerAction) GetCustomAction() *CustomAction {
	if x, ok := x.GetAction().(*ClientServerAction_CustomAction); ok {
		return x.CustomAction
	}
	return nil
}

func (x *ClientServerAction) GetBlock() *Block {
	if x, ok := x.GetAction().(*ClientServerAction_Block); ok {
		return x.Block
	}
	return nil
}

func (x *ClientServerAction) GetSetItemString() *SetItemString {
	if x, ok := x.GetAction().(*ClientServerAction_SetItemString); ok {
		return x.SetItemString
	}
	return nil
}

func (x *ClientServerAction) GetTriggerItem() *Deprecated {
	if x, ok := x.GetAction().(*ClientServerAction_TriggerItem); ok {
		return x.TriggerItem
	}
	return nil
}

func (x *ClientServerAction) GetNotify() *Notify {
	if x, ok := x.GetAction().(*ClientServerAction_Notify); ok {
		return x.Notify
	}
	return nil
}

func (x *ClientServerAction) GetSetFollowTarget() *SetFollowTarget {
	if x, ok := x.GetAction().(*ClientServerAction_SetFollowTarget); ok {
		return x.SetFollowTarget
	}
	return nil
}

func (x *ClientServerAction) GetRequestToLead() *RequestToLead {
	if x, ok := x.GetAction().(*ClientServerAction_RequestToLead); ok {
		return x.RequestToLead
	}
	return nil
}

func (x *ClientServerAction) GetEnterPortal() *EnterPortal {
	if x, ok := x.GetAction().(*ClientServerAction_EnterPortal); ok {
		return x.EnterPortal
	}
	return nil
}

func (x *ClientServerAction) GetSetManualVideoSrc() *SetManualVideoSrc {
	if x, ok := x.GetAction().(*ClientServerAction_SetManualVideoSrc); ok {
		return x.SetManualVideoSrc
	}
	return nil
}

func (x *ClientServerAction) GetSetSubtitle() *SetSubtitle {
	if x, ok := x.GetAction().(*ClientServerAction_SetSubtitle); ok {
		return x.SetSubtitle
	}
	return nil
}

func (x *ClientServerAction) GetPlayerUpdatesSession() *Deprecated {
	if x, ok := x.GetAction().(*ClientServerAction_PlayerUpdatesSession); ok {
		return x.PlayerUpdatesSession
	}
	return nil
}

func (x *ClientServerAction) GetMapMoveObject() *MapMoveObject {
	if x, ok := x.GetAction().(*ClientServerAction_MapMoveObject); ok {
		return x.MapMoveObject
	}
	return nil
}

func (x *ClientServerAction) GetChatMessageUpdated() *ChatMessageUpdated {
	if x, ok := x.GetAction().(*ClientServerAction_ChatMessageUpdated); ok {
		return x.ChatMessageUpdated
	}
	return nil
}

func (x *ClientServerAction) GetFxShakeObject() *FXShakeObject {
	if x, ok := x.GetAction().(*ClientServerAction_FxShakeObject); ok {
		return x.FxShakeObject
	}
	return nil
}

func (x *ClientServerAction) GetFxShakeCamera() *FXShakeCamera {
	if x, ok := x.GetAction().(*ClientServerAction_FxShakeCamera); ok {
		return x.FxShakeCamera
	}
	return nil
}

func (x *ClientServerAction) GetRegisterCommand() *RegisterCommand {
	if x, ok := x.GetAction().(*ClientServerAction_RegisterCommand); ok {
		return x.RegisterCommand
	}
	return nil
}

func (x *ClientServerAction) GetSendCommand() *SendCommand {
	if x, ok := x.GetAction().(*ClientServerAction_SendCommand); ok {
		return x.SendCommand
	}
	return nil
}

func (x *ClientServerAction) GetSpeakerUpdatesSession() *SpeakerUpdatesSession {
	if x, ok := x.GetAction().(*ClientServerAction_SpeakerUpdatesSession); ok {
		return x.SpeakerUpdatesSession
	}
	return nil
}

func (x *ClientServerAction) GetAddInventoryItem() *AddInventoryItem {
	if x, ok := x.GetAction().(*ClientServerAction_AddInventoryItem); ok {
		return x.AddInventoryItem
	}
	return nil
}

func (x *ClientServerAction) GetRemoveInventoryItem() *RemoveInventoryItem {
	if x, ok := x.GetAction().(*ClientServerAction_RemoveInventoryItem); ok {
		return x.RemoveInventoryItem
	}
	return nil
}

func (x *ClientServerAction) GetSetVehicleId() *SetVehicleId {
	if x, ok := x.GetAction().(*ClientServerAction_SetVehicleId); ok {
		return x.SetVehicleId
	}
	return nil
}

func (x *ClientServerAction) GetSetSpeedModifier() *SetSpeedModifier {
	if x, ok := x.GetAction().(*ClientServerAction_SetSpeedModifier); ok {
		return x.SetSpeedModifier
	}
	return nil
}

func (x *ClientServerAction) GetHighFive() *HighFive {
	if x, ok := x.GetAction().(*ClientServerAction_HighFive); ok {
		return x.HighFive
	}
	return nil
}

func (x *ClientServerAction) GetUpdateSpaceItems() *SpaceUpdatesItems {
	if x, ok := x.GetAction().(*ClientServerAction_UpdateSpaceItems); ok {
		return x.UpdateSpaceItems
	}
	return nil
}

func (x *ClientServerAction) GetStopSound() *StopSound {
	if x, ok := x.GetAction().(*ClientServerAction_StopSound); ok {
		return x.StopSound
	}
	return nil
}

func (x *ClientServerAction) GetHipToBeSquare() *HipToBeSquare {
	if x, ok := x.GetAction().(*ClientServerAction_HipToBeSquare); ok {
		return x.HipToBeSquare
	}
	return nil
}

func (x *ClientServerAction) GetCraft() *Craft {
	if x, ok := x.GetAction().(*ClientServerAction_Craft); ok {
		return x.Craft
	}
	return nil
}

func (x *ClientServerAction) GetTriggerInventoryItem() *TriggerInventoryItem {
	if x, ok := x.GetAction().(*ClientServerAction_TriggerInventoryItem); ok {
		return x.TriggerInventoryItem
	}
	return nil
}

func (x *ClientServerAction) GetSetAllowScreenPointer() *SetAllowScreenPointer {
	if x, ok := x.GetAction().(*ClientServerAction_SetAllowScreenPointer); ok {
		return x.SetAllowScreenPointer
	}
	return nil
}

func (x *ClientServerAction) GetPrecomputeEnter() *PrecomputeEnter {
	if x, ok := x.GetAction().(*ClientServerAction_PrecomputeEnter); ok {
		return x.PrecomputeEnter
	}
	return nil
}

func (x *ClientServerAction) GetRequestMute() *RequestMute {
	if x, ok := x.GetAction().(*ClientServerAction_RequestMute); ok {
		return x.RequestMute
	}
	return nil
}

func (x *ClientServerAction) GetSetDeskInfo() *SetDeskInfo {
	if x, ok := x.GetAction().(*ClientServerAction_SetDeskInfo); ok {
		return x.SetDeskInfo
	}
	return nil
}

func (x *ClientServerAction) GetMapSetNooks() *MapSetNooks {
	if x, ok := x.GetAction().(*ClientServerAction_MapSetNooks); ok {
		return x.MapSetNooks
	}
	return nil
}

func (x *ClientServerAction) GetRequestToJoinNook() *RequestToJoinNook {
	if x, ok := x.GetAction().(*ClientServerAction_RequestToJoinNook); ok {
		return x.RequestToJoinNook
	}
	return nil
}

func (x *ClientServerAction) GetUpdateNookPermission() *UpdateNookPermission {
	if x, ok := x.GetAction().(*ClientServerAction_UpdateNookPermission); ok {
		return x.UpdateNookPermission
	}
	return nil
}

func (x *ClientServerAction) GetWave() *Wave {
	if x, ok := x.GetAction().(*ClientServerAction_Wave); ok {
		return x.Wave
	}
	return nil
}

func (x *ClientServerAction) GetSetPronouns() *SetPronouns {
	if x, ok := x.GetAction().(*ClientServerAction_SetPronouns); ok {
		return x.SetPronouns
	}
	return nil
}

func (x *ClientServerAction) GetSetTitle() *SetTitle {
	if x, ok := x.GetAction().(*ClientServerAction_SetTitle); ok {
		return x.SetTitle
	}
	return nil
}

func (x *ClientServerAction) GetSetTimezone() *SetTimezone {
	if x, ok := x.GetAction().(*ClientServerAction_SetTimezone); ok {
		return x.SetTimezone
	}
	return nil
}

func (x *ClientServerAction) GetSetPhone() *SetPhone {
	if x, ok := x.GetAction().(*ClientServerAction_SetPhone); ok {
		return x.SetPhone
	}
	return nil
}

func (x *ClientServerAction) GetSetDescription() *SetDescription {
	if x, ok := x.GetAction().(*ClientServerAction_SetDescription); ok {
		return x.SetDescription
	}
	return nil
}

func (x *ClientServerAction) GetSetProfileImageUrl() *SetProfileImageUrl {
	if x, ok := x.GetAction().(*ClientServerAction_SetProfileImageUrl); ok {
		return x.SetProfileImageUrl
	}
	return nil
}

func (x *ClientServerAction) GetSetPersonalImageUrl() *SetPersonalImageUrl {
	if x, ok := x.GetAction().(*ClientServerAction_SetPersonalImageUrl); ok {
		return x.SetPersonalImageUrl
	}
	return nil
}

func (x *ClientServerAction) GetSetAway() *SetAway {
	if x, ok := x.GetAction().(*ClientServerAction_SetAway); ok {
		return x.SetAway
	}
	return nil
}

func (x *ClientServerAction) GetSetCity() *SetCity {
	if x, ok := x.GetAction().(*ClientServerAction_SetCity); ok {
		return x.SetCity
	}
	return nil
}

func (x *ClientServerAction) GetSetCountry() *SetCountry {
	if x, ok := x.GetAction().(*ClientServerAction_SetCountry); ok {
		return x.SetCountry
	}
	return nil
}

func (x *ClientServerAction) GetSetStartDate() *SetStartDate {
	if x, ok := x.GetAction().(*ClientServerAction_SetStartDate); ok {
		return x.SetStartDate
	}
	return nil
}

func (x *ClientServerAction) GetStartRecording() *StartRecording {
	if x, ok := x.GetAction().(*ClientServerAction_StartRecording); ok {
		return x.StartRecording
	}
	return nil
}

func (x *ClientServerAction) GetRequestAccessViaCheckIn() *RequestAccessViaCheckIn {
	if x, ok := x.GetAction().(*ClientServerAction_RequestAccessViaCheckIn); ok {
		return x.RequestAccessViaCheckIn
	}
	return nil
}

func (x *ClientServerAction) GetRespondToAccessRequest() *RespondToAccessRequest {
	if x, ok := x.GetAction().(*ClientServerAction_RespondToAccessRequest); ok {
		return x.RespondToAccessRequest
	}
	return nil
}

func (x *ClientServerAction) GetSetAvailability() *SetAvailability {
	if x, ok := x.GetAction().(*ClientServerAction_SetAvailability); ok {
		return x.SetAvailability
	}
	return nil
}

func (x *ClientServerAction) GetRespawnAtDesk() *RespawnAtDesk {
	if x, ok := x.GetAction().(*ClientServerAction_RespawnAtDesk); ok {
		return x.RespawnAtDesk
	}
	return nil
}

func (x *ClientServerAction) GetSetDeskFromNextAvailableDesk() *SetDeskFromNextAvailableDesk {
	if x, ok := x.GetAction().(*ClientServerAction_SetDeskFromNextAvailableDesk); ok {
		return x.SetDeskFromNextAvailableDesk
	}
	return nil
}

func (x *ClientServerAction) GetSetSpaceRolePermissionOverride() *SetSpaceRolePermissionOverride {
	if x, ok := x.GetAction().(*ClientServerAction_SetSpaceRolePermissionOverride); ok {
		return x.SetSpaceRolePermissionOverride
	}
	return nil
}

func (x *ClientServerAction) GetSetCurrentlyEquippedWearables() *SetCurrentlyEquippedWearables {
	if x, ok := x.GetAction().(*ClientServerAction_SetCurrentlyEquippedWearables); ok {
		return x.SetCurrentlyEquippedWearables
	}
	return nil
}

func (x *ClientServerAction) GetSetDisplayEmail() *SetDisplayEmail {
	if x, ok := x.GetAction().(*ClientServerAction_SetDisplayEmail); ok {
		return x.SetDisplayEmail
	}
	return nil
}

func (x *ClientServerAction) GetMapDeleteObjectByKey() *MapDeleteObjectByKey {
	if x, ok := x.GetAction().(*ClientServerAction_MapDeleteObjectByKey); ok {
		return x.MapDeleteObjectByKey
	}
	return nil
}

func (x *ClientServerAction) GetMapUpdateObjects() *MapUpdateObjects {
	if x, ok := x.GetAction().(*ClientServerAction_MapUpdateObjects); ok {
		return x.MapUpdateObjects
	}
	return nil
}

func (x *ClientServerAction) GetInteractWithObject() *InteractWithObject {
	if x, ok := x.GetAction().(*ClientServerAction_InteractWithObject); ok {
		return x.InteractWithObject
	}
	return nil
}

func (x *ClientServerAction) GetTriggerObject() *TriggerObject {
	if x, ok := x.GetAction().(*ClientServerAction_TriggerObject); ok {
		return x.TriggerObject
	}
	return nil
}

func (x *ClientServerAction) GetJoinChimeMeeting() *JoinChimeMeeting {
	if x, ok := x.GetAction().(*ClientServerAction_JoinChimeMeeting); ok {
		return x.JoinChimeMeeting
	}
	return nil
}

type isClientServerAction_Action interface {
	isClientServerAction_Action()
}

type ClientServerAction_ClientHeartbeat struct {
	ClientHeartbeat *ClientHeartbeat `protobuf:"bytes,1,opt,name=clientHeartbeat,proto3,oneof"`
}

type ClientServerAction_ClientBackupHeartbeat struct {
	ClientBackupHeartbeat *ClientBackupHeartbeat `protobuf:"bytes,2,opt,name=clientBackupHeartbeat,proto3,oneof"`
}

type ClientServerAction_UpdateSubscriptions struct {
	UpdateSubscriptions *UpdateSubscriptions `protobuf:"bytes,3,opt,name=updateSubscriptions,proto3,oneof"`
}

type ClientServerAction_Move struct {
	Move *Move `protobuf:"bytes,5,opt,name=move,proto3,oneof"`
}

type ClientServerAction_SetAffiliation struct {
	SetAffiliation *SetAffiliation `protobuf:"bytes,7,opt,name=setAffiliation,proto3,oneof"`
}

type ClientServerAction_SetStatus struct {
	SetStatus *SetStatus `protobuf:"bytes,8,opt,name=setStatus,proto3,oneof"`
}

type ClientServerAction_Spotlight struct {
	Spotlight *Spotlight `protobuf:"bytes,9,opt,name=spotlight,proto3,oneof"`
}

type ClientServerAction_Ring struct {
	Ring *Ring `protobuf:"bytes,10,opt,name=ring,proto3,oneof"`
}

type ClientServerAction_Ban struct {
	Ban *Ban `protobuf:"bytes,12,opt,name=ban,proto3,oneof"`
}

type ClientServerAction_Kick struct {
	Kick *Kick `protobuf:"bytes,13,opt,name=kick,proto3,oneof"`
}

type ClientServerAction_SetImpassable struct {
	SetImpassable *SetImpassable `protobuf:"bytes,14,opt,name=setImpassable,proto3,oneof"` // deprecating (NGN-705)
}

type ClientServerAction_Chat struct {
	Chat *Chat `protobuf:"bytes,15,opt,name=chat,proto3,oneof"`
}

type ClientServerAction_Interact struct {
	Interact *Deprecated `protobuf:"bytes,18,opt,name=interact,proto3,oneof"`
}

type ClientServerAction_EnterWhisper struct {
	EnterWhisper *EnterWhisper `protobuf:"bytes,19,opt,name=enterWhisper,proto3,oneof"`
}

type ClientServerAction_LeaveWhisper struct {
	LeaveWhisper *LeaveWhisper `protobuf:"bytes,20,opt,name=leaveWhisper,proto3,oneof"`
}

type ClientServerAction_SetEmojiStatus struct {
	SetEmojiStatus *SetEmojiStatus `protobuf:"bytes,21,opt,name=setEmojiStatus,proto3,oneof"`
}

type ClientServerAction_ActivelySpeaking struct {
	ActivelySpeaking *ActivelySpeaking `protobuf:"bytes,22,opt,name=activelySpeaking,proto3,oneof"`
}

type ClientServerAction_SetName struct {
	SetName *SetName `protobuf:"bytes,24,opt,name=setName,proto3,oneof"`
}

type ClientServerAction_SetTextStatus struct {
	SetTextStatus *SetTextStatus `protobuf:"bytes,25,opt,name=setTextStatus,proto3,oneof"`
}

type ClientServerAction_Teleport struct {
	Teleport *Teleport `protobuf:"bytes,26,opt,name=teleport,proto3,oneof"`
}

type ClientServerAction_Exit struct {
	Exit *Exit `protobuf:"bytes,27,opt,name=exit,proto3,oneof"`
}

type ClientServerAction_Enter struct {
	Enter *Enter `protobuf:"bytes,28,opt,name=enter,proto3,oneof"`
}

type ClientServerAction_SetWorkCondition struct {
	SetWorkCondition *Deprecated `protobuf:"bytes,29,opt,name=setWorkCondition,proto3,oneof"`
}

type ClientServerAction_Respawn struct {
	Respawn *Respawn `protobuf:"bytes,30,opt,name=respawn,proto3,oneof"`
}

type ClientServerAction_Spawn struct {
	Spawn *Spawn `protobuf:"bytes,31,opt,name=spawn,proto3,oneof"`
}

type ClientServerAction_Ghost struct {
	Ghost *Ghost `protobuf:"bytes,32,opt,name=ghost,proto3,oneof"`
}

type ClientServerAction_Init struct {
	Init *Init `protobuf:"bytes,33,opt,name=init,proto3,oneof"`
}

type ClientServerAction_SetOutfitString struct {
	SetOutfitString *Deprecated `protobuf:"bytes,34,opt,name=setOutfitString,proto3,oneof"`
}

type ClientServerAction_ShootConfetti struct {
	ShootConfetti *ShootConfetti `protobuf:"bytes,36,opt,name=shootConfetti,proto3,oneof"`
}

type ClientServerAction_SetEventStatus struct {
	SetEventStatus *SetEventStatus `protobuf:"bytes,37,opt,name=setEventStatus,proto3,oneof"` // experimental
}

type ClientServerAction_SetInConversation struct {
	SetInConversation *SetInConversation `protobuf:"bytes,38,opt,name=setInConversation,proto3,oneof"` // experimental
}

type ClientServerAction_SetCurrentDesk struct {
	SetCurrentDesk *Deprecated `protobuf:"bytes,39,opt,name=setCurrentDesk,proto3,oneof"`
}

type ClientServerAction_SetCurrentArea struct {
	SetCurrentArea *SetCurrentArea `protobuf:"bytes,40,opt,name=setCurrentArea,proto3,oneof"` // experimental
}

type ClientServerAction_SetImagePointer struct {
	SetImagePointer *SetImagePointer `protobuf:"bytes,41,opt,name=setImagePointer,proto3,oneof"`
}

type ClientServerAction_SetGoKartId struct {
	SetGoKartId *Deprecated `protobuf:"bytes,42,opt,name=setGoKartId,proto3,oneof"`
}

type ClientServerAction_MapSetDimensions struct {
	MapSetDimensions *MapSetDimensions `protobuf:"bytes,43,opt,name=mapSetDimensions,proto3,oneof"`
}

type ClientServerAction_MapSetCollisions struct {
	MapSetCollisions *MapSetCollisions `protobuf:"bytes,44,opt,name=mapSetCollisions,proto3,oneof"`
}

type ClientServerAction_MapSetBackgroundImagePath struct {
	MapSetBackgroundImagePath *MapSetBackgroundImagePath `protobuf:"bytes,45,opt,name=mapSetBackgroundImagePath,proto3,oneof"`
}

type ClientServerAction_MapSetForegroundImagePath struct {
	MapSetForegroundImagePath *MapSetForegroundImagePath `protobuf:"bytes,46,opt,name=mapSetForegroundImagePath,proto3,oneof"`
}

type ClientServerAction_MapSetSprites struct {
	MapSetSprites *Deprecated `protobuf:"bytes,47,opt,name=mapSetSprites,proto3,oneof"` // deprecated (NGN-106)
}

type ClientServerAction_MapSetSpawns struct {
	MapSetSpawns *MapSetSpawns `protobuf:"bytes,48,opt,name=mapSetSpawns,proto3,oneof"`
}

type ClientServerAction_MapSetSpaces struct {
	MapSetSpaces *Deprecated `protobuf:"bytes,49,opt,name=mapSetSpaces,proto3,oneof"`
}

type ClientServerAction_MapSetPortals struct {
	MapSetPortals *MapSetPortals `protobuf:"bytes,50,opt,name=mapSetPortals,proto3,oneof"`
}

type ClientServerAction_MapSetAnnouncer struct {
	MapSetAnnouncer *MapSetAnnouncer `protobuf:"bytes,51,opt,name=mapSetAnnouncer,proto3,oneof"`
}

type ClientServerAction_MapSetAssets struct {
	MapSetAssets *MapSetAssets `protobuf:"bytes,54,opt,name=mapSetAssets,proto3,oneof"` // deprecating (use type 0 objects) (NGN-123)
}

type ClientServerAction_MapSetObjects struct {
	MapSetObjects *Deprecated `protobuf:"bytes,55,opt,name=mapSetObjects,proto3,oneof"` // deprecated in favor of mapUpdateObjects
}

type ClientServerAction_MapSetName struct {
	MapSetName *MapSetName `protobuf:"bytes,56,opt,name=mapSetName,proto3,oneof"`
}

type ClientServerAction_MapSetMuteOnEntry struct {
	MapSetMuteOnEntry *MapSetMuteOnEntry `protobuf:"bytes,58,opt,name=mapSetMuteOnEntry,proto3,oneof"`
}

type ClientServerAction_MapSetUseDrawnBG struct {
	MapSetUseDrawnBG *MapSetUseDrawnBG `protobuf:"bytes,59,opt,name=mapSetUseDrawnBG,proto3,oneof"`
}

type ClientServerAction_MapSetWalls struct {
	MapSetWalls *MapSetWalls `protobuf:"bytes,60,opt,name=mapSetWalls,proto3,oneof"`
}

type ClientServerAction_MapSetFloors struct {
	MapSetFloors *MapSetFloors `protobuf:"bytes,61,opt,name=mapSetFloors,proto3,oneof"`
}

type ClientServerAction_MapSetAreas struct {
	MapSetAreas *MapSetAreas `protobuf:"bytes,62,opt,name=mapSetAreas,proto3,oneof"` // experimental
}

type ClientServerAction_MapAddObject struct {
	MapAddObject *MapAddObject `protobuf:"bytes,63,opt,name=mapAddObject,proto3,oneof"`
}

type ClientServerAction_MapDeleteObject struct {
	MapDeleteObject *Deprecated `protobuf:"bytes,64,opt,name=mapDeleteObject,proto3,oneof"` // deprecated in favor of mapDeleteObjectByKey
}

type ClientServerAction_MapSetSpawn struct {
	MapSetSpawn *MapSetSpawn `protobuf:"bytes,65,opt,name=mapSetSpawn,proto3,oneof"` // deprecating (NGN-104)
}

type ClientServerAction_SetIsAlone struct {
	SetIsAlone *SetIsAlone `protobuf:"bytes,66,opt,name=setIsAlone,proto3,oneof"` // experimental
}

type ClientServerAction_MapSetMiniMapImagePath struct {
	MapSetMiniMapImagePath *MapSetMiniMapImagePath `protobuf:"bytes,67,opt,name=mapSetMiniMapImagePath,proto3,oneof"`
}

type ClientServerAction_MapSetEnabledChats struct {
	MapSetEnabledChats *MapSetEnabledChats `protobuf:"bytes,68,opt,name=mapSetEnabledChats,proto3,oneof"`
}

type ClientServerAction_MapSetDescription struct {
	MapSetDescription *MapSetDescription `protobuf:"bytes,69,opt,name=mapSetDescription,proto3,oneof"`
}

type ClientServerAction_MapSetDecoration struct {
	MapSetDecoration *MapSetDecoration `protobuf:"bytes,70,opt,name=mapSetDecoration,proto3,oneof"`
}

type ClientServerAction_MapSetTutorialTasks struct {
	MapSetTutorialTasks *MapSetTutorialTasks `protobuf:"bytes,71,opt,name=mapSetTutorialTasks,proto3,oneof"`
}

type ClientServerAction_PlaySound struct {
	PlaySound *PlaySound `protobuf:"bytes,72,opt,name=playSound,proto3,oneof"`
}

type ClientServerAction_MapSetScript struct {
	MapSetScript *MapSetScript `protobuf:"bytes,73,opt,name=mapSetScript,proto3,oneof"`
}

type ClientServerAction_SetIsMobile struct {
	SetIsMobile *SetIsMobile `protobuf:"bytes,75,opt,name=setIsMobile,proto3,oneof"`
}

type ClientServerAction_SetScreenPointer struct {
	SetScreenPointer *SetScreenPointer `protobuf:"bytes,76,opt,name=setScreenPointer,proto3,oneof"`
}

type ClientServerAction_SetEmoteV2 struct {
	SetEmoteV2 *SetEmoteV2 `protobuf:"bytes,77,opt,name=setEmoteV2,proto3,oneof"`
}

type ClientServerAction_SetFocusModeEndTime struct {
	SetFocusModeEndTime *SetFocusModeEndTime `protobuf:"bytes,78,opt,name=setFocusModeEndTime,proto3,oneof"` // experimental
}

type ClientServerAction_MapDeleteObjectById struct {
	MapDeleteObjectById *MapDeleteObjectById `protobuf:"bytes,79,opt,name=mapDeleteObjectById,proto3,oneof"`
}

type ClientServerAction_CustomAction struct {
	CustomAction *CustomAction `protobuf:"bytes,80,opt,name=customAction,proto3,oneof"`
}

type ClientServerAction_Block struct {
	Block *Block `protobuf:"bytes,82,opt,name=block,proto3,oneof"`
}

type ClientServerAction_SetItemString struct {
	SetItemString *SetItemString `protobuf:"bytes,83,opt,name=setItemString,proto3,oneof"`
}

type ClientServerAction_TriggerItem struct {
	TriggerItem *Deprecated `protobuf:"bytes,84,opt,name=triggerItem,proto3,oneof"`
}

type ClientServerAction_Notify struct {
	Notify *Notify `protobuf:"bytes,85,opt,name=notify,proto3,oneof"`
}

type ClientServerAction_SetFollowTarget struct {
	SetFollowTarget *SetFollowTarget `protobuf:"bytes,86,opt,name=setFollowTarget,proto3,oneof"`
}

type ClientServerAction_RequestToLead struct {
	RequestToLead *RequestToLead `protobuf:"bytes,87,opt,name=requestToLead,proto3,oneof"`
}

type ClientServerAction_EnterPortal struct {
	EnterPortal *EnterPortal `protobuf:"bytes,88,opt,name=enterPortal,proto3,oneof"`
}

type ClientServerAction_SetManualVideoSrc struct {
	SetManualVideoSrc *SetManualVideoSrc `protobuf:"bytes,89,opt,name=setManualVideoSrc,proto3,oneof"`
}

type ClientServerAction_SetSubtitle struct {
	SetSubtitle *SetSubtitle `protobuf:"bytes,90,opt,name=setSubtitle,proto3,oneof"`
}

type ClientServerAction_PlayerUpdatesSession struct {
	PlayerUpdatesSession *Deprecated `protobuf:"bytes,91,opt,name=playerUpdatesSession,proto3,oneof"`
}

type ClientServerAction_MapMoveObject struct {
	MapMoveObject *MapMoveObject `protobuf:"bytes,92,opt,name=mapMoveObject,proto3,oneof"`
}

type ClientServerAction_ChatMessageUpdated struct {
	ChatMessageUpdated *ChatMessageUpdated `protobuf:"bytes,93,opt,name=chatMessageUpdated,proto3,oneof"`
}

type ClientServerAction_FxShakeObject struct {
	FxShakeObject *FXShakeObject `protobuf:"bytes,94,opt,name=fxShakeObject,proto3,oneof"`
}

type ClientServerAction_FxShakeCamera struct {
	FxShakeCamera *FXShakeCamera `protobuf:"bytes,95,opt,name=fxShakeCamera,proto3,oneof"`
}

type ClientServerAction_RegisterCommand struct {
	RegisterCommand *RegisterCommand `protobuf:"bytes,96,opt,name=registerCommand,proto3,oneof"`
}

type ClientServerAction_SendCommand struct {
	SendCommand *SendCommand `protobuf:"bytes,97,opt,name=sendCommand,proto3,oneof"`
}

type ClientServerAction_SpeakerUpdatesSession struct {
	SpeakerUpdatesSession *SpeakerUpdatesSession `protobuf:"bytes,98,opt,name=speakerUpdatesSession,proto3,oneof"`
}

type ClientServerAction_AddInventoryItem struct {
	AddInventoryItem *AddInventoryItem `protobuf:"bytes,101,opt,name=addInventoryItem,proto3,oneof"`
}

type ClientServerAction_RemoveInventoryItem struct {
	RemoveInventoryItem *RemoveInventoryItem `protobuf:"bytes,102,opt,name=removeInventoryItem,proto3,oneof"`
}

type ClientServerAction_SetVehicleId struct {
	SetVehicleId *SetVehicleId `protobuf:"bytes,103,opt,name=setVehicleId,proto3,oneof"`
}

type ClientServerAction_SetSpeedModifier struct {
	SetSpeedModifier *SetSpeedModifier `protobuf:"bytes,104,opt,name=setSpeedModifier,proto3,oneof"`
}

type ClientServerAction_HighFive struct {
	HighFive *HighFive `protobuf:"bytes,105,opt,name=highFive,proto3,oneof"`
}

type ClientServerAction_UpdateSpaceItems struct {
	UpdateSpaceItems *SpaceUpdatesItems `protobuf:"bytes,107,opt,name=updateSpaceItems,proto3,oneof"`
}

type ClientServerAction_StopSound struct {
	StopSound *StopSound `protobuf:"bytes,108,opt,name=stopSound,proto3,oneof"`
}

type ClientServerAction_HipToBeSquare struct {
	HipToBeSquare *HipToBeSquare `protobuf:"bytes,109,opt,name=hipToBeSquare,proto3,oneof"`
}

type ClientServerAction_Craft struct {
	Craft *Craft `protobuf:"bytes,110,opt,name=craft,proto3,oneof"`
}

type ClientServerAction_TriggerInventoryItem struct {
	TriggerInventoryItem *TriggerInventoryItem `protobuf:"bytes,111,opt,name=triggerInventoryItem,proto3,oneof"`
}

type ClientServerAction_SetAllowScreenPointer struct {
	SetAllowScreenPointer *SetAllowScreenPointer `protobuf:"bytes,112,opt,name=setAllowScreenPointer,proto3,oneof"`
}

type ClientServerAction_PrecomputeEnter struct {
	PrecomputeEnter *PrecomputeEnter `protobuf:"bytes,113,opt,name=precomputeEnter,proto3,oneof"`
}

type ClientServerAction_RequestMute struct {
	RequestMute *RequestMute `protobuf:"bytes,114,opt,name=requestMute,proto3,oneof"`
}

type ClientServerAction_SetDeskInfo struct {
	SetDeskInfo *SetDeskInfo `protobuf:"bytes,115,opt,name=setDeskInfo,proto3,oneof"`
}

type ClientServerAction_MapSetNooks struct {
	MapSetNooks *MapSetNooks `protobuf:"bytes,116,opt,name=mapSetNooks,proto3,oneof"`
}

type ClientServerAction_RequestToJoinNook struct {
	RequestToJoinNook *RequestToJoinNook `protobuf:"bytes,117,opt,name=requestToJoinNook,proto3,oneof"`
}

type ClientServerAction_UpdateNookPermission struct {
	UpdateNookPermission *UpdateNookPermission `protobuf:"bytes,118,opt,name=updateNookPermission,proto3,oneof"`
}

type ClientServerAction_Wave struct {
	Wave *Wave `protobuf:"bytes,119,opt,name=wave,proto3,oneof"`
}

type ClientServerAction_SetPronouns struct {
	SetPronouns *SetPronouns `protobuf:"bytes,120,opt,name=setPronouns,proto3,oneof"`
}

type ClientServerAction_SetTitle struct {
	SetTitle *SetTitle `protobuf:"bytes,121,opt,name=setTitle,proto3,oneof"`
}

type ClientServerAction_SetTimezone struct {
	SetTimezone *SetTimezone `protobuf:"bytes,122,opt,name=setTimezone,proto3,oneof"`
}

type ClientServerAction_SetPhone struct {
	SetPhone *SetPhone `protobuf:"bytes,123,opt,name=setPhone,proto3,oneof"`
}

type ClientServerAction_SetDescription struct {
	SetDescription *SetDescription `protobuf:"bytes,124,opt,name=setDescription,proto3,oneof"`
}

type ClientServerAction_SetProfileImageUrl struct {
	SetProfileImageUrl *SetProfileImageUrl `protobuf:"bytes,125,opt,name=setProfileImageUrl,proto3,oneof"`
}

type ClientServerAction_SetPersonalImageUrl struct {
	SetPersonalImageUrl *SetPersonalImageUrl `protobuf:"bytes,126,opt,name=setPersonalImageUrl,proto3,oneof"`
}

type ClientServerAction_SetAway struct {
	SetAway *SetAway `protobuf:"bytes,127,opt,name=setAway,proto3,oneof"`
}

type ClientServerAction_SetCity struct {
	SetCity *SetCity `protobuf:"bytes,128,opt,name=setCity,proto3,oneof"`
}

type ClientServerAction_SetCountry struct {
	SetCountry *SetCountry `protobuf:"bytes,129,opt,name=setCountry,proto3,oneof"`
}

type ClientServerAction_SetStartDate struct {
	SetStartDate *SetStartDate `protobuf:"bytes,130,opt,name=setStartDate,proto3,oneof"`
}

type ClientServerAction_StartRecording struct {
	StartRecording *StartRecording `protobuf:"bytes,131,opt,name=startRecording,proto3,oneof"`
}

type ClientServerAction_RequestAccessViaCheckIn struct {
	RequestAccessViaCheckIn *RequestAccessViaCheckIn `protobuf:"bytes,132,opt,name=requestAccessViaCheckIn,proto3,oneof"`
}

type ClientServerAction_RespondToAccessRequest struct {
	RespondToAccessRequest *RespondToAccessRequest `protobuf:"bytes,133,opt,name=respondToAccessRequest,proto3,oneof"`
}

type ClientServerAction_SetAvailability struct {
	SetAvailability *SetAvailability `protobuf:"bytes,134,opt,name=setAvailability,proto3,oneof"`
}

type ClientServerAction_RespawnAtDesk struct {
	RespawnAtDesk *RespawnAtDesk `protobuf:"bytes,137,opt,name=respawnAtDesk,proto3,oneof"`
}

type ClientServerAction_SetDeskFromNextAvailableDesk struct {
	SetDeskFromNextAvailableDesk *SetDeskFromNextAvailableDesk `protobuf:"bytes,138,opt,name=setDeskFromNextAvailableDesk,proto3,oneof"`
}

type ClientServerAction_SetSpaceRolePermissionOverride struct {
	SetSpaceRolePermissionOverride *SetSpaceRolePermissionOverride `protobuf:"bytes,139,opt,name=setSpaceRolePermissionOverride,proto3,oneof"`
}

type ClientServerAction_SetCurrentlyEquippedWearables struct {
	SetCurrentlyEquippedWearables *SetCurrentlyEquippedWearables `protobuf:"bytes,140,opt,name=setCurrentlyEquippedWearables,proto3,oneof"`
}

type ClientServerAction_SetDisplayEmail struct {
	SetDisplayEmail *SetDisplayEmail `protobuf:"bytes,141,opt,name=setDisplayEmail,proto3,oneof"`
}

type ClientServerAction_MapDeleteObjectByKey struct {
	MapDeleteObjectByKey *MapDeleteObjectByKey `protobuf:"bytes,142,opt,name=mapDeleteObjectByKey,proto3,oneof"`
}

type ClientServerAction_MapUpdateObjects struct {
	MapUpdateObjects *MapUpdateObjects `protobuf:"bytes,143,opt,name=mapUpdateObjects,proto3,oneof"`
}

type ClientServerAction_InteractWithObject struct {
	InteractWithObject *InteractWithObject `protobuf:"bytes,144,opt,name=interactWithObject,proto3,oneof"`
}

type ClientServerAction_TriggerObject struct {
	TriggerObject *TriggerObject `protobuf:"bytes,145,opt,name=triggerObject,proto3,oneof"`
}

type ClientServerAction_JoinChimeMeeting struct {
	JoinChimeMeeting *JoinChimeMeeting `protobuf:"bytes,146,opt,name=joinChimeMeeting,proto3,oneof"` // experimental
}

func (*ClientServerAction_ClientHeartbeat) isClientServerAction_Action() {}

func (*ClientServerAction_ClientBackupHeartbeat) isClientServerAction_Action() {}

func (*ClientServerAction_UpdateSubscriptions) isClientServerAction_Action() {}

func (*ClientServerAction_Move) isClientServerAction_Action() {}

func (*ClientServerAction_SetAffiliation) isClientServerAction_Action() {}

func (*ClientServerAction_SetStatus) isClientServerAction_Action() {}

func (*ClientServerAction_Spotlight) isClientServerAction_Action() {}

func (*ClientServerAction_Ring) isClientServerAction_Action() {}

func (*ClientServerAction_Ban) isClientServerAction_Action() {}

func (*ClientServerAction_Kick) isClientServerAction_Action() {}

func (*ClientServerAction_SetImpassable) isClientServerAction_Action() {}

func (*ClientServerAction_Chat) isClientServerAction_Action() {}

func (*ClientServerAction_Interact) isClientServerAction_Action() {}

func (*ClientServerAction_EnterWhisper) isClientServerAction_Action() {}

func (*ClientServerAction_LeaveWhisper) isClientServerAction_Action() {}

func (*ClientServerAction_SetEmojiStatus) isClientServerAction_Action() {}

func (*ClientServerAction_ActivelySpeaking) isClientServerAction_Action() {}

func (*ClientServerAction_SetName) isClientServerAction_Action() {}

func (*ClientServerAction_SetTextStatus) isClientServerAction_Action() {}

func (*ClientServerAction_Teleport) isClientServerAction_Action() {}

func (*ClientServerAction_Exit) isClientServerAction_Action() {}

func (*ClientServerAction_Enter) isClientServerAction_Action() {}

func (*ClientServerAction_SetWorkCondition) isClientServerAction_Action() {}

func (*ClientServerAction_Respawn) isClientServerAction_Action() {}

func (*ClientServerAction_Spawn) isClientServerAction_Action() {}

func (*ClientServerAction_Ghost) isClientServerAction_Action() {}

func (*ClientServerAction_Init) isClientServerAction_Action() {}

func (*ClientServerAction_SetOutfitString) isClientServerAction_Action() {}

func (*ClientServerAction_ShootConfetti) isClientServerAction_Action() {}

func (*ClientServerAction_SetEventStatus) isClientServerAction_Action() {}

func (*ClientServerAction_SetInConversation) isClientServerAction_Action() {}

func (*ClientServerAction_SetCurrentDesk) isClientServerAction_Action() {}

func (*ClientServerAction_SetCurrentArea) isClientServerAction_Action() {}

func (*ClientServerAction_SetImagePointer) isClientServerAction_Action() {}

func (*ClientServerAction_SetGoKartId) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetDimensions) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetCollisions) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetBackgroundImagePath) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetForegroundImagePath) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetSprites) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetSpawns) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetSpaces) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetPortals) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetAnnouncer) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetAssets) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetObjects) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetName) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetMuteOnEntry) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetUseDrawnBG) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetWalls) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetFloors) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetAreas) isClientServerAction_Action() {}

func (*ClientServerAction_MapAddObject) isClientServerAction_Action() {}

func (*ClientServerAction_MapDeleteObject) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetSpawn) isClientServerAction_Action() {}

func (*ClientServerAction_SetIsAlone) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetMiniMapImagePath) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetEnabledChats) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetDescription) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetDecoration) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetTutorialTasks) isClientServerAction_Action() {}

func (*ClientServerAction_PlaySound) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetScript) isClientServerAction_Action() {}

func (*ClientServerAction_SetIsMobile) isClientServerAction_Action() {}

func (*ClientServerAction_SetScreenPointer) isClientServerAction_Action() {}

func (*ClientServerAction_SetEmoteV2) isClientServerAction_Action() {}

func (*ClientServerAction_SetFocusModeEndTime) isClientServerAction_Action() {}

func (*ClientServerAction_MapDeleteObjectById) isClientServerAction_Action() {}

func (*ClientServerAction_CustomAction) isClientServerAction_Action() {}

func (*ClientServerAction_Block) isClientServerAction_Action() {}

func (*ClientServerAction_SetItemString) isClientServerAction_Action() {}

func (*ClientServerAction_TriggerItem) isClientServerAction_Action() {}

func (*ClientServerAction_Notify) isClientServerAction_Action() {}

func (*ClientServerAction_SetFollowTarget) isClientServerAction_Action() {}

func (*ClientServerAction_RequestToLead) isClientServerAction_Action() {}

func (*ClientServerAction_EnterPortal) isClientServerAction_Action() {}

func (*ClientServerAction_SetManualVideoSrc) isClientServerAction_Action() {}

func (*ClientServerAction_SetSubtitle) isClientServerAction_Action() {}

func (*ClientServerAction_PlayerUpdatesSession) isClientServerAction_Action() {}

func (*ClientServerAction_MapMoveObject) isClientServerAction_Action() {}

func (*ClientServerAction_ChatMessageUpdated) isClientServerAction_Action() {}

func (*ClientServerAction_FxShakeObject) isClientServerAction_Action() {}

func (*ClientServerAction_FxShakeCamera) isClientServerAction_Action() {}

func (*ClientServerAction_RegisterCommand) isClientServerAction_Action() {}

func (*ClientServerAction_SendCommand) isClientServerAction_Action() {}

func (*ClientServerAction_SpeakerUpdatesSession) isClientServerAction_Action() {}

func (*ClientServerAction_AddInventoryItem) isClientServerAction_Action() {}

func (*ClientServerAction_RemoveInventoryItem) isClientServerAction_Action() {}

func (*ClientServerAction_SetVehicleId) isClientServerAction_Action() {}

func (*ClientServerAction_SetSpeedModifier) isClientServerAction_Action() {}

func (*ClientServerAction_HighFive) isClientServerAction_Action() {}

func (*ClientServerAction_UpdateSpaceItems) isClientServerAction_Action() {}

func (*ClientServerAction_StopSound) isClientServerAction_Action() {}

func (*ClientServerAction_HipToBeSquare) isClientServerAction_Action() {}

func (*ClientServerAction_Craft) isClientServerAction_Action() {}

func (*ClientServerAction_TriggerInventoryItem) isClientServerAction_Action() {}

func (*ClientServerAction_SetAllowScreenPointer) isClientServerAction_Action() {}

func (*ClientServerAction_PrecomputeEnter) isClientServerAction_Action() {}

func (*ClientServerAction_RequestMute) isClientServerAction_Action() {}

func (*ClientServerAction_SetDeskInfo) isClientServerAction_Action() {}

func (*ClientServerAction_MapSetNooks) isClientServerAction_Action() {}

func (*ClientServerAction_RequestToJoinNook) isClientServerAction_Action() {}

func (*ClientServerAction_UpdateNookPermission) isClientServerAction_Action() {}

func (*ClientServerAction_Wave) isClientServerAction_Action() {}

func (*ClientServerAction_SetPronouns) isClientServerAction_Action() {}

func (*ClientServerAction_SetTitle) isClientServerAction_Action() {}

func (*ClientServerAction_SetTimezone) isClientServerAction_Action() {}

func (*ClientServerAction_SetPhone) isClientServerAction_Action() {}

func (*ClientServerAction_SetDescription) isClientServerAction_Action() {}

func (*ClientServerAction_SetProfileImageUrl) isClientServerAction_Action() {}

func (*ClientServerAction_SetPersonalImageUrl) isClientServerAction_Action() {}

func (*ClientServerAction_SetAway) isClientServerAction_Action() {}

func (*ClientServerAction_SetCity) isClientServerAction_Action() {}

func (*ClientServerAction_SetCountry) isClientServerAction_Action() {}

func (*ClientServerAction_SetStartDate) isClientServerAction_Action() {}

func (*ClientServerAction_StartRecording) isClientServerAction_Action() {}

func (*ClientServerAction_RequestAccessViaCheckIn) isClientServerAction_Action() {}

func (*ClientServerAction_RespondToAccessRequest) isClientServerAction_Action() {}

func (*ClientServerAction_SetAvailability) isClientServerAction_Action() {}

func (*ClientServerAction_RespawnAtDesk) isClientServerAction_Action() {}

func (*ClientServerAction_SetDeskFromNextAvailableDesk) isClientServerAction_Action() {}

func (*ClientServerAction_SetSpaceRolePermissionOverride) isClientServerAction_Action() {}

func (*ClientServerAction_SetCurrentlyEquippedWearables) isClientServerAction_Action() {}

func (*ClientServerAction_SetDisplayEmail) isClientServerAction_Action() {}

func (*ClientServerAction_MapDeleteObjectByKey) isClientServerAction_Action() {}

func (*ClientServerAction_MapUpdateObjects) isClientServerAction_Action() {}

func (*ClientServerAction_InteractWithObject) isClientServerAction_Action() {}

func (*ClientServerAction_TriggerObject) isClientServerAction_Action() {}

func (*ClientServerAction_JoinChimeMeeting) isClientServerAction_Action() {}

// tbh this is half heartbeat half for measuring ping
type ClientHeartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientHeartbeat) Reset() {
	*x = ClientHeartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHeartbeat) ProtoMessage() {}

func (x *ClientHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHeartbeat.ProtoReflect.Descriptor instead.
func (*ClientHeartbeat) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{174}
}

// this is because we've attached timings and stuff to the former one, don't want to interfere
type ClientBackupHeartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientBackupHeartbeat) Reset() {
	*x = ClientBackupHeartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientBackupHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientBackupHeartbeat) ProtoMessage() {}

func (x *ClientBackupHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientBackupHeartbeat.ProtoReflect.Descriptor instead.
func (*ClientBackupHeartbeat) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{175}
}

type UpdateSubscriptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions map[string]bool   `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUpdateIds  map[string]uint64 `protobuf:"bytes,2,rep,name=mapUpdateIds,proto3" json:"mapUpdateIds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UpdateSubscriptions) Reset() {
	*x = UpdateSubscriptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubscriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriptions) ProtoMessage() {}

func (x *UpdateSubscriptions) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriptions.ProtoReflect.Descriptor instead.
func (*UpdateSubscriptions) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{176}
}

func (x *UpdateSubscriptions) GetSubscriptions() map[string]bool {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *UpdateSubscriptions) GetMapUpdateIds() map[string]uint64 {
	if x != nil {
		return x.MapUpdateIds
	}
	return nil
}

type Move struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dir      MoveDirectionEnum_ENUM `protobuf:"varint,1,opt,name=dir,proto3,enum=gathertown.MoveDirectionEnum_ENUM" json:"dir,omitempty"`
	Stopped  bool                   `protobuf:"varint,2,opt,name=stopped,proto3" json:"stopped,omitempty"`
	InputId  uint32                 `protobuf:"varint,3,opt,name=inputId,proto3" json:"inputId,omitempty"`
	TargetId *string                `protobuf:"bytes,4,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *Move) Reset() {
	*x = Move{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Move) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Move) ProtoMessage() {}

func (x *Move) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Move.ProtoReflect.Descriptor instead.
func (*Move) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{177}
}

func (x *Move) GetDir() MoveDirectionEnum_ENUM {
	if x != nil {
		return x.Dir
	}
	return MoveDirectionEnum_Left
}

func (x *Move) GetStopped() bool {
	if x != nil {
		return x.Stopped
	}
	return false
}

func (x *Move) GetInputId() uint32 {
	if x != nil {
		return x.InputId
	}
	return 0
}

func (x *Move) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type RequestMute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Video  bool   `protobuf:"varint,2,opt,name=video,proto3" json:"video,omitempty"`
}

func (x *RequestMute) Reset() {
	*x = RequestMute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMute) ProtoMessage() {}

func (x *RequestMute) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMute.ProtoReflect.Descriptor instead.
func (*RequestMute) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{178}
}

func (x *RequestMute) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *RequestMute) GetVideo() bool {
	if x != nil {
		return x.Video
	}
	return false
}

type SetAffiliation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affiliation string  `protobuf:"bytes,1,opt,name=affiliation,proto3" json:"affiliation,omitempty"`
	TargetId    *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetAffiliation) Reset() {
	*x = SetAffiliation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAffiliation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAffiliation) ProtoMessage() {}

func (x *SetAffiliation) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAffiliation.ProtoReflect.Descriptor instead.
func (*SetAffiliation) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{179}
}

func (x *SetAffiliation) GetAffiliation() string {
	if x != nil {
		return x.Affiliation
	}
	return ""
}

func (x *SetAffiliation) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   bool    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetStatus) Reset() {
	*x = SetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStatus) ProtoMessage() {}

func (x *SetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStatus.ProtoReflect.Descriptor instead.
func (*SetStatus) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{180}
}

func (x *SetStatus) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *SetStatus) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetAvailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Availability string  `protobuf:"bytes,1,opt,name=availability,proto3" json:"availability,omitempty"`
	EndOption    *string `protobuf:"bytes,2,opt,name=endOption,proto3,oneof" json:"endOption,omitempty"`
}

func (x *SetAvailability) Reset() {
	*x = SetAvailability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAvailability) ProtoMessage() {}

func (x *SetAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAvailability.ProtoReflect.Descriptor instead.
func (*SetAvailability) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{181}
}

func (x *SetAvailability) GetAvailability() string {
	if x != nil {
		return x.Availability
	}
	return ""
}

func (x *SetAvailability) GetEndOption() string {
	if x != nil && x.EndOption != nil {
		return *x.EndOption
	}
	return ""
}

type SetCurrentlyEquippedWearables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentlyEquippedWearables *DBOutfit `protobuf:"bytes,1,opt,name=currentlyEquippedWearables,proto3" json:"currentlyEquippedWearables,omitempty"`
	TargetId                   *string   `protobuf:"bytes,3,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetCurrentlyEquippedWearables) Reset() {
	*x = SetCurrentlyEquippedWearables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCurrentlyEquippedWearables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCurrentlyEquippedWearables) ProtoMessage() {}

func (x *SetCurrentlyEquippedWearables) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCurrentlyEquippedWearables.ProtoReflect.Descriptor instead.
func (*SetCurrentlyEquippedWearables) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{182}
}

func (x *SetCurrentlyEquippedWearables) GetCurrentlyEquippedWearables() *DBOutfit {
	if x != nil {
		return x.CurrentlyEquippedWearables
	}
	return nil
}

func (x *SetCurrentlyEquippedWearables) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type Spotlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpotlightedUser string `protobuf:"bytes,1,opt,name=spotlightedUser,proto3" json:"spotlightedUser,omitempty"`
	IsSpotlighted   bool   `protobuf:"varint,2,opt,name=isSpotlighted,proto3" json:"isSpotlighted,omitempty"`
}

func (x *Spotlight) Reset() {
	*x = Spotlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spotlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spotlight) ProtoMessage() {}

func (x *Spotlight) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spotlight.ProtoReflect.Descriptor instead.
func (*Spotlight) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{183}
}

func (x *Spotlight) GetSpotlightedUser() string {
	if x != nil {
		return x.SpotlightedUser
	}
	return ""
}

func (x *Spotlight) GetIsSpotlighted() bool {
	if x != nil {
		return x.IsSpotlighted
	}
	return false
}

type Ring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *Ring) Reset() {
	*x = Ring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ring) ProtoMessage() {}

func (x *Ring) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ring.ProtoReflect.Descriptor instead.
func (*Ring) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{184}
}

func (x *Ring) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type SetImagePointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string  `protobuf:"bytes,1,opt,name=objectId,proto3" json:"objectId,omitempty"`
	X        float64 `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	Y        float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *SetImagePointer) Reset() {
	*x = SetImagePointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetImagePointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetImagePointer) ProtoMessage() {}

func (x *SetImagePointer) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetImagePointer.ProtoReflect.Descriptor instead.
func (*SetImagePointer) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{185}
}

func (x *SetImagePointer) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *SetImagePointer) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *SetImagePointer) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type SetScreenPointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenId string  `protobuf:"bytes,1,opt,name=screenId,proto3" json:"screenId,omitempty"`
	X        float64 `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	Y        float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *SetScreenPointer) Reset() {
	*x = SetScreenPointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetScreenPointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetScreenPointer) ProtoMessage() {}

func (x *SetScreenPointer) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetScreenPointer.ProtoReflect.Descriptor instead.
func (*SetScreenPointer) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{186}
}

func (x *SetScreenPointer) GetScreenId() string {
	if x != nil {
		return x.ScreenId
	}
	return ""
}

func (x *SetScreenPointer) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *SetScreenPointer) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Ban struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *Ban) Reset() {
	*x = Ban{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ban) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ban) ProtoMessage() {}

func (x *Ban) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ban.ProtoReflect.Descriptor instead.
func (*Ban) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{187}
}

func (x *Ban) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type Kick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *Kick) Reset() {
	*x = Kick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kick) ProtoMessage() {}

func (x *Kick) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kick.ProtoReflect.Descriptor instead.
func (*Kick) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{188}
}

func (x *Kick) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockedUserId string `protobuf:"bytes,1,opt,name=blockedUserId,proto3" json:"blockedUserId,omitempty"`
	Blocked       bool   `protobuf:"varint,2,opt,name=blocked,proto3" json:"blocked,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{189}
}

func (x *Block) GetBlockedUserId() string {
	if x != nil {
		return x.BlockedUserId
	}
	return ""
}

func (x *Block) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

type SetImpassable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId      string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	X          uint32 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y          uint32 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	Impassable bool   `protobuf:"varint,4,opt,name=impassable,proto3" json:"impassable,omitempty"`
}

func (x *SetImpassable) Reset() {
	*x = SetImpassable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetImpassable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetImpassable) ProtoMessage() {}

func (x *SetImpassable) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetImpassable.ProtoReflect.Descriptor instead.
func (*SetImpassable) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{190}
}

func (x *SetImpassable) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *SetImpassable) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *SetImpassable) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *SetImpassable) GetImpassable() bool {
	if x != nil {
		return x.Impassable
	}
	return false
}

type Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatRecipient  string   `protobuf:"bytes,1,opt,name=chatRecipient,proto3" json:"chatRecipient,omitempty"`
	Contents       string   `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	LocalPlayerIds []string `protobuf:"bytes,3,rep,name=localPlayerIds,proto3" json:"localPlayerIds,omitempty"`
	MapId          string   `protobuf:"bytes,4,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Id             *string  `protobuf:"bytes,5,opt,name=id,proto3,oneof" json:"id,omitempty"`
	NookId         *string  `protobuf:"bytes,6,opt,name=nookId,proto3,oneof" json:"nookId,omitempty"`
}

func (x *Chat) Reset() {
	*x = Chat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chat) ProtoMessage() {}

func (x *Chat) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chat.ProtoReflect.Descriptor instead.
func (*Chat) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{191}
}

func (x *Chat) GetChatRecipient() string {
	if x != nil {
		return x.ChatRecipient
	}
	return ""
}

func (x *Chat) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *Chat) GetLocalPlayerIds() []string {
	if x != nil {
		return x.LocalPlayerIds
	}
	return nil
}

func (x *Chat) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *Chat) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Chat) GetNookId() string {
	if x != nil && x.NookId != nil {
		return *x.NookId
	}
	return ""
}

type Notify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification string `protobuf:"bytes,1,opt,name=notification,proto3" json:"notification,omitempty"`
}

func (x *Notify) Reset() {
	*x = Notify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notify) ProtoMessage() {}

func (x *Notify) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notify.ProtoReflect.Descriptor instead.
func (*Notify) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{192}
}

func (x *Notify) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

type InteractWithObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId    string  `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Key      string  `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	DataJson *string `protobuf:"bytes,3,opt,name=dataJson,proto3,oneof" json:"dataJson,omitempty"` // JSON string. Really this should be a separate "submit" action
}

func (x *InteractWithObject) Reset() {
	*x = InteractWithObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractWithObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractWithObject) ProtoMessage() {}

func (x *InteractWithObject) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractWithObject.ProtoReflect.Descriptor instead.
func (*InteractWithObject) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{193}
}

func (x *InteractWithObject) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *InteractWithObject) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *InteractWithObject) GetDataJson() string {
	if x != nil && x.DataJson != nil {
		return *x.DataJson
	}
	return ""
}

type ActivelySpeaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivelySpeaking bool `protobuf:"varint,1,opt,name=activelySpeaking,proto3" json:"activelySpeaking,omitempty"`
}

func (x *ActivelySpeaking) Reset() {
	*x = ActivelySpeaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivelySpeaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivelySpeaking) ProtoMessage() {}

func (x *ActivelySpeaking) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivelySpeaking.ProtoReflect.Descriptor instead.
func (*ActivelySpeaking) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{194}
}

func (x *ActivelySpeaking) GetActivelySpeaking() bool {
	if x != nil {
		return x.ActivelySpeaking
	}
	return false
}

type EnterWhisper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientId string                 `protobuf:"bytes,1,opt,name=recipientId,proto3" json:"recipientId,omitempty"`
	Dir         MoveDirectionEnum_ENUM `protobuf:"varint,2,opt,name=dir,proto3,enum=gathertown.MoveDirectionEnum_ENUM" json:"dir,omitempty"`
}

func (x *EnterWhisper) Reset() {
	*x = EnterWhisper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterWhisper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterWhisper) ProtoMessage() {}

func (x *EnterWhisper) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterWhisper.ProtoReflect.Descriptor instead.
func (*EnterWhisper) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{195}
}

func (x *EnterWhisper) GetRecipientId() string {
	if x != nil {
		return x.RecipientId
	}
	return ""
}

func (x *EnterWhisper) GetDir() MoveDirectionEnum_ENUM {
	if x != nil {
		return x.Dir
	}
	return MoveDirectionEnum_Left
}

type LeaveWhisper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LeaveWhisper) Reset() {
	*x = LeaveWhisper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveWhisper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveWhisper) ProtoMessage() {}

func (x *LeaveWhisper) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveWhisper.ProtoReflect.Descriptor instead.
func (*LeaveWhisper) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{196}
}

type Ghost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ghost uint32 `protobuf:"varint,1,opt,name=ghost,proto3" json:"ghost,omitempty"`
	// why is this a uint32? it is in the original impl so.. it stays
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *Ghost) Reset() {
	*x = Ghost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ghost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ghost) ProtoMessage() {}

func (x *Ghost) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ghost.ProtoReflect.Descriptor instead.
func (*Ghost) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{197}
}

func (x *Ghost) GetGhost() uint32 {
	if x != nil {
		return x.Ghost
	}
	return 0
}

func (x *Ghost) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetEmoteV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emote    *string `protobuf:"bytes,1,opt,name=emote,proto3,oneof" json:"emote,omitempty"`
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
	Count    *uint32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *SetEmoteV2) Reset() {
	*x = SetEmoteV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEmoteV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEmoteV2) ProtoMessage() {}

func (x *SetEmoteV2) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEmoteV2.ProtoReflect.Descriptor instead.
func (*SetEmoteV2) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{198}
}

func (x *SetEmoteV2) GetEmote() string {
	if x != nil && x.Emote != nil {
		return *x.Emote
	}
	return ""
}

func (x *SetEmoteV2) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

func (x *SetEmoteV2) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type SetName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetName) Reset() {
	*x = SetName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetName) ProtoMessage() {}

func (x *SetName) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetName.ProtoReflect.Descriptor instead.
func (*SetName) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{199}
}

func (x *SetName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetName) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetTextStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextStatus string  `protobuf:"bytes,1,opt,name=textStatus,proto3" json:"textStatus,omitempty"`
	TargetId   *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetTextStatus) Reset() {
	*x = SetTextStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTextStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTextStatus) ProtoMessage() {}

func (x *SetTextStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTextStatus.ProtoReflect.Descriptor instead.
func (*SetTextStatus) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{200}
}

func (x *SetTextStatus) GetTextStatus() string {
	if x != nil {
		return x.TextStatus
	}
	return ""
}

func (x *SetTextStatus) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetPronouns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pronouns string  `protobuf:"bytes,1,opt,name=pronouns,proto3" json:"pronouns,omitempty"`
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetPronouns) Reset() {
	*x = SetPronouns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPronouns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPronouns) ProtoMessage() {}

func (x *SetPronouns) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPronouns.ProtoReflect.Descriptor instead.
func (*SetPronouns) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{201}
}

func (x *SetPronouns) GetPronouns() string {
	if x != nil {
		return x.Pronouns
	}
	return ""
}

func (x *SetPronouns) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetTitle) Reset() {
	*x = SetTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTitle) ProtoMessage() {}

func (x *SetTitle) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTitle.ProtoReflect.Descriptor instead.
func (*SetTitle) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{202}
}

func (x *SetTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SetTitle) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City     string  `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetCity) Reset() {
	*x = SetCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCity) ProtoMessage() {}

func (x *SetCity) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCity.ProtoReflect.Descriptor instead.
func (*SetCity) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{203}
}

func (x *SetCity) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *SetCity) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetCountry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country  string  `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetCountry) Reset() {
	*x = SetCountry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCountry) ProtoMessage() {}

func (x *SetCountry) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCountry.ProtoReflect.Descriptor instead.
func (*SetCountry) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{204}
}

func (x *SetCountry) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *SetCountry) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetStartDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate string  `protobuf:"bytes,1,opt,name=startDate,proto3" json:"startDate,omitempty"`
	TargetId  *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetStartDate) Reset() {
	*x = SetStartDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStartDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStartDate) ProtoMessage() {}

func (x *SetStartDate) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStartDate.ProtoReflect.Descriptor instead.
func (*SetStartDate) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{205}
}

func (x *SetStartDate) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *SetStartDate) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetTimezone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timezone string  `protobuf:"bytes,1,opt,name=timezone,proto3" json:"timezone,omitempty"`
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetTimezone) Reset() {
	*x = SetTimezone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTimezone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTimezone) ProtoMessage() {}

func (x *SetTimezone) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTimezone.ProtoReflect.Descriptor instead.
func (*SetTimezone) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{206}
}

func (x *SetTimezone) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *SetTimezone) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetPhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone    string  `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetPhone) Reset() {
	*x = SetPhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPhone) ProtoMessage() {}

func (x *SetPhone) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPhone.ProtoReflect.Descriptor instead.
func (*SetPhone) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{207}
}

func (x *SetPhone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SetPhone) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetDisplayEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayEmail string  `protobuf:"bytes,1,opt,name=displayEmail,proto3" json:"displayEmail,omitempty"`
	TargetId     *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetDisplayEmail) Reset() {
	*x = SetDisplayEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDisplayEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDisplayEmail) ProtoMessage() {}

func (x *SetDisplayEmail) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDisplayEmail.ProtoReflect.Descriptor instead.
func (*SetDisplayEmail) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{208}
}

func (x *SetDisplayEmail) GetDisplayEmail() string {
	if x != nil {
		return x.DisplayEmail
	}
	return ""
}

func (x *SetDisplayEmail) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string  `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	TargetId    *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetDescription) Reset() {
	*x = SetDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDescription) ProtoMessage() {}

func (x *SetDescription) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDescription.ProtoReflect.Descriptor instead.
func (*SetDescription) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{209}
}

func (x *SetDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SetDescription) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetProfileImageUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileImageUrl string  `protobuf:"bytes,1,opt,name=profileImageUrl,proto3" json:"profileImageUrl,omitempty"`
	TargetId        *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetProfileImageUrl) Reset() {
	*x = SetProfileImageUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProfileImageUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProfileImageUrl) ProtoMessage() {}

func (x *SetProfileImageUrl) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProfileImageUrl.ProtoReflect.Descriptor instead.
func (*SetProfileImageUrl) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{210}
}

func (x *SetProfileImageUrl) GetProfileImageUrl() string {
	if x != nil {
		return x.ProfileImageUrl
	}
	return ""
}

func (x *SetProfileImageUrl) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetPersonalImageUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonalImageUrl string  `protobuf:"bytes,1,opt,name=personalImageUrl,proto3" json:"personalImageUrl,omitempty"`
	TargetId         *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetPersonalImageUrl) Reset() {
	*x = SetPersonalImageUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPersonalImageUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPersonalImageUrl) ProtoMessage() {}

func (x *SetPersonalImageUrl) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPersonalImageUrl.ProtoReflect.Descriptor instead.
func (*SetPersonalImageUrl) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{211}
}

func (x *SetPersonalImageUrl) GetPersonalImageUrl() string {
	if x != nil {
		return x.PersonalImageUrl
	}
	return ""
}

func (x *SetPersonalImageUrl) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type Exit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Exit) Reset() {
	*x = Exit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exit) ProtoMessage() {}

func (x *Exit) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exit.ProtoReflect.Descriptor instead.
func (*Exit) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{212}
}

type Enter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       *PlayerInitInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof" json:"info,omitempty"`
	SpawnToken *string         `protobuf:"bytes,2,opt,name=spawnToken,proto3,oneof" json:"spawnToken,omitempty"`
	TargetId   *string         `protobuf:"bytes,3,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *Enter) Reset() {
	*x = Enter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enter) ProtoMessage() {}

func (x *Enter) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enter.ProtoReflect.Descriptor instead.
func (*Enter) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{213}
}

func (x *Enter) GetInfo() *PlayerInitInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Enter) GetSpawnToken() string {
	if x != nil && x.SpawnToken != nil {
		return *x.SpawnToken
	}
	return ""
}

func (x *Enter) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type PrecomputeEnter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterLocation *MapLocation `protobuf:"bytes,1,opt,name=enterLocation,proto3,oneof" json:"enterLocation,omitempty"`
	SpawnToken    *string      `protobuf:"bytes,2,opt,name=spawnToken,proto3,oneof" json:"spawnToken,omitempty"`
}

func (x *PrecomputeEnter) Reset() {
	*x = PrecomputeEnter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrecomputeEnter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrecomputeEnter) ProtoMessage() {}

func (x *PrecomputeEnter) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrecomputeEnter.ProtoReflect.Descriptor instead.
func (*PrecomputeEnter) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{214}
}

func (x *PrecomputeEnter) GetEnterLocation() *MapLocation {
	if x != nil {
		return x.EnterLocation
	}
	return nil
}

func (x *PrecomputeEnter) GetSpawnToken() string {
	if x != nil && x.SpawnToken != nil {
		return *x.SpawnToken
	}
	return ""
}

type SetEmojiStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmojiStatus string  `protobuf:"bytes,1,opt,name=emojiStatus,proto3" json:"emojiStatus,omitempty"`
	TargetId    *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetEmojiStatus) Reset() {
	*x = SetEmojiStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEmojiStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEmojiStatus) ProtoMessage() {}

func (x *SetEmojiStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEmojiStatus.ProtoReflect.Descriptor instead.
func (*SetEmojiStatus) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{215}
}

func (x *SetEmojiStatus) GetEmojiStatus() string {
	if x != nil {
		return x.EmojiStatus
	}
	return ""
}

func (x *SetEmojiStatus) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type Teleport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId     string                    `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	X         uint32                    `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y         uint32                    `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	TargetId  *string                   `protobuf:"bytes,4,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
	Direction *SpriteDirectionEnum_ENUM `protobuf:"varint,5,opt,name=direction,proto3,enum=gathertown.SpriteDirectionEnum_ENUM,oneof" json:"direction,omitempty"`
}

func (x *Teleport) Reset() {
	*x = Teleport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Teleport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Teleport) ProtoMessage() {}

func (x *Teleport) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Teleport.ProtoReflect.Descriptor instead.
func (*Teleport) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{216}
}

func (x *Teleport) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *Teleport) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Teleport) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Teleport) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

func (x *Teleport) GetDirection() SpriteDirectionEnum_ENUM {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return SpriteDirectionEnum_Stand
}

type Spawn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpawnToken string `protobuf:"bytes,1,opt,name=spawnToken,proto3" json:"spawnToken,omitempty"`
}

func (x *Spawn) Reset() {
	*x = Spawn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spawn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spawn) ProtoMessage() {}

func (x *Spawn) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spawn.ProtoReflect.Descriptor instead.
func (*Spawn) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{217}
}

func (x *Spawn) GetSpawnToken() string {
	if x != nil {
		return x.SpawnToken
	}
	return ""
}

type Respawn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Respawn) Reset() {
	*x = Respawn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Respawn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Respawn) ProtoMessage() {}

func (x *Respawn) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Respawn.ProtoReflect.Descriptor instead.
func (*Respawn) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{218}
}

type RespawnAtDesk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespawnAtDesk) Reset() {
	*x = RespawnAtDesk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespawnAtDesk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespawnAtDesk) ProtoMessage() {}

func (x *RespawnAtDesk) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespawnAtDesk.ProtoReflect.Descriptor instead.
func (*RespawnAtDesk) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{219}
}

type RequestToJoinNook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NookId string  `protobuf:"bytes,1,opt,name=nookId,proto3" json:"nookId,omitempty"`
	MapId  string  `protobuf:"bytes,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Name   *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *RequestToJoinNook) Reset() {
	*x = RequestToJoinNook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestToJoinNook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestToJoinNook) ProtoMessage() {}

func (x *RequestToJoinNook) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestToJoinNook.ProtoReflect.Descriptor instead.
func (*RequestToJoinNook) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{220}
}

func (x *RequestToJoinNook) GetNookId() string {
	if x != nil {
		return x.NookId
	}
	return ""
}

func (x *RequestToJoinNook) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *RequestToJoinNook) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type UpdateNookPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	NookId   string `protobuf:"bytes,2,opt,name=nookId,proto3" json:"nookId,omitempty"`
	Granted  bool   `protobuf:"varint,3,opt,name=granted,proto3" json:"granted,omitempty"`
}

func (x *UpdateNookPermission) Reset() {
	*x = UpdateNookPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNookPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNookPermission) ProtoMessage() {}

func (x *UpdateNookPermission) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNookPermission.ProtoReflect.Descriptor instead.
func (*UpdateNookPermission) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{221}
}

func (x *UpdateNookPermission) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *UpdateNookPermission) GetNookId() string {
	if x != nil {
		return x.NookId
	}
	return ""
}

func (x *UpdateNookPermission) GetGranted() bool {
	if x != nil {
		return x.Granted
	}
	return false
}

type Init struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	// Types that are assignable to Auth:
	//	*Init_Token
	//	*Init_ApiKey
	Auth isInit_Auth `protobuf_oneof:"auth"`
}

func (x *Init) Reset() {
	*x = Init{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Init) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Init) ProtoMessage() {}

func (x *Init) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Init.ProtoReflect.Descriptor instead.
func (*Init) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{222}
}

func (x *Init) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (m *Init) GetAuth() isInit_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (x *Init) GetToken() string {
	if x, ok := x.GetAuth().(*Init_Token); ok {
		return x.Token
	}
	return ""
}

func (x *Init) GetApiKey() string {
	if x, ok := x.GetAuth().(*Init_ApiKey); ok {
		return x.ApiKey
	}
	return ""
}

type isInit_Auth interface {
	isInit_Auth()
}

type Init_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

type Init_ApiKey struct {
	ApiKey string `protobuf:"bytes,3,opt,name=apiKey,proto3,oneof"`
}

func (*Init_Token) isInit_Auth() {}

func (*Init_ApiKey) isInit_Auth() {}

type MapAddObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId  string      `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Object *WireObject `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *MapAddObject) Reset() {
	*x = MapAddObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapAddObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapAddObject) ProtoMessage() {}

func (x *MapAddObject) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapAddObject.ProtoReflect.Descriptor instead.
func (*MapAddObject) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{223}
}

func (x *MapAddObject) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapAddObject) GetObject() *WireObject {
	if x != nil {
		return x.Object
	}
	return nil
}

type MapUpdateObjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId                string                 `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	Objects              map[string]*WireObject `protobuf:"bytes,2,rep,name=objects,proto3" json:"objects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UpdatesAreOverwrites *bool                  `protobuf:"varint,3,opt,name=updatesAreOverwrites,proto3,oneof" json:"updatesAreOverwrites,omitempty"`
}

func (x *MapUpdateObjects) Reset() {
	*x = MapUpdateObjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUpdateObjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUpdateObjects) ProtoMessage() {}

func (x *MapUpdateObjects) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUpdateObjects.ProtoReflect.Descriptor instead.
func (*MapUpdateObjects) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{224}
}

func (x *MapUpdateObjects) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapUpdateObjects) GetObjects() map[string]*WireObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *MapUpdateObjects) GetUpdatesAreOverwrites() bool {
	if x != nil && x.UpdatesAreOverwrites != nil {
		return *x.UpdatesAreOverwrites
	}
	return false
}

type ShootConfetti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId *string `protobuf:"bytes,1,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *ShootConfetti) Reset() {
	*x = ShootConfetti{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShootConfetti) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShootConfetti) ProtoMessage() {}

func (x *ShootConfetti) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShootConfetti.ProtoReflect.Descriptor instead.
func (*ShootConfetti) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{225}
}

func (x *ShootConfetti) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetEventStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventStatus string  `protobuf:"bytes,1,opt,name=eventStatus,proto3" json:"eventStatus,omitempty"`
	TargetId    *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetEventStatus) Reset() {
	*x = SetEventStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEventStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEventStatus) ProtoMessage() {}

func (x *SetEventStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEventStatus.ProtoReflect.Descriptor instead.
func (*SetEventStatus) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{226}
}

func (x *SetEventStatus) GetEventStatus() string {
	if x != nil {
		return x.EventStatus
	}
	return ""
}

func (x *SetEventStatus) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetInConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InConversation bool    `protobuf:"varint,1,opt,name=inConversation,proto3" json:"inConversation,omitempty"`
	TargetId       *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetInConversation) Reset() {
	*x = SetInConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInConversation) ProtoMessage() {}

func (x *SetInConversation) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInConversation.ProtoReflect.Descriptor instead.
func (*SetInConversation) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{227}
}

func (x *SetInConversation) GetInConversation() bool {
	if x != nil {
		return x.InConversation
	}
	return false
}

func (x *SetInConversation) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetCurrentArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentArea string  `protobuf:"bytes,1,opt,name=currentArea,proto3" json:"currentArea,omitempty"`
	TargetId    *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetCurrentArea) Reset() {
	*x = SetCurrentArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCurrentArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCurrentArea) ProtoMessage() {}

func (x *SetCurrentArea) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCurrentArea.ProtoReflect.Descriptor instead.
func (*SetCurrentArea) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{228}
}

func (x *SetCurrentArea) GetCurrentArea() string {
	if x != nil {
		return x.CurrentArea
	}
	return ""
}

func (x *SetCurrentArea) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetVehicleId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleId string  `protobuf:"bytes,1,opt,name=vehicleId,proto3" json:"vehicleId,omitempty"`
	TargetId  *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
	Action    *string `protobuf:"bytes,3,opt,name=action,proto3,oneof" json:"action,omitempty"`
}

func (x *SetVehicleId) Reset() {
	*x = SetVehicleId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVehicleId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVehicleId) ProtoMessage() {}

func (x *SetVehicleId) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVehicleId.ProtoReflect.Descriptor instead.
func (*SetVehicleId) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{229}
}

func (x *SetVehicleId) GetVehicleId() string {
	if x != nil {
		return x.VehicleId
	}
	return ""
}

func (x *SetVehicleId) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

func (x *SetVehicleId) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

type SetSpeedModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeedModifier float32 `protobuf:"fixed32,1,opt,name=speedModifier,proto3" json:"speedModifier,omitempty"`
	TargetId      *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetSpeedModifier) Reset() {
	*x = SetSpeedModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSpeedModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSpeedModifier) ProtoMessage() {}

func (x *SetSpeedModifier) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSpeedModifier.ProtoReflect.Descriptor instead.
func (*SetSpeedModifier) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{230}
}

func (x *SetSpeedModifier) GetSpeedModifier() float32 {
	if x != nil {
		return x.SpeedModifier
	}
	return 0
}

func (x *SetSpeedModifier) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetIsAlone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAlone  bool    `protobuf:"varint,1,opt,name=isAlone,proto3" json:"isAlone,omitempty"`
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetIsAlone) Reset() {
	*x = SetIsAlone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIsAlone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIsAlone) ProtoMessage() {}

func (x *SetIsAlone) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIsAlone.ProtoReflect.Descriptor instead.
func (*SetIsAlone) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{231}
}

func (x *SetIsAlone) GetIsAlone() bool {
	if x != nil {
		return x.IsAlone
	}
	return false
}

func (x *SetIsAlone) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetIsMobile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMobile bool `protobuf:"varint,1,opt,name=isMobile,proto3" json:"isMobile,omitempty"`
}

func (x *SetIsMobile) Reset() {
	*x = SetIsMobile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIsMobile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIsMobile) ProtoMessage() {}

func (x *SetIsMobile) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIsMobile.ProtoReflect.Descriptor instead.
func (*SetIsMobile) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{232}
}

func (x *SetIsMobile) GetIsMobile() bool {
	if x != nil {
		return x.IsMobile
	}
	return false
}

type PlaySound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src      string  `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Volume   float32 `protobuf:"fixed32,2,opt,name=volume,proto3" json:"volume,omitempty"`
	TargetId *string `protobuf:"bytes,3,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *PlaySound) Reset() {
	*x = PlaySound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySound) ProtoMessage() {}

func (x *PlaySound) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySound.ProtoReflect.Descriptor instead.
func (*PlaySound) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{233}
}

func (x *PlaySound) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *PlaySound) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *PlaySound) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type StopSound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src      string  `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	TargetId *string `protobuf:"bytes,3,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *StopSound) Reset() {
	*x = StopSound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSound) ProtoMessage() {}

func (x *StopSound) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSound.ProtoReflect.Descriptor instead.
func (*StopSound) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{234}
}

func (x *StopSound) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *StopSound) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetFocusModeEndTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FocusModeEndTime string  `protobuf:"bytes,1,opt,name=focusModeEndTime,proto3" json:"focusModeEndTime,omitempty"`
	TargetId         *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetFocusModeEndTime) Reset() {
	*x = SetFocusModeEndTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFocusModeEndTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFocusModeEndTime) ProtoMessage() {}

func (x *SetFocusModeEndTime) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFocusModeEndTime.ProtoReflect.Descriptor instead.
func (*SetFocusModeEndTime) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{235}
}

func (x *SetFocusModeEndTime) GetFocusModeEndTime() string {
	if x != nil {
		return x.FocusModeEndTime
	}
	return ""
}

func (x *SetFocusModeEndTime) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetItemString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemString string  `protobuf:"bytes,1,opt,name=itemString,proto3" json:"itemString,omitempty"`
	TargetId   *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetItemString) Reset() {
	*x = SetItemString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetItemString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetItemString) ProtoMessage() {}

func (x *SetItemString) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetItemString.ProtoReflect.Descriptor instead.
func (*SetItemString) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{236}
}

func (x *SetItemString) GetItemString() string {
	if x != nil {
		return x.ItemString
	}
	return ""
}

func (x *SetItemString) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type TriggerObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId *string `protobuf:"bytes,1,opt,name=mapId,proto3,oneof" json:"mapId,omitempty"`
	Key   *string `protobuf:"bytes,2,opt,name=key,proto3,oneof" json:"key,omitempty"`
}

func (x *TriggerObject) Reset() {
	*x = TriggerObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerObject) ProtoMessage() {}

func (x *TriggerObject) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerObject.ProtoReflect.Descriptor instead.
func (*TriggerObject) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{237}
}

func (x *TriggerObject) GetMapId() string {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return ""
}

func (x *TriggerObject) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type CustomAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Payload    string   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Recipients []string `protobuf:"bytes,3,rep,name=recipients,proto3" json:"recipients,omitempty"`
	SendToAll  *bool    `protobuf:"varint,4,opt,name=sendToAll,proto3,oneof" json:"sendToAll,omitempty"`
}

func (x *CustomAction) Reset() {
	*x = CustomAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomAction) ProtoMessage() {}

func (x *CustomAction) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomAction.ProtoReflect.Descriptor instead.
func (*CustomAction) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{238}
}

func (x *CustomAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomAction) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *CustomAction) GetRecipients() []string {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *CustomAction) GetSendToAll() bool {
	if x != nil && x.SendToAll != nil {
		return *x.SendToAll
	}
	return false
}

type SetFollowTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowTarget string  `protobuf:"bytes,1,opt,name=followTarget,proto3" json:"followTarget,omitempty"`
	TargetId     *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetFollowTarget) Reset() {
	*x = SetFollowTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFollowTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFollowTarget) ProtoMessage() {}

func (x *SetFollowTarget) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFollowTarget.ProtoReflect.Descriptor instead.
func (*SetFollowTarget) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{239}
}

func (x *SetFollowTarget) GetFollowTarget() string {
	if x != nil {
		return x.FollowTarget
	}
	return ""
}

func (x *SetFollowTarget) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type RequestToLead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Snapshot string `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *RequestToLead) Reset() {
	*x = RequestToLead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestToLead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestToLead) ProtoMessage() {}

func (x *RequestToLead) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestToLead.ProtoReflect.Descriptor instead.
func (*RequestToLead) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{240}
}

func (x *RequestToLead) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *RequestToLead) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

type EnterPortal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUrl    string  `protobuf:"bytes,1,opt,name=targetUrl,proto3" json:"targetUrl,omitempty"`
	BypassPrompt *bool   `protobuf:"varint,2,opt,name=bypassPrompt,proto3,oneof" json:"bypassPrompt,omitempty"`
	TargetId     *string `protobuf:"bytes,3,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *EnterPortal) Reset() {
	*x = EnterPortal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterPortal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterPortal) ProtoMessage() {}

func (x *EnterPortal) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterPortal.ProtoReflect.Descriptor instead.
func (*EnterPortal) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{241}
}

func (x *EnterPortal) GetTargetUrl() string {
	if x != nil {
		return x.TargetUrl
	}
	return ""
}

func (x *EnterPortal) GetBypassPrompt() bool {
	if x != nil && x.BypassPrompt != nil {
		return *x.BypassPrompt
	}
	return false
}

func (x *EnterPortal) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetManualVideoSrc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManualVideoSrc string  `protobuf:"bytes,1,opt,name=manualVideoSrc,proto3" json:"manualVideoSrc,omitempty"`
	TargetId       *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetManualVideoSrc) Reset() {
	*x = SetManualVideoSrc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetManualVideoSrc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetManualVideoSrc) ProtoMessage() {}

func (x *SetManualVideoSrc) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetManualVideoSrc.ProtoReflect.Descriptor instead.
func (*SetManualVideoSrc) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{242}
}

func (x *SetManualVideoSrc) GetManualVideoSrc() string {
	if x != nil {
		return x.ManualVideoSrc
	}
	return ""
}

func (x *SetManualVideoSrc) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type SetSubtitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtitle string  `protobuf:"bytes,1,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetSubtitle) Reset() {
	*x = SetSubtitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSubtitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubtitle) ProtoMessage() {}

func (x *SetSubtitle) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubtitle.ProtoReflect.Descriptor instead.
func (*SetSubtitle) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{243}
}

func (x *SetSubtitle) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *SetSubtitle) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type MapCommitsChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId    string `protobuf:"bytes,1,opt,name=mapId,proto3" json:"mapId,omitempty"`
	UpdateId uint64 `protobuf:"varint,2,opt,name=updateId,proto3" json:"updateId,omitempty"`
}

func (x *MapCommitsChanges) Reset() {
	*x = MapCommitsChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapCommitsChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapCommitsChanges) ProtoMessage() {}

func (x *MapCommitsChanges) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapCommitsChanges.ProtoReflect.Descriptor instead.
func (*MapCommitsChanges) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{244}
}

func (x *MapCommitsChanges) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MapCommitsChanges) GetUpdateId() uint64 {
	if x != nil {
		return x.UpdateId
	}
	return 0
}

type SpeakerUpdatesSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId               string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	CustomizeRoomEnabled    *bool  `protobuf:"varint,2,opt,name=customizeRoomEnabled,proto3,oneof" json:"customizeRoomEnabled,omitempty"`
	ChatEnabled             *bool  `protobuf:"varint,3,opt,name=chatEnabled,proto3,oneof" json:"chatEnabled,omitempty"`
	QaEnabled               *bool  `protobuf:"varint,4,opt,name=qaEnabled,proto3,oneof" json:"qaEnabled,omitempty"`
	ApproveQuestionsEnabled *bool  `protobuf:"varint,5,opt,name=approveQuestionsEnabled,proto3,oneof" json:"approveQuestionsEnabled,omitempty"`
	MassMuteEnabled         *bool  `protobuf:"varint,6,opt,name=massMuteEnabled,proto3,oneof" json:"massMuteEnabled,omitempty"`
}

func (x *SpeakerUpdatesSession) Reset() {
	*x = SpeakerUpdatesSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerUpdatesSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerUpdatesSession) ProtoMessage() {}

func (x *SpeakerUpdatesSession) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerUpdatesSession.ProtoReflect.Descriptor instead.
func (*SpeakerUpdatesSession) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{245}
}

func (x *SpeakerUpdatesSession) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SpeakerUpdatesSession) GetCustomizeRoomEnabled() bool {
	if x != nil && x.CustomizeRoomEnabled != nil {
		return *x.CustomizeRoomEnabled
	}
	return false
}

func (x *SpeakerUpdatesSession) GetChatEnabled() bool {
	if x != nil && x.ChatEnabled != nil {
		return *x.ChatEnabled
	}
	return false
}

func (x *SpeakerUpdatesSession) GetQaEnabled() bool {
	if x != nil && x.QaEnabled != nil {
		return *x.QaEnabled
	}
	return false
}

func (x *SpeakerUpdatesSession) GetApproveQuestionsEnabled() bool {
	if x != nil && x.ApproveQuestionsEnabled != nil {
		return *x.ApproveQuestionsEnabled
	}
	return false
}

func (x *SpeakerUpdatesSession) GetMassMuteEnabled() bool {
	if x != nil && x.MassMuteEnabled != nil {
		return *x.MassMuteEnabled
	}
	return false
}

type ChatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId   string `protobuf:"bytes,1,opt,name=senderId,proto3" json:"senderId,omitempty"`
	SenderName string `protobuf:"bytes,2,opt,name=senderName,proto3" json:"senderName,omitempty"`
	Contents   string `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *ChatReply) Reset() {
	*x = ChatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatReply) ProtoMessage() {}

func (x *ChatReply) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatReply.ProtoReflect.Descriptor instead.
func (*ChatReply) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{246}
}

func (x *ChatReply) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *ChatReply) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *ChatReply) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type ChatMessageUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ChatMessageUpdated) Reset() {
	*x = ChatMessageUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessageUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageUpdated) ProtoMessage() {}

func (x *ChatMessageUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageUpdated.ProtoReflect.Descriptor instead.
func (*ChatMessageUpdated) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{247}
}

func (x *ChatMessageUpdated) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SendCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command  string  `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SendCommand) Reset() {
	*x = SendCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCommand) ProtoMessage() {}

func (x *SendCommand) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCommand.ProtoReflect.Descriptor instead.
func (*SendCommand) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{248}
}

func (x *SendCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *SendCommand) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type RegisterCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *RegisterCommand) Reset() {
	*x = RegisterCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCommand) ProtoMessage() {}

func (x *RegisterCommand) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCommand.ProtoReflect.Descriptor instead.
func (*RegisterCommand) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{249}
}

func (x *RegisterCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type Craft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs map[string]int32 `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Craft) Reset() {
	*x = Craft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Craft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Craft) ProtoMessage() {}

func (x *Craft) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Craft.ProtoReflect.Descriptor instead.
func (*Craft) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{250}
}

func (x *Craft) GetInputs() map[string]int32 {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type HighFive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId string  `protobuf:"bytes,1,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Emote    *string `protobuf:"bytes,2,opt,name=emote,proto3,oneof" json:"emote,omitempty"`
}

func (x *HighFive) Reset() {
	*x = HighFive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighFive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighFive) ProtoMessage() {}

func (x *HighFive) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighFive.ProtoReflect.Descriptor instead.
func (*HighFive) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{251}
}

func (x *HighFive) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *HighFive) GetEmote() string {
	if x != nil && x.Emote != nil {
		return *x.Emote
	}
	return ""
}

type AddInventoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   string `protobuf:"bytes,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
	Delta    uint64 `protobuf:"varint,2,opt,name=delta,proto3" json:"delta,omitempty"`
	TargetId string `protobuf:"bytes,3,opt,name=targetId,proto3" json:"targetId,omitempty"`
}

func (x *AddInventoryItem) Reset() {
	*x = AddInventoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInventoryItem) ProtoMessage() {}

func (x *AddInventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInventoryItem.ProtoReflect.Descriptor instead.
func (*AddInventoryItem) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{252}
}

func (x *AddInventoryItem) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *AddInventoryItem) GetDelta() uint64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *AddInventoryItem) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

type RemoveInventoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   string  `protobuf:"bytes,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
	Delta    uint64  `protobuf:"varint,2,opt,name=delta,proto3" json:"delta,omitempty"`
	TargetId *string `protobuf:"bytes,3,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *RemoveInventoryItem) Reset() {
	*x = RemoveInventoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInventoryItem) ProtoMessage() {}

func (x *RemoveInventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInventoryItem.ProtoReflect.Descriptor instead.
func (*RemoveInventoryItem) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{253}
}

func (x *RemoveInventoryItem) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *RemoveInventoryItem) GetDelta() uint64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *RemoveInventoryItem) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type HipToBeSquare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *HipToBeSquare) Reset() {
	*x = HipToBeSquare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HipToBeSquare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HipToBeSquare) ProtoMessage() {}

func (x *HipToBeSquare) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HipToBeSquare.ProtoReflect.Descriptor instead.
func (*HipToBeSquare) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{254}
}

func (x *HipToBeSquare) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TriggerInventoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId    string `protobuf:"bytes,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
	AbilityId string `protobuf:"bytes,2,opt,name=abilityId,proto3" json:"abilityId,omitempty"`
}

func (x *TriggerInventoryItem) Reset() {
	*x = TriggerInventoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerInventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerInventoryItem) ProtoMessage() {}

func (x *TriggerInventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerInventoryItem.ProtoReflect.Descriptor instead.
func (*TriggerInventoryItem) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{255}
}

func (x *TriggerInventoryItem) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *TriggerInventoryItem) GetAbilityId() string {
	if x != nil {
		return x.AbilityId
	}
	return ""
}

type SetAllowScreenPointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowScreenPointer bool `protobuf:"varint,1,opt,name=allowScreenPointer,proto3" json:"allowScreenPointer,omitempty"`
}

func (x *SetAllowScreenPointer) Reset() {
	*x = SetAllowScreenPointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAllowScreenPointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllowScreenPointer) ProtoMessage() {}

func (x *SetAllowScreenPointer) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllowScreenPointer.ProtoReflect.Descriptor instead.
func (*SetAllowScreenPointer) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{256}
}

func (x *SetAllowScreenPointer) GetAllowScreenPointer() bool {
	if x != nil {
		return x.AllowScreenPointer
	}
	return false
}

type SetDeskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeskInfo *DeskInfoV2 `protobuf:"bytes,1,opt,name=deskInfo,proto3" json:"deskInfo,omitempty"`
	TargetId *string     `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetDeskInfo) Reset() {
	*x = SetDeskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeskInfo) ProtoMessage() {}

func (x *SetDeskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeskInfo.ProtoReflect.Descriptor instead.
func (*SetDeskInfo) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{257}
}

func (x *SetDeskInfo) GetDeskInfo() *DeskInfoV2 {
	if x != nil {
		return x.DeskInfo
	}
	return nil
}

func (x *SetDeskInfo) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type Wave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User    string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	IsReply bool   `protobuf:"varint,2,opt,name=isReply,proto3" json:"isReply,omitempty"`
}

func (x *Wave) Reset() {
	*x = Wave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wave) ProtoMessage() {}

func (x *Wave) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wave.ProtoReflect.Descriptor instead.
func (*Wave) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{258}
}

func (x *Wave) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Wave) GetIsReply() bool {
	if x != nil {
		return x.IsReply
	}
	return false
}

type SetAway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Away     bool    `protobuf:"varint,1,opt,name=away,proto3" json:"away,omitempty"`
	TargetId *string `protobuf:"bytes,2,opt,name=targetId,proto3,oneof" json:"targetId,omitempty"`
}

func (x *SetAway) Reset() {
	*x = SetAway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAway) ProtoMessage() {}

func (x *SetAway) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAway.ProtoReflect.Descriptor instead.
func (*SetAway) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{259}
}

func (x *SetAway) GetAway() bool {
	if x != nil {
		return x.Away
	}
	return false
}

func (x *SetAway) GetTargetId() string {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return ""
}

type StartRecording struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NookId       string `protobuf:"bytes,1,opt,name=nookId,proto3" json:"nookId,omitempty"`
	Initializing *bool  `protobuf:"varint,2,opt,name=initializing,proto3,oneof" json:"initializing,omitempty"`
}

func (x *StartRecording) Reset() {
	*x = StartRecording{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRecording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRecording) ProtoMessage() {}

func (x *StartRecording) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRecording.ProtoReflect.Descriptor instead.
func (*StartRecording) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{260}
}

func (x *StartRecording) GetNookId() string {
	if x != nil {
		return x.NookId
	}
	return ""
}

func (x *StartRecording) GetInitializing() bool {
	if x != nil && x.Initializing != nil {
		return *x.Initializing
	}
	return false
}

type RequestAccessViaCheckIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                     string    `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Canceled                   bool      `protobuf:"varint,2,opt,name=canceled,proto3" json:"canceled,omitempty"`
	Name                       *string   `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	CurrentlyEquippedWearables *DBOutfit `protobuf:"bytes,5,opt,name=currentlyEquippedWearables,proto3,oneof" json:"currentlyEquippedWearables,omitempty"`
}

func (x *RequestAccessViaCheckIn) Reset() {
	*x = RequestAccessViaCheckIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAccessViaCheckIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAccessViaCheckIn) ProtoMessage() {}

func (x *RequestAccessViaCheckIn) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAccessViaCheckIn.ProtoReflect.Descriptor instead.
func (*RequestAccessViaCheckIn) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{261}
}

func (x *RequestAccessViaCheckIn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RequestAccessViaCheckIn) GetCanceled() bool {
	if x != nil {
		return x.Canceled
	}
	return false
}

func (x *RequestAccessViaCheckIn) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RequestAccessViaCheckIn) GetCurrentlyEquippedWearables() *DBOutfit {
	if x != nil {
		return x.CurrentlyEquippedWearables
	}
	return nil
}

type RespondToAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string                                   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Accepted     bool                                     `protobuf:"varint,2,opt,name=accepted,proto3" json:"accepted,omitempty"`
	LocationType *RespondToAccessRequest_LocationTypeEnum `protobuf:"varint,3,opt,name=locationType,proto3,enum=gathertown.RespondToAccessRequest_LocationTypeEnum,oneof" json:"locationType,omitempty"`
}

func (x *RespondToAccessRequest) Reset() {
	*x = RespondToAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondToAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondToAccessRequest) ProtoMessage() {}

func (x *RespondToAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondToAccessRequest.ProtoReflect.Descriptor instead.
func (*RespondToAccessRequest) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{262}
}

func (x *RespondToAccessRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RespondToAccessRequest) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *RespondToAccessRequest) GetLocationType() RespondToAccessRequest_LocationTypeEnum {
	if x != nil && x.LocationType != nil {
		return *x.LocationType
	}
	return RespondToAccessRequest_MyLocation
}

type SetSpaceRolePermissionOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role       string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Permission string `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"`
	Enabled    bool   `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetSpaceRolePermissionOverride) Reset() {
	*x = SetSpaceRolePermissionOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSpaceRolePermissionOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSpaceRolePermissionOverride) ProtoMessage() {}

func (x *SetSpaceRolePermissionOverride) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSpaceRolePermissionOverride.ProtoReflect.Descriptor instead.
func (*SetSpaceRolePermissionOverride) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{263}
}

func (x *SetSpaceRolePermissionOverride) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *SetSpaceRolePermissionOverride) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *SetSpaceRolePermissionOverride) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type JoinChimeMeeting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaRegion *string `protobuf:"bytes,1,opt,name=mediaRegion,proto3,oneof" json:"mediaRegion,omitempty"`
}

func (x *JoinChimeMeeting) Reset() {
	*x = JoinChimeMeeting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gathertown_events_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinChimeMeeting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChimeMeeting) ProtoMessage() {}

func (x *JoinChimeMeeting) ProtoReflect() protoreflect.Message {
	mi := &file_gathertown_events_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChimeMeeting.ProtoReflect.Descriptor instead.
func (*JoinChimeMeeting) Descriptor() ([]byte, []int) {
	return file_gathertown_events_proto_rawDescGZIP(), []int{264}
}

func (x *JoinChimeMeeting) GetMediaRegion() string {
	if x != nil && x.MediaRegion != nil {
		return *x.MediaRegion
	}
	return ""
}

var File_gathertown_events_proto protoreflect.FileDescriptor

var file_gathertown_events_proto_rawDesc = []byte{
	0x0a, 0x17, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x22, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x9b, 0x01, 0x0a, 0x04,
	0x45, 0x4e, 0x55, 0x4d, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x6f, 0x77,
	0x6e, 0x41, 0x6c, 0x74, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x70, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x55, 0x70, 0x41, 0x6c, 0x74, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x65, 0x66,
	0x74, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x65, 0x66, 0x74, 0x41, 0x6c, 0x74, 0x10, 0x06,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x41, 0x6c, 0x74, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x61, 0x6e,
	0x63, 0x65, 0x31, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x10,
	0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x33, 0x10, 0x0b, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x34, 0x10, 0x0c, 0x22, 0x4d, 0x0a, 0x11, 0x4d, 0x6f, 0x76,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x38,
	0x0a, 0x04, 0x45, 0x4e, 0x55, 0x4d, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x55,
	0x70, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x04, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0xab, 0x01, 0x0a,
	0x04, 0x45, 0x4e, 0x55, 0x4d, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x53,
	0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x54, 0x45, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x44, 0x41,
	0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x41, 0x4c,
	0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x4c,
	0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x09, 0x22, 0xe0, 0x04, 0x0a, 0x0e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x01, 0x78, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x01, 0x79, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x75,
	0x73, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x04, 0x62, 0x75, 0x73, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0b, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x59, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x44, 0x42, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x48, 0x08, 0x52, 0x1a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x69,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x70, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0b, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x70, 0x63, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x78, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x79,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x75, 0x73,
	0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x73, 0x4e, 0x70, 0x63, 0x22, 0xd6, 0x02,
	0x0a, 0x08, 0x44, 0x42, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x69, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x69,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x48,
	0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x68, 0x6f, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68,
	0x6f, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x68, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6a, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x6a, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6a, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x60, 0x0a, 0x1c, 0x57, 0x69, 0x72, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x1a, 0x57, 0x69, 0x72,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x69,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x12, 0x75, 0x73, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x75, 0x73, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x22,
	0xf0, 0x03, 0x0a, 0x15, 0x57, 0x69, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x42, 0x0a, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x57, 0x69, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x68, 0x65, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x66, 0x72,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x0a, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x2e, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x53, 0x0a, 0x22, 0x70, 0x61, 0x75, 0x73, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x49, 0x66, 0x46, 0x70, 0x73, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x22, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x66,
	0x46, 0x70, 0x73, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x1a, 0x65, 0x0a, 0x0f, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x42, 0x25, 0x0a, 0x23, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49,
	0x66, 0x46, 0x70, 0x73, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x22, 0x84, 0x0b, 0x0a, 0x0a, 0x57, 0x69, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x11, 0x0a, 0x01, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x02, 0x52, 0x01, 0x78, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x01, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x58, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x07,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x58, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x59, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x07, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x59, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x0b, 0x6f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x0b, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x48,
	0x0a, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4a, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x11, 0x52, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x12, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x13, 0x52, 0x10, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6e,
	0x75, 0x6d, 0x47, 0x6f, 0x4b, 0x61, 0x72, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x17, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x47, 0x6f, 0x4b, 0x61, 0x72, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x0b, 0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x48, 0x18, 0x52, 0x0b, 0x73, 0x70, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x7a, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x19, 0x52, 0x06, 0x7a, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x58, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x04, 0x0a, 0x02, 0x5f, 0x78, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x79, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x58, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x59, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4a, 0x73,
	0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x75, 0x6d, 0x47, 0x6f, 0x4b, 0x61, 0x72, 0x74, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x7a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x85, 0x03, 0x0a, 0x0f, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x42, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x48, 0x01,
	0x52, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x12, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x22, 0x72, 0x0a, 0x12, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x70, 0x44, 0x65, 0x73,
	0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x6f, 0x62, 0x6a, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x03, 0x6f, 0x62,
	0x6a, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x58, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x58, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x59, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x59, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x6b, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x5a, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x70, 0x44, 0x65, 0x73, 0x6b,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x94, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32,
	0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x73, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x48, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x61, 0x70,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x49, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x0a, 0x4d, 0x61, 0x70, 0x41,
	0x6e, 0x64, 0x44, 0x65, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65,
	0x73, 0x6b, 0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x0c, 0x69, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x22, 0x57, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x58,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x68, 0x0a, 0x05, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x65, 0x64, 0x22, 0x3b, 0x0a, 0x0a, 0x4e, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x57,
	0x69, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0x24, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x2f, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x51, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x9a, 0x05, 0x0a, 0x08, 0x4e, 0x6f, 0x6f,
	0x6b, 0x44, 0x69, 0x66, 0x66, 0x12, 0x3b, 0x0a, 0x0a, 0x6e, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4e, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x73, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x08,
	0x62, 0x6f, 0x6f, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x48, 0x06, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x48, 0x07, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x69, 0x73, 0x49, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x65, 0x73, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x73, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x0a, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x6f, 0x6f, 0x6b,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x49,
	0x6e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x73, 0x44,
	0x65, 0x73, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27, 0x0a, 0x09, 0x57, 0x69, 0x72, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x22, 0x53,
	0x0a, 0x0a, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x70, 0x61,
	0x77, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x58, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x02, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x58, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x59, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x03, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x59, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x58, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x59, 0x22, 0x27, 0x0a, 0x09, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x05,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x72, 0x63, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x69,
	0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x07,
	0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x0c, 0x41,
	0x72, 0x65, 0x61, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x78,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x78, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x79,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x79, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x78,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x78, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x79,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x79, 0x32, 0x22, 0x6a, 0x0a, 0x08, 0x57,
	0x69, 0x72, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x3a, 0x0a, 0x06, 0x44, 0x42, 0x44, 0x65, 0x73,
	0x6b, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x41,
	0x72, 0x65, 0x61, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x56, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x74, 0x0a, 0x10, 0x4d,
	0x61, 0x70, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x79, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x77, 0x12,
	0x0c, 0x0a, 0x01, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x01, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x63, 0x0a, 0x19, 0x4d, 0x61,
	0x70, 0x53, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x13, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x8b, 0x01, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61,
	0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xde, 0x01,
	0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61,
	0x70, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x4e, 0x6f, 0x6f, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x21, 0x0a,
	0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x1a, 0x4e, 0x0a, 0x0a, 0x4e, 0x6f, 0x6f, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4e, 0x6f, 0x6f,
	0x6b, 0x44, 0x69, 0x66, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0x78,
	0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61,
	0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x57, 0x69, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x70, 0x61, 0x77, 0x6e,
	0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x54, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x06, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x77,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x73, 0x22, 0x53,
	0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x73, 0x22, 0x5c, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09,
	0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x09, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x72, 0x22, 0x77, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x0f, 0x4d,
	0x61, 0x70, 0x53, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x56, 0x32, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x61, 0x70, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x56, 0x32, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x41, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x41, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x1a, 0x52, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x57, 0x69, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x41, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0x5e,
	0x0a, 0x0a, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x73,
	0x0a, 0x11, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x4f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x75, 0x74,
	0x65, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6d, 0x75, 0x74, 0x65, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x22, 0x70, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x44, 0x72, 0x61, 0x77, 0x6e, 0x42, 0x47, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x42, 0x47, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x42, 0x47, 0x12, 0x1b, 0x0a,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x77,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x73, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x77, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0xd5, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x41, 0x72,
	0x65, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x12,
	0x1b, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x4e, 0x0a, 0x0a,
	0x41, 0x72, 0x65, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x3e, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x3b, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x61, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4d,
	0x69, 0x6e, 0x69, 0x4d, 0x61, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x70,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x76, 0x0a, 0x12, 0x4d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x22, 0x73, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x70, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x54,
	0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x0d, 0x74, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x11, 0x57, 0x69, 0x72, 0x65, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x72, 0x65,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x65, 0x61, 0x52, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73,
	0x12, 0x21, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x22, 0x77, 0x0a, 0x13, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x65, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x64, 0x0a, 0x0c, 0x4d, 0x61,
	0x70, 0x53, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x22, 0x8a, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x36,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x53,
	0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x25, 0x0a,
	0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xad, 0x03, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x33,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x55, 0x0a, 0x0e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x01, 0x79, 0x22, 0x4a, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xab, 0x50, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x26,
	0x0a, 0x04, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x48, 0x00,
	0x52, 0x04, 0x77, 0x61, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x70, 0x6f, 0x74,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x3b,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x57,
	0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x12, 0x53, 0x0a,
	0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x57, 0x68, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x73, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x57, 0x68, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x12, 0x56, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x73, 0x48, 0x00, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x56, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x54, 0x65,
	0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x00, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x54, 0x65,
	0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x15, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x73, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x49, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x73, 0x49, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x49, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x50, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x12, 0x50, 0x0a, 0x12, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x49, 0x64,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x65, 0x74, 0x73, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x56, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x65,
	0x74, 0x74, 0x69, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f,
	0x6f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x74, 0x74, 0x69, 0x48, 0x00, 0x52, 0x14, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x65,
	0x74, 0x74, 0x69, 0x12, 0x59, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62,
	0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x72, 0x65, 0x61, 0x48, 0x00, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x5c, 0x0a,
	0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x59, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x56,
	0x32, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x56, 0x32, 0x48, 0x00, 0x52, 0x15, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x56, 0x32, 0x12, 0x50, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x73, 0x47, 0x6f, 0x4b, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x47, 0x6f, 0x4b, 0x61, 0x72, 0x74, 0x49, 0x64, 0x48,
	0x00, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x47, 0x6f, 0x4b,
	0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x10, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x65, 0x0a, 0x19, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x19, 0x6d,
	0x61, 0x70, 0x53, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x65, 0x0a, 0x19, 0x6d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x48, 0x00, 0x52, 0x19, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x3e, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x73, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x6d,
	0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d,
	0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6d,
	0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x6d,
	0x61, 0x70, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x53, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4d,
	0x75, 0x74, 0x65, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x4f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x42, 0x47, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x42, 0x47, 0x48, 0x00, 0x52, 0x10,
	0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x42, 0x47,
	0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x3e, 0x0a,
	0x0c, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x12, 0x3b, 0x0a,
	0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x6d,
	0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x61,
	0x70, 0x53, 0x65, 0x74, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x73, 0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x73, 0x41, 0x6c, 0x6f, 0x6e,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49,
	0x73, 0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4a, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4a,
	0x6f, 0x69, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4a, 0x6f,
	0x69, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x12, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10,
	0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x53, 0x0a, 0x13, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65,
	0x74, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x48, 0x00,
	0x52, 0x13, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x5c, 0x0a, 0x16, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4d,
	0x69, 0x6e, 0x69, 0x4d, 0x61, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x70,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x73, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x73, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x73, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x0c,
	0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x58, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x50, 0x0a, 0x12,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x73, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x49, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x5c,
	0x0a, 0x16, 0x73, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x11,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x56,
	0x32, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x45,
	0x6d, 0x6f, 0x74, 0x65, 0x56, 0x32, 0x48, 0x00, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x32, 0x12, 0x68, 0x0a, 0x1a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x15, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x5e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x15, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x65, 0x74, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x54, 0x0a, 0x13, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x48,
	0x00, 0x52, 0x13, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x6e, 0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x73, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x14, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x5c, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x56, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x64, 0x12, 0x62, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x72, 0x63, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x72, 0x63, 0x48,
	0x00, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x72, 0x63, 0x12, 0x47, 0x0a, 0x0f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x73, 0x4e, 0x70, 0x63, 0x18, 0x71,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x73, 0x4e, 0x70,
	0x63, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49,
	0x73, 0x4e, 0x70, 0x63, 0x12, 0x50, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x73, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x53, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x73, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x4d, 0x6f, 0x76, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x6f, 0x76,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x4d, 0x6f,
	0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5c, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74,
	0x73, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x16,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x78, 0x53, 0x68, 0x61, 0x6b,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x46, 0x58, 0x53, 0x68, 0x61,
	0x6b, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x78, 0x53, 0x68,
	0x61, 0x6b, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x78, 0x53,
	0x68, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x46, 0x58,
	0x53, 0x68, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x66,
	0x78, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x50, 0x0a, 0x12,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x59,
	0x0a, 0x15, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x15, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x59, 0x0a, 0x15, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x7c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x53, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x48,
	0x00, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x17,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x48, 0x69, 0x67, 0x68, 0x46, 0x69, 0x76, 0x65, 0x73, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x46, 0x69, 0x76, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x46, 0x69, 0x76, 0x65,
	0x73, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x6f, 0x70, 0x73, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x68,
	0x69, 0x70, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x83, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x48, 0x69, 0x70, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x72, 0x61, 0x66, 0x74, 0x73, 0x18,
	0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x72, 0x61, 0x66, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x72, 0x61, 0x66, 0x74, 0x73,
	0x12, 0x6c, 0x0a, 0x1b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x18,
	0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x48,
	0x00, 0x52, 0x1b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x6f,
	0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x86,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x63, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x87, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x70, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x47, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x44, 0x65, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x44, 0x65, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x44, 0x65, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c,
	0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x8a, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x6f, 0x6b, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x0c,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x61, 0x74, 0x65, 0x73, 0x18, 0x8b, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x76, 0x65, 0x73, 0x18, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x76, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x76, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x12, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e,
	0x73, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x12, 0x48,
	0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x8f,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x5a, 0x0a, 0x15, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x48, 0x00,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x69, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18,
	0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x48, 0x00,
	0x52, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x66, 0x0a, 0x19,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x19, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x11, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x41, 0x77, 0x61, 0x79, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x41, 0x77, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x41, 0x77, 0x61, 0x79, 0x12, 0x57, 0x0a, 0x14, 0x6d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x69, 0x74,
	0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x69, 0x74, 0x73, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x61,
	0x70, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x69,
	0x74, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x43, 0x69, 0x74, 0x79, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x43, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x43, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x11, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x99,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x13, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x5a, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x15, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x64, 0x54, 0x6f, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x6f,
	0x48, 0x00, 0x52, 0x18, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x69, 0x0a, 0x1a,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x16,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0xa1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x81, 0x01, 0x0a, 0x22, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x22, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x18,
	0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x18,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x61,
	0x69, 0x73, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x24, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x24, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x5d, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0xa8, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x57, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61,
	0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x0f, 0x6d, 0x61,
	0x70, 0x53, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x56, 0x32, 0x18, 0xaa, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x56,
	0x32, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x56, 0x32, 0x12, 0x66, 0x0a, 0x19, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x19, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x57, 0x0a, 0x14,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x63, 0x68, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x74, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x43,
	0x68, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x3c,
	0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2b, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x54, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x54, 0x54, 0x22, 0x20, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x20, 0x0a, 0x04, 0x57,
	0x61, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a,
	0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x17, 0x0a, 0x05, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x6f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4a, 0x6f, 0x69,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0e, 0x47, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x22, 0xf3, 0x01, 0x0a, 0x0b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e,
	0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64,
	0x12, 0x11, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x01, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x01, 0x79, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x48,
	0x02, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x42, 0x04, 0x0a, 0x02,
	0x5f, 0x78, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x22, 0x3c, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75,
	0x73, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x75, 0x73, 0x79, 0x22, 0xcc,
	0x01, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a,
	0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x6f, 0x74, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x22,
	0x23, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65,
	0x6e, 0x63, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65,
	0x6e, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x22, 0x7c, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xa3, 0x03, 0x0a, 0x0b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e,
	0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x6e,
	0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x6f, 0x6f, 0x6b, 0x49, 0x64,
	0x22, 0x59, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x76, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x47, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x1f, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x3a,
	0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65,
	0x6e, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x13, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x68, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x6d, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x56, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e,
	0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x2b, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73,
	0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x58, 0x0a,
	0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x73, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x32, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x18,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x61,
	0x69, 0x73, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x69, 0x73,
	0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x22, 0x4c, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65,
	0x6e, 0x63, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x3a, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x4c, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x54, 0x65,
	0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x46,
	0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x6e,
	0x6f, 0x75, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x22, 0x3d, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x43, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x22, 0x43, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x49, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e,
	0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x46, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x3d, 0x0a, 0x0f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x52, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x4f, 0x0a, 0x15,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a,
	0x19, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e,
	0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x5e, 0x0a, 0x1a, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x46, 0x0a, 0x12, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x22, 0x4f, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x4f, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x73, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78,
	0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x42, 0x4f, 0x75, 0x74, 0x66,
	0x69, 0x74, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x4c,
	0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x73, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x22, 0x2f, 0x0a, 0x0f,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd9, 0x01,
	0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x01, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xbc, 0x03, 0x0a, 0x0c, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x16, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x68, 0x6f, 0x73, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x47, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x16, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x53,
	0x65, 0x6c, 0x66, 0x68, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x0c, 0x61, 0x67, 0x6f, 0x72, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x61, 0x74, 0x65,
	0x48, 0x01, 0x52, 0x0c, 0x61, 0x67, 0x6f, 0x72, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x61,
	0x74, 0x65, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x68, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x47, 0x61, 0x74, 0x65, 0x48, 0x03, 0x52, 0x0d, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x68, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x6f, 0x72, 0x61, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x57, 0x0a, 0x0c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x23, 0x0a, 0x0d, 0x57, 0x69, 0x72, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x1a, 0x58, 0x0a, 0x0f, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0f, 0x0a,
	0x0d, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x22, 0x6c,
	0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x79, 0x70, 0x61,
	0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22, 0x23, 0x0a, 0x0b,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49,
	0x64, 0x22, 0x3c, 0x0a, 0x12, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x49, 0x64,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x22,
	0x2c, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x65, 0x74, 0x74, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x4f, 0x0a,
	0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58,
	0x0a, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e,
	0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x22, 0x46, 0x0a, 0x12, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x47, 0x6f, 0x4b, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6f, 0x4b, 0x61, 0x72, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x4b, 0x61, 0x72, 0x74, 0x49,
	0x64, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x73, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65,
	0x6e, 0x63, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x43, 0x0a, 0x11, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x49, 0x73, 0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x6f, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x22,
	0x3b, 0x0a, 0x0f, 0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x73, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x72, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x0f,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72,
	0x63, 0x22, 0x5e, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x46,
	0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x46, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x3b, 0x0a, 0x0b, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5a, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x73, 0x49, 0x6e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x4c, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e,
	0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0x70, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b,
	0x65, 0x79, 0x22, 0x4a, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52,
	0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x48, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e,
	0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x58, 0x0a, 0x18,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x72, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x72, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x72, 0x63, 0x22, 0x3d, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x73, 0x49, 0x73, 0x4e, 0x70, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x4e, 0x70, 0x63, 0x22, 0x46, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x73, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x9d, 0x01,
	0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x72, 0x61, 0x66, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65,
	0x6e, 0x63, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x72, 0x61, 0x66, 0x74, 0x73, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x02,
	0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x58, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x58, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x59, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x59, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x58,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x58, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x59, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x59, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x61, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x65, 0x61, 0x73, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x58,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x59, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x61, 0x73,
	0x69, 0x6e, 0x67, 0x22, 0xe2, 0x01, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x64,
	0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x02,
	0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6c, 0x69, 0x6b, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x0d, 0x46, 0x58, 0x53,
	0x68, 0x61, 0x6b, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x0d, 0x46, 0x58, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0a,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x0f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x46, 0x69, 0x76, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x22, 0x44, 0x0a, 0x12, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0x31, 0x0a, 0x15, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x22, 0xc7, 0x02, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e,
	0x63, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x53, 0x0a,
	0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x01, 0x0a,
	0x11, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x64,
	0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65,
	0x6e, 0x63, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3d, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5e, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x44, 0x65, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x64,
	0x65, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x56, 0x32, 0x52, 0x08, 0x64, 0x65, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x2f, 0x0a, 0x11, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x22, 0x35, 0x0a, 0x1b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x73, 0x41, 0x77, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x61,
	0x77, 0x61, 0x79, 0x22, 0x7f, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x22, 0x9e, 0x02, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x1f,
	0x67, 0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x44, 0x42, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x64,
	0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x59, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x79, 0x0a, 0x1a, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x47, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x17, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x44, 0x65, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x41,
	0x6e, 0x64, 0x44, 0x65, 0x73, 0x6b, 0x48, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x44, 0x65, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x65,
	0x73, 0x6b, 0x73, 0x54, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d,
	0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x6b, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x6b, 0x73,
	0x54, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x44, 0x65, 0x73, 0x6b, 0x22, 0x72, 0x0a, 0x22, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2f, 0x0a, 0x11, 0x43,
	0x68, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x11,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x97, 0x45, 0x0a, 0x12,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x12, 0x53, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x44,
	0x0a, 0x0e, 0x73, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x73,
	0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x6f, 0x74,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x03, 0x62, 0x61,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x62, 0x61, 0x6e, 0x12,
	0x26, 0x0a, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x49, 0x6d,
	0x70, 0x61, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x49,
	0x6d, 0x70, 0x61, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74,
	0x49, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x48, 0x00, 0x52, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65,
	0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a,
	0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x6c, 0x79, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73,
	0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x53, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32,
	0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x54, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x67, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65,
	0x74, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x65, 0x74, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41,
	0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x74, 0x74, 0x69, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x74, 0x74, 0x69,
	0x48, 0x00, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x74, 0x74,
	0x69, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x53, 0x65, 0x74, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x47,
	0x0a, 0x0f, 0x73, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x47, 0x6f,
	0x4b, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x47, 0x6f, 0x4b, 0x61, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65,
	0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x10, 0x6d,
	0x61, 0x70, 0x53, 0x65, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4a, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x65, 0x0a, 0x19, 0x6d,
	0x61, 0x70, 0x53, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x19, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x65, 0x0a, 0x19, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x19,
	0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x53, 0x65,
	0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x6d, 0x61,
	0x70, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a,
	0x11, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x4f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65,
	0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x74, 0x65, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x10,
	0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x42, 0x47,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x44, 0x72, 0x61,
	0x77, 0x6e, 0x42, 0x47, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x42, 0x47, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41,
	0x72, 0x65, 0x61, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x41, 0x72, 0x65,
	0x61, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74,
	0x53, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x53,
	0x70, 0x61, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x53, 0x70,
	0x61, 0x77, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x49, 0x73, 0x41, 0x6c, 0x6f, 0x6e,
	0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x73, 0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x49, 0x73, 0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x5c, 0x0a,
	0x16, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x70, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65,
	0x74, 0x4d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x4d,
	0x61, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x50, 0x0a, 0x12, 0x6d,
	0x61, 0x70, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61, 0x70, 0x53, 0x65,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x4d, 0x0a,
	0x11, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x10,
	0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x13, 0x6d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74,
	0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x35, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x49, 0x73, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x73, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x49, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x74,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x0a, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x32, 0x18, 0x4d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53,
	0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x32, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x74,
	0x45, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x32, 0x12, 0x53, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x46, 0x6f,
	0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x63, 0x75,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x13,
	0x6d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x61,
	0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x41, 0x0a, 0x0d,
	0x73, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x53, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x3a, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x54,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48,
	0x00, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x65, 0x74,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x56, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x53, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4c,
	0x65, 0x61, 0x64, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f,
	0x4c, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x6f, 0x4c, 0x65, 0x61, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x72, 0x63, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x72, 0x63, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x72,
	0x63, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4c,
	0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d,
	0x6d, 0x61, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x5c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x6d, 0x61, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x50, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x63,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x78, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x46, 0x58, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x78, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x78, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x46, 0x58, 0x53, 0x68, 0x61, 0x6b, 0x65,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x78, 0x53, 0x68, 0x61, 0x6b,
	0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x47, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x59, 0x0a,
	0x15, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x15, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x48, 0x00, 0x52, 0x10, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x53, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x68, 0x69, 0x67, 0x68, 0x46, 0x69, 0x76,
	0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x46, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x68, 0x69, 0x67, 0x68, 0x46, 0x69, 0x76, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x6b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x41, 0x0a,
	0x0d, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x48, 0x69, 0x70, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x63, 0x72, 0x61, 0x66, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72, 0x61, 0x66, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x14, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x59, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x70, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x47,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x75, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x6f, 0x6b, 0x73,
	0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x6f, 0x6b, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x4d,
	0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x4e,
	0x6f, 0x6f, 0x6b, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f,
	0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x6f, 0x6b, 0x12, 0x56, 0x0a,
	0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6f, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x6f, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6f, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x77, 0x61, 0x76, 0x65, 0x18, 0x77, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x57, 0x61, 0x76, 0x65, 0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x76, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x7a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x73,
	0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x44, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x7d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x53, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x7e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x07,
	0x73, 0x65, 0x74, 0x41, 0x77, 0x61, 0x79, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x77,
	0x61, 0x79, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x74, 0x41, 0x77, 0x61, 0x79, 0x12, 0x30, 0x0a,
	0x07, 0x73, 0x65, 0x74, 0x43, 0x69, 0x74, 0x79, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x74, 0x43, 0x69, 0x74, 0x79, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x81, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x83, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x60, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x56, 0x69, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x18, 0x84, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56,
	0x69, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x69, 0x61, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x12, 0x5d, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54,
	0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x85,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x41, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x18, 0x89,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x41, 0x74, 0x44, 0x65, 0x73, 0x6b,
	0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x41, 0x74, 0x44, 0x65, 0x73,
	0x6b, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x46, 0x72, 0x6f, 0x6d,
	0x4e, 0x65, 0x78, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x6b, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x46, 0x72, 0x6f,
	0x6d, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x73, 0x6b, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x46, 0x72, 0x6f,
	0x6d, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x73, 0x6b, 0x12, 0x75, 0x0a, 0x1e, 0x73, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x65, 0x74, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1d,
	0x73, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a,
	0x0f, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x57, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x18,
	0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x61, 0x70, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x4b, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x51, 0x0a,
	0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x42, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x6d,
	0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x43, 0x68, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x78, 0x6e, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x22, 0xc9, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11,
	0x4d, 0x61, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x01,
	0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e,
	0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x3b,
	0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x22, 0x60, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x51, 0x0a,
	0x09, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x66, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x65, 0x6e,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65,
	0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x1a, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x57,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x42, 0x4f, 0x75,
	0x74, 0x66, 0x69, 0x74, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x5b,
	0x0a, 0x09, 0x53, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x53, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x22, 0x1a, 0x0a, 0x04, 0x52,
	0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x49, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x79, 0x22, 0x4a, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x22, 0x19,
	0x0a, 0x03, 0x42, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x1a, 0x0a, 0x04, 0x4b, 0x69, 0x63,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x61,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0xca, 0x01, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x6e, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x06, 0x6e, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x22, 0x2c,
	0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x12,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79,
	0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x66, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x64, 0x69,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x52, 0x03, 0x64, 0x69, 0x72,
	0x22, 0x0e, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x22, 0x4b, 0x0a, 0x05, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x84, 0x01,
	0x0a, 0x0a, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x32, 0x12, 0x19, 0x0a, 0x05,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x5d, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x57, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x08, 0x53, 0x65, 0x74,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x07, 0x53, 0x65, 0x74,
	0x43, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x0c,
	0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x4e, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x63, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a,
	0x10, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x06, 0x0a, 0x04, 0x45, 0x78, 0x69, 0x74, 0x22,
	0xa7, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x50, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77,
	0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x70, 0x61,
	0x77, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x60, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x08, 0x54, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x4e,
	0x55, 0x4d, 0x48, 0x01, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a,
	0x05, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x41, 0x74, 0x44, 0x65,
	0x73, 0x6b, 0x22, 0x63, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4a,
	0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x6f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x6f, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x6f, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x6f,
	0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x22, 0x5a, 0x0a,
	0x04, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x5a, 0x0a, 0x0c, 0x4d, 0x61, 0x70,
	0x41, 0x64, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x57, 0x69, 0x72,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x93, 0x02, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x4d,
	0x61, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x41, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x41, 0x72,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x52,
	0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x57, 0x69, 0x72,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x41, 0x72,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x0d, 0x53,
	0x68, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x74, 0x74, 0x69, 0x12, 0x1f, 0x0a, 0x08,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x0e, 0x53, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1f, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x53, 0x65,
	0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x49, 0x73, 0x41,
	0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x1f,
	0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x0b,
	0x53, 0x65, 0x74, 0x49, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x22, 0x63, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x09,
	0x53, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x1f, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x13, 0x53, 0x65, 0x74,
	0x46, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x0d, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x61,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x61, 0x70,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x8d,
	0x01, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x22, 0x63,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f,
	0x4c, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c,
	0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x69,
	0x0a, 0x11, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x72, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x72, 0x63, 0x12, 0x1f, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x0b, 0x53, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x45, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x8d, 0x03, 0x0a, 0x15, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x71, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x09, 0x71, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x17, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0f,
	0x6d, 0x61, 0x73, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x71, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x4d, 0x75,
	0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x63, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x24,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x79, 0x0a, 0x05, 0x43, 0x72, 0x61, 0x66,
	0x74, 0x12, 0x35, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x43,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x08, 0x48, 0x69, 0x67, 0x68, 0x46, 0x69, 0x76, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x22, 0x5c, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x71,
	0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x23, 0x0a, 0x0d, 0x48, 0x69, 0x70, 0x54, 0x6f, 0x42, 0x65, 0x53, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x6f, 0x0a,
	0x0b, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x08,
	0x64, 0x65, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x52, 0x08, 0x64, 0x65, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x34,
	0x0a, 0x04, 0x57, 0x61, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x4b, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x41, 0x77, 0x61, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x61,
	0x77, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x62, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x22, 0xe9, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x69, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x59,
	0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x2e,
	0x44, 0x42, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x48, 0x01, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x22, 0xf1, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x5c, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x0c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x22, 0x34,
	0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x70, 0x61,
	0x77, 0x6e, 0x10, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x49, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x69,
	0x6d, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x42, 0x95, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74,
	0x6f, 0x77, 0x6e, 0x42, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x6d, 0x63, 0x2f, 0x74, 0x68, 0x65, 0x2d, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0xa2, 0x02, 0x03, 0x47, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x47, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x74, 0x6f, 0x77, 0x6e, 0xca, 0x02, 0x0a, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f,
	0x77, 0x6e, 0xe2, 0x02, 0x16, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x47, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x74, 0x6f, 0x77, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gathertown_events_proto_rawDescOnce sync.Once
	file_gathertown_events_proto_rawDescData = file_gathertown_events_proto_rawDesc
)

func file_gathertown_events_proto_rawDescGZIP() []byte {
	file_gathertown_events_proto_rawDescOnce.Do(func() {
		file_gathertown_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_gathertown_events_proto_rawDescData)
	})
	return file_gathertown_events_proto_rawDescData
}

var file_gathertown_events_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_gathertown_events_proto_msgTypes = make([]protoimpl.MessageInfo, 288)
var file_gathertown_events_proto_goTypes = []interface{}{
	(SpriteDirectionEnum_ENUM)(0),                // 0: gathertown.SpriteDirectionEnum.ENUM
	(MoveDirectionEnum_ENUM)(0),                  // 1: gathertown.MoveDirectionEnum.ENUM
	(InteractionEnum_ENUM)(0),                    // 2: gathertown.InteractionEnum.ENUM
	(RespondToAccessRequest_LocationTypeEnum)(0), // 3: gathertown.RespondToAccessRequest.LocationTypeEnum
	(*Deprecated)(nil),                           // 4: gathertown.Deprecated
	(*SpriteDirectionEnum)(nil),                  // 5: gathertown.SpriteDirectionEnum
	(*MoveDirectionEnum)(nil),                    // 6: gathertown.MoveDirectionEnum
	(*InteractionEnum)(nil),                      // 7: gathertown.InteractionEnum
	(*PlayerInitInfo)(nil),                       // 8: gathertown.PlayerInitInfo
	(*DBOutfit)(nil),                             // 9: gathertown.DBOutfit
	(*WireObjectSpritesheetFraming)(nil),         // 10: gathertown.WireObjectSpritesheetFraming
	(*WireObjectSpriteAnimConfig)(nil),           // 11: gathertown.WireObjectSpriteAnimConfig
	(*WireObjectSpritesheet)(nil),                // 12: gathertown.WireObjectSpritesheet
	(*WireObject)(nil),                           // 13: gathertown.WireObject
	(*SpaceMemberInfo)(nil),                      // 14: gathertown.SpaceMemberInfo
	(*BackedUpDeskObject)(nil),                   // 15: gathertown.BackedUpDeskObject
	(*DeskObjects)(nil),                          // 16: gathertown.DeskObjects
	(*DeskInfoV2)(nil),                           // 17: gathertown.DeskInfoV2
	(*MapAndDesk)(nil),                           // 18: gathertown.MapAndDesk
	(*Sound)(nil),                                // 19: gathertown.Sound
	(*ObjectTime)(nil),                           // 20: gathertown.ObjectTime
	(*Space)(nil),                                // 21: gathertown.Space
	(*NookCoords)(nil),                           // 22: gathertown.NookCoords
	(*AllowedUsers)(nil),                         // 23: gathertown.AllowedUsers
	(*RequestUser)(nil),                          // 24: gathertown.RequestUser
	(*RequestedUsers)(nil),                       // 25: gathertown.RequestedUsers
	(*RecordingInfo)(nil),                        // 26: gathertown.RecordingInfo
	(*NookDiff)(nil),                             // 27: gathertown.NookDiff
	(*WirePoint)(nil),                            // 28: gathertown.WirePoint
	(*SpawnPoint)(nil),                           // 29: gathertown.SpawnPoint
	(*Portal)(nil),                               // 30: gathertown.Portal
	(*Announcer)(nil),                            // 31: gathertown.Announcer
	(*Asset)(nil),                                // 32: gathertown.Asset
	(*AreaPosition)(nil),                         // 33: gathertown.AreaPosition
	(*WireArea)(nil),                             // 34: gathertown.WireArea
	(*DBDesk)(nil),                               // 35: gathertown.DBDesk
	(*MapSetDimensions)(nil),                     // 36: gathertown.MapSetDimensions
	(*MapSetCollisions)(nil),                     // 37: gathertown.MapSetCollisions
	(*MapSetCollisionsBits)(nil),                 // 38: gathertown.MapSetCollisionsBits
	(*MapSetBackgroundImagePath)(nil),            // 39: gathertown.MapSetBackgroundImagePath
	(*MapSetForegroundImagePath)(nil),            // 40: gathertown.MapSetForegroundImagePath
	(*MapSetNooks)(nil),                          // 41: gathertown.MapSetNooks
	(*MapSetSpawn)(nil),                          // 42: gathertown.MapSetSpawn
	(*MapSetSpawns)(nil),                         // 43: gathertown.MapSetSpawns
	(*MapSetPortals)(nil),                        // 44: gathertown.MapSetPortals
	(*MapSetAnnouncer)(nil),                      // 45: gathertown.MapSetAnnouncer
	(*MapSetAssets)(nil),                         // 46: gathertown.MapSetAssets
	(*MapSetObjectsV2)(nil),                      // 47: gathertown.MapSetObjectsV2
	(*MapSetName)(nil),                           // 48: gathertown.MapSetName
	(*MapSetMuteOnEntry)(nil),                    // 49: gathertown.MapSetMuteOnEntry
	(*MapSetUseDrawnBG)(nil),                     // 50: gathertown.MapSetUseDrawnBG
	(*MapSetWalls)(nil),                          // 51: gathertown.MapSetWalls
	(*MapSetFloors)(nil),                         // 52: gathertown.MapSetFloors
	(*MapSetAreas)(nil),                          // 53: gathertown.MapSetAreas
	(*MapDeleteObjectByKey)(nil),                 // 54: gathertown.MapDeleteObjectByKey
	(*MapDeleteObjectById)(nil),                  // 55: gathertown.MapDeleteObjectById
	(*MapSetMiniMapImagePath)(nil),               // 56: gathertown.MapSetMiniMapImagePath
	(*MapSetEnabledChats)(nil),                   // 57: gathertown.MapSetEnabledChats
	(*MapSetDescription)(nil),                    // 58: gathertown.MapSetDescription
	(*MapSetDecoration)(nil),                     // 59: gathertown.MapSetDecoration
	(*MapSetTutorialTasks)(nil),                  // 60: gathertown.MapSetTutorialTasks
	(*WireTutorialTasks)(nil),                    // 61: gathertown.WireTutorialTasks
	(*TutorialTaskMapArea)(nil),                  // 62: gathertown.TutorialTaskMapArea
	(*MapSetScript)(nil),                         // 63: gathertown.MapSetScript
	(*Inventory)(nil),                            // 64: gathertown.Inventory
	(*InventoryItem)(nil),                        // 65: gathertown.InventoryItem
	(*SpaceItem)(nil),                            // 66: gathertown.SpaceItem
	(*ItemAbility)(nil),                          // 67: gathertown.ItemAbility
	(*MapLocation)(nil),                          // 68: gathertown.MapLocation
	(*ServerClientBatch)(nil),                    // 69: gathertown.ServerClientBatch
	(*ServerClientEvent)(nil),                    // 70: gathertown.ServerClientEvent
	(*SubscriptionsUpdated)(nil),                 // 71: gathertown.SubscriptionsUpdated
	(*ServerHeartbeat)(nil),                      // 72: gathertown.ServerHeartbeat
	(*Info)(nil),                                 // 73: gathertown.Info
	(*Warn)(nil),                                 // 74: gathertown.Warn
	(*ErrorEvent)(nil),                           // 75: gathertown.ErrorEvent
	(*Ready)(nil),                                // 76: gathertown.Ready
	(*TransactionStatus)(nil),                    // 77: gathertown.TransactionStatus
	(*PlayerJoins)(nil),                          // 78: gathertown.PlayerJoins
	(*GotRequestMute)(nil),                       // 79: gathertown.GotRequestMute
	(*PlayerMoves)(nil),                          // 80: gathertown.PlayerMoves
	(*PlayerSetsStatus)(nil),                     // 81: gathertown.PlayerSetsStatus
	(*PlayerSetsAvailability)(nil),               // 82: gathertown.PlayerSetsAvailability
	(*PlayerSpotlights)(nil),                     // 83: gathertown.PlayerSpotlights
	(*PlayerRings)(nil),                          // 84: gathertown.PlayerRings
	(*PlayerSetsImagePointer)(nil),               // 85: gathertown.PlayerSetsImagePointer
	(*SetScreenPointerServer)(nil),               // 86: gathertown.SetScreenPointerServer
	(*PlayerChats)(nil),                          // 87: gathertown.PlayerChats
	(*PlayerWaves)(nil),                          // 88: gathertown.PlayerWaves
	(*Timestamp)(nil),                            // 89: gathertown.Timestamp
	(*PlayerInteractsWithObject)(nil),            // 90: gathertown.PlayerInteractsWithObject
	(*PlayerGhosts)(nil),                         // 91: gathertown.PlayerGhosts
	(*PlayerEntersWhisper)(nil),                  // 92: gathertown.PlayerEntersWhisper
	(*PlayerEntersWhisperV2)(nil),                // 93: gathertown.PlayerEntersWhisperV2
	(*PlayerLeavesWhisper)(nil),                  // 94: gathertown.PlayerLeavesWhisper
	(*PlayerActivelySpeaks)(nil),                 // 95: gathertown.PlayerActivelySpeaks
	(*PlayerSetsEmoteV2)(nil),                    // 96: gathertown.PlayerSetsEmoteV2
	(*PlayerSetsLastRaisedHand)(nil),             // 97: gathertown.PlayerSetsLastRaisedHand
	(*PlayerSetsLastActive)(nil),                 // 98: gathertown.PlayerSetsLastActive
	(*PlayerSetsName)(nil),                       // 99: gathertown.PlayerSetsName
	(*PlayerSetsTextStatus)(nil),                 // 100: gathertown.PlayerSetsTextStatus
	(*PlayerSetsPronouns)(nil),                   // 101: gathertown.PlayerSetsPronouns
	(*PlayerSetsTitle)(nil),                      // 102: gathertown.PlayerSetsTitle
	(*PlayerSetsCity)(nil),                       // 103: gathertown.PlayerSetsCity
	(*PlayerSetsCountry)(nil),                    // 104: gathertown.PlayerSetsCountry
	(*PlayerSetsStartDate)(nil),                  // 105: gathertown.PlayerSetsStartDate
	(*PlayerSetsTimezone)(nil),                   // 106: gathertown.PlayerSetsTimezone
	(*PlayerSetsPhone)(nil),                      // 107: gathertown.PlayerSetsPhone
	(*PlayerSetsDisplayEmail)(nil),               // 108: gathertown.PlayerSetsDisplayEmail
	(*PlayerSetsDescription)(nil),                // 109: gathertown.PlayerSetsDescription
	(*PlayerSetsProfileImageUrl)(nil),            // 110: gathertown.PlayerSetsProfileImageUrl
	(*PlayerSetsPersonalImageUrl)(nil),           // 111: gathertown.PlayerSetsPersonalImageUrl
	(*PlayerSetsIsMobile)(nil),                   // 112: gathertown.PlayerSetsIsMobile
	(*PlayerSetsEmojiStatus)(nil),                // 113: gathertown.PlayerSetsEmojiStatus
	(*PlayerSetsAffiliation)(nil),                // 114: gathertown.PlayerSetsAffiliation
	(*PlayerExits)(nil),                          // 115: gathertown.PlayerExits
	(*PlayerSetsCurrentlyEquippedWearables)(nil), // 116: gathertown.PlayerSetsCurrentlyEquippedWearables
	(*PlayerSetsIsSignedIn)(nil),                 // 117: gathertown.PlayerSetsIsSignedIn
	(*SpaceOverwrites)(nil),                      // 118: gathertown.SpaceOverwrites
	(*DynamicGate)(nil),                          // 119: gathertown.DynamicGate
	(*DynamicGates)(nil),                         // 120: gathertown.DynamicGates
	(*SpaceSetsSpaceMembers)(nil),                // 121: gathertown.SpaceSetsSpaceMembers
	(*WireSpaceUser)(nil),                        // 122: gathertown.WireSpaceUser
	(*SpaceSetsSpaceUsers)(nil),                  // 123: gathertown.SpaceSetsSpaceUsers
	(*SpaceIsClosed)(nil),                        // 124: gathertown.SpaceIsClosed
	(*PlayerEntersPortal)(nil),                   // 125: gathertown.PlayerEntersPortal
	(*CookieFound)(nil),                          // 126: gathertown.CookieFound
	(*SpaceSetsIdMapping)(nil),                   // 127: gathertown.SpaceSetsIdMapping
	(*PlayerShootsConfetti)(nil),                 // 128: gathertown.PlayerShootsConfetti
	(*PlayerSetsEventStatus)(nil),                // 129: gathertown.PlayerSetsEventStatus
	(*PlayerSetsInConversation)(nil),             // 130: gathertown.PlayerSetsInConversation
	(*PlayerSetsCurrentArea)(nil),                // 131: gathertown.PlayerSetsCurrentArea
	(*PlayerSetsGoKartId)(nil),                   // 132: gathertown.PlayerSetsGoKartId
	(*PlayerSetsVehicleId)(nil),                  // 133: gathertown.PlayerSetsVehicleId
	(*PlayerSetsSpeedModifier)(nil),              // 134: gathertown.PlayerSetsSpeedModifier
	(*PlayerSetsIsAlone)(nil),                    // 135: gathertown.PlayerSetsIsAlone
	(*SpacePlaysSound)(nil),                      // 136: gathertown.SpacePlaysSound
	(*SpaceStopsSound)(nil),                      // 137: gathertown.SpaceStopsSound
	(*PlayerSetsFocusModeEndTime)(nil),           // 138: gathertown.PlayerSetsFocusModeEndTime
	(*PlayerBlocks)(nil),                         // 139: gathertown.PlayerBlocks
	(*CustomEvent)(nil),                          // 140: gathertown.CustomEvent
	(*PlayerUpdatesFocusModeStatus)(nil),         // 141: gathertown.PlayerUpdatesFocusModeStatus
	(*PlayerSetsItemString)(nil),                 // 142: gathertown.PlayerSetsItemString
	(*PlayerTriggersObject)(nil),                 // 143: gathertown.PlayerTriggersObject
	(*PlayerNotifies)(nil),                       // 144: gathertown.PlayerNotifies
	(*PlayerSetsFollowTarget)(nil),               // 145: gathertown.PlayerSetsFollowTarget
	(*PlayerRequestsToLead)(nil),                 // 146: gathertown.PlayerRequestsToLead
	(*PlayerSetsManualVideoSrc)(nil),             // 147: gathertown.PlayerSetsManualVideoSrc
	(*PlayerSetsIsNpc)(nil),                      // 148: gathertown.PlayerSetsIsNpc
	(*PlayerSetsSubtitle)(nil),                   // 149: gathertown.PlayerSetsSubtitle
	(*PlayerCrafts)(nil),                         // 150: gathertown.PlayerCrafts
	(*MapMoveObject)(nil),                        // 151: gathertown.MapMoveObject
	(*PlayerEditsChatMessage)(nil),               // 152: gathertown.PlayerEditsChatMessage
	(*FXShakeObject)(nil),                        // 153: gathertown.FXShakeObject
	(*FXShakeCamera)(nil),                        // 154: gathertown.FXShakeCamera
	(*PlayerHighFives)(nil),                      // 155: gathertown.PlayerHighFives
	(*PlayerSendsCommand)(nil),                   // 156: gathertown.PlayerSendsCommand
	(*SpaceRegistersCommand)(nil),                // 157: gathertown.SpaceRegistersCommand
	(*PlayerUpdatesInventory)(nil),               // 158: gathertown.PlayerUpdatesInventory
	(*SpaceUpdatesItems)(nil),                    // 159: gathertown.SpaceUpdatesItems
	(*PlayerTriggersInventoryItem)(nil),          // 160: gathertown.PlayerTriggersInventoryItem
	(*PlayerSetsAllowScreenPointer)(nil),         // 161: gathertown.PlayerSetsAllowScreenPointer
	(*PrecomputedEnterLocation)(nil),             // 162: gathertown.PrecomputedEnterLocation
	(*PlayerSetsDeskInfo)(nil),                   // 163: gathertown.PlayerSetsDeskInfo
	(*SpaceSetsCapacity)(nil),                    // 164: gathertown.SpaceSetsCapacity
	(*SpaceOverCapacityDeniesUser)(nil),          // 165: gathertown.SpaceOverCapacityDeniesUser
	(*PlayerSetsAway)(nil),                       // 166: gathertown.PlayerSetsAway
	(*PlayerStartsRecording)(nil),                // 167: gathertown.PlayerStartsRecording
	(*AccessRequest)(nil),                        // 168: gathertown.AccessRequest
	(*AccessRequestsUpdated)(nil),                // 169: gathertown.AccessRequestsUpdated
	(*AccessRequestRespondedTo)(nil),             // 170: gathertown.AccessRequestRespondedTo
	(*PlayerGuestPassStatus)(nil),                // 171: gathertown.PlayerGuestPassStatus
	(*SpaceSetsGuestPassStatuses)(nil),           // 172: gathertown.SpaceSetsGuestPassStatuses
	(*SetDeskFromNextAvailableDesk)(nil),         // 173: gathertown.SetDeskFromNextAvailableDesk
	(*SpaceRolePermissionOverrideUpdated)(nil),   // 174: gathertown.SpaceRolePermissionOverrideUpdated
	(*ChimeSetsUserInfo)(nil),                    // 175: gathertown.ChimeSetsUserInfo
	(*ClientServerBatch)(nil),                    // 176: gathertown.ClientServerBatch
	(*ClientServerAction)(nil),                   // 177: gathertown.ClientServerAction
	(*ClientHeartbeat)(nil),                      // 178: gathertown.ClientHeartbeat
	(*ClientBackupHeartbeat)(nil),                // 179: gathertown.ClientBackupHeartbeat
	(*UpdateSubscriptions)(nil),                  // 180: gathertown.UpdateSubscriptions
	(*Move)(nil),                                 // 181: gathertown.Move
	(*RequestMute)(nil),                          // 182: gathertown.RequestMute
	(*SetAffiliation)(nil),                       // 183: gathertown.SetAffiliation
	(*SetStatus)(nil),                            // 184: gathertown.SetStatus
	(*SetAvailability)(nil),                      // 185: gathertown.SetAvailability
	(*SetCurrentlyEquippedWearables)(nil),        // 186: gathertown.SetCurrentlyEquippedWearables
	(*Spotlight)(nil),                            // 187: gathertown.Spotlight
	(*Ring)(nil),                                 // 188: gathertown.Ring
	(*SetImagePointer)(nil),                      // 189: gathertown.SetImagePointer
	(*SetScreenPointer)(nil),                     // 190: gathertown.SetScreenPointer
	(*Ban)(nil),                                  // 191: gathertown.Ban
	(*Kick)(nil),                                 // 192: gathertown.Kick
	(*Block)(nil),                                // 193: gathertown.Block
	(*SetImpassable)(nil),                        // 194: gathertown.SetImpassable
	(*Chat)(nil),                                 // 195: gathertown.Chat
	(*Notify)(nil),                               // 196: gathertown.Notify
	(*InteractWithObject)(nil),                   // 197: gathertown.InteractWithObject
	(*ActivelySpeaking)(nil),                     // 198: gathertown.ActivelySpeaking
	(*EnterWhisper)(nil),                         // 199: gathertown.EnterWhisper
	(*LeaveWhisper)(nil),                         // 200: gathertown.LeaveWhisper
	(*Ghost)(nil),                                // 201: gathertown.Ghost
	(*SetEmoteV2)(nil),                           // 202: gathertown.SetEmoteV2
	(*SetName)(nil),                              // 203: gathertown.SetName
	(*SetTextStatus)(nil),                        // 204: gathertown.SetTextStatus
	(*SetPronouns)(nil),                          // 205: gathertown.SetPronouns
	(*SetTitle)(nil),                             // 206: gathertown.SetTitle
	(*SetCity)(nil),                              // 207: gathertown.SetCity
	(*SetCountry)(nil),                           // 208: gathertown.SetCountry
	(*SetStartDate)(nil),                         // 209: gathertown.SetStartDate
	(*SetTimezone)(nil),                          // 210: gathertown.SetTimezone
	(*SetPhone)(nil),                             // 211: gathertown.SetPhone
	(*SetDisplayEmail)(nil),                      // 212: gathertown.SetDisplayEmail
	(*SetDescription)(nil),                       // 213: gathertown.SetDescription
	(*SetProfileImageUrl)(nil),                   // 214: gathertown.SetProfileImageUrl
	(*SetPersonalImageUrl)(nil),                  // 215: gathertown.SetPersonalImageUrl
	(*Exit)(nil),                                 // 216: gathertown.Exit
	(*Enter)(nil),                                // 217: gathertown.Enter
	(*PrecomputeEnter)(nil),                      // 218: gathertown.PrecomputeEnter
	(*SetEmojiStatus)(nil),                       // 219: gathertown.SetEmojiStatus
	(*Teleport)(nil),                             // 220: gathertown.Teleport
	(*Spawn)(nil),                                // 221: gathertown.Spawn
	(*Respawn)(nil),                              // 222: gathertown.Respawn
	(*RespawnAtDesk)(nil),                        // 223: gathertown.RespawnAtDesk
	(*RequestToJoinNook)(nil),                    // 224: gathertown.RequestToJoinNook
	(*UpdateNookPermission)(nil),                 // 225: gathertown.UpdateNookPermission
	(*Init)(nil),                                 // 226: gathertown.Init
	(*MapAddObject)(nil),                         // 227: gathertown.MapAddObject
	(*MapUpdateObjects)(nil),                     // 228: gathertown.MapUpdateObjects
	(*ShootConfetti)(nil),                        // 229: gathertown.ShootConfetti
	(*SetEventStatus)(nil),                       // 230: gathertown.SetEventStatus
	(*SetInConversation)(nil),                    // 231: gathertown.SetInConversation
	(*SetCurrentArea)(nil),                       // 232: gathertown.SetCurrentArea
	(*SetVehicleId)(nil),                         // 233: gathertown.SetVehicleId
	(*SetSpeedModifier)(nil),                     // 234: gathertown.SetSpeedModifier
	(*SetIsAlone)(nil),                           // 235: gathertown.SetIsAlone
	(*SetIsMobile)(nil),                          // 236: gathertown.SetIsMobile
	(*PlaySound)(nil),                            // 237: gathertown.PlaySound
	(*StopSound)(nil),                            // 238: gathertown.StopSound
	(*SetFocusModeEndTime)(nil),                  // 239: gathertown.SetFocusModeEndTime
	(*SetItemString)(nil),                        // 240: gathertown.SetItemString
	(*TriggerObject)(nil),                        // 241: gathertown.TriggerObject
	(*CustomAction)(nil),                         // 242: gathertown.CustomAction
	(*SetFollowTarget)(nil),                      // 243: gathertown.SetFollowTarget
	(*RequestToLead)(nil),                        // 244: gathertown.RequestToLead
	(*EnterPortal)(nil),                          // 245: gathertown.EnterPortal
	(*SetManualVideoSrc)(nil),                    // 246: gathertown.SetManualVideoSrc
	(*SetSubtitle)(nil),                          // 247: gathertown.SetSubtitle
	(*MapCommitsChanges)(nil),                    // 248: gathertown.MapCommitsChanges
	(*SpeakerUpdatesSession)(nil),                // 249: gathertown.SpeakerUpdatesSession
	(*ChatReply)(nil),                            // 250: gathertown.ChatReply
	(*ChatMessageUpdated)(nil),                   // 251: gathertown.ChatMessageUpdated
	(*SendCommand)(nil),                          // 252: gathertown.SendCommand
	(*RegisterCommand)(nil),                      // 253: gathertown.RegisterCommand
	(*Craft)(nil),                                // 254: gathertown.Craft
	(*HighFive)(nil),                             // 255: gathertown.HighFive
	(*AddInventoryItem)(nil),                     // 256: gathertown.AddInventoryItem
	(*RemoveInventoryItem)(nil),                  // 257: gathertown.RemoveInventoryItem
	(*HipToBeSquare)(nil),                        // 258: gathertown.HipToBeSquare
	(*TriggerInventoryItem)(nil),                 // 259: gathertown.TriggerInventoryItem
	(*SetAllowScreenPointer)(nil),                // 260: gathertown.SetAllowScreenPointer
	(*SetDeskInfo)(nil),                          // 261: gathertown.SetDeskInfo
	(*Wave)(nil),                                 // 262: gathertown.Wave
	(*SetAway)(nil),                              // 263: gathertown.SetAway
	(*StartRecording)(nil),                       // 264: gathertown.StartRecording
	(*RequestAccessViaCheckIn)(nil),              // 265: gathertown.RequestAccessViaCheckIn
	(*RespondToAccessRequest)(nil),               // 266: gathertown.RespondToAccessRequest
	(*SetSpaceRolePermissionOverride)(nil),       // 267: gathertown.SetSpaceRolePermissionOverride
	(*JoinChimeMeeting)(nil),                     // 268: gathertown.JoinChimeMeeting
	nil,                                          // 269: gathertown.WireObjectSpritesheet.AnimationsEntry
	nil,                                          // 270: gathertown.SpaceMemberInfo.RolesEntry
	nil,                                          // 271: gathertown.DeskObjects.ObjectsEntry
	nil,                                          // 272: gathertown.RequestedUsers.UsersEntry
	nil,                                          // 273: gathertown.MapSetNooks.NooksEntry
	nil,                                          // 274: gathertown.MapSetObjectsV2.ObjectsEntry
	nil,                                          // 275: gathertown.MapSetWalls.WallsEntry
	nil,                                          // 276: gathertown.MapSetFloors.FloorsEntry
	nil,                                          // 277: gathertown.MapSetAreas.AreasEntry
	nil,                                          // 278: gathertown.Inventory.ItemsEntry
	nil,                                          // 279: gathertown.Inventory.OrderEntry
	nil,                                          // 280: gathertown.SpaceItem.MetaEntry
	nil,                                          // 281: gathertown.SpaceItem.AbilitiesEntry
	nil,                                          // 282: gathertown.SpaceSetsSpaceMembers.MembersEntry
	nil,                                          // 283: gathertown.SpaceSetsSpaceUsers.SpaceUsersEntry
	nil,                                          // 284: gathertown.PlayerCrafts.InputsEntry
	nil,                                          // 285: gathertown.PlayerUpdatesInventory.ItemsEntry
	nil,                                          // 286: gathertown.PlayerUpdatesInventory.OrderEntry
	nil,                                          // 287: gathertown.SpaceUpdatesItems.ItemsEntry
	nil,                                          // 288: gathertown.UpdateSubscriptions.SubscriptionsEntry
	nil,                                          // 289: gathertown.UpdateSubscriptions.MapUpdateIdsEntry
	nil,                                          // 290: gathertown.MapUpdateObjects.ObjectsEntry
	nil,                                          // 291: gathertown.Craft.InputsEntry
}
var file_gathertown_events_proto_depIdxs = []int32{
	9,   // 0: gathertown.PlayerInitInfo.currentlyEquippedWearables:type_name -> gathertown.DBOutfit
	10,  // 1: gathertown.WireObjectSpritesheet.framing:type_name -> gathertown.WireObjectSpritesheetFraming
	269, // 2: gathertown.WireObjectSpritesheet.animations:type_name -> gathertown.WireObjectSpritesheet.AnimationsEntry
	2,   // 3: gathertown.WireObject.type:type_name -> gathertown.InteractionEnum.ENUM
	19,  // 4: gathertown.WireObject.sound:type_name -> gathertown.Sound
	20,  // 5: gathertown.WireObject.objectStartTime:type_name -> gathertown.ObjectTime
	20,  // 6: gathertown.WireObject.objectExpireTime:type_name -> gathertown.ObjectTime
	12,  // 7: gathertown.WireObject.spritesheet:type_name -> gathertown.WireObjectSpritesheet
	270, // 8: gathertown.SpaceMemberInfo.roles:type_name -> gathertown.SpaceMemberInfo.RolesEntry
	9,   // 9: gathertown.SpaceMemberInfo.currentlyEquippedWearables:type_name -> gathertown.DBOutfit
	13,  // 10: gathertown.BackedUpDeskObject.obj:type_name -> gathertown.WireObject
	271, // 11: gathertown.DeskObjects.objects:type_name -> gathertown.DeskObjects.ObjectsEntry
	16,  // 12: gathertown.DeskInfoV2.lastDeskObjects:type_name -> gathertown.DeskObjects
	28,  // 13: gathertown.NookCoords.coords:type_name -> gathertown.WirePoint
	272, // 14: gathertown.RequestedUsers.users:type_name -> gathertown.RequestedUsers.UsersEntry
	22,  // 15: gathertown.NookDiff.nookCoords:type_name -> gathertown.NookCoords
	23,  // 16: gathertown.NookDiff.allowedUsers:type_name -> gathertown.AllowedUsers
	25,  // 17: gathertown.NookDiff.requestedUsers:type_name -> gathertown.RequestedUsers
	26,  // 18: gathertown.NookDiff.recordingInfo:type_name -> gathertown.RecordingInfo
	33,  // 19: gathertown.WireArea.coords:type_name -> gathertown.AreaPosition
	33,  // 20: gathertown.DBDesk.coords:type_name -> gathertown.AreaPosition
	273, // 21: gathertown.MapSetNooks.nooks:type_name -> gathertown.MapSetNooks.NooksEntry
	28,  // 22: gathertown.MapSetSpawn.spawn:type_name -> gathertown.WirePoint
	29,  // 23: gathertown.MapSetSpawns.spawns:type_name -> gathertown.SpawnPoint
	30,  // 24: gathertown.MapSetPortals.portals:type_name -> gathertown.Portal
	31,  // 25: gathertown.MapSetAnnouncer.announcer:type_name -> gathertown.Announcer
	32,  // 26: gathertown.MapSetAssets.assets:type_name -> gathertown.Asset
	274, // 27: gathertown.MapSetObjectsV2.objects:type_name -> gathertown.MapSetObjectsV2.ObjectsEntry
	275, // 28: gathertown.MapSetWalls.walls:type_name -> gathertown.MapSetWalls.WallsEntry
	276, // 29: gathertown.MapSetFloors.floors:type_name -> gathertown.MapSetFloors.FloorsEntry
	277, // 30: gathertown.MapSetAreas.areas:type_name -> gathertown.MapSetAreas.AreasEntry
	61,  // 31: gathertown.MapSetTutorialTasks.tutorialTasks:type_name -> gathertown.WireTutorialTasks
	62,  // 32: gathertown.WireTutorialTasks.areas:type_name -> gathertown.TutorialTaskMapArea
	278, // 33: gathertown.Inventory.items:type_name -> gathertown.Inventory.ItemsEntry
	279, // 34: gathertown.Inventory.order:type_name -> gathertown.Inventory.OrderEntry
	280, // 35: gathertown.SpaceItem.meta:type_name -> gathertown.SpaceItem.MetaEntry
	281, // 36: gathertown.SpaceItem.abilities:type_name -> gathertown.SpaceItem.AbilitiesEntry
	70,  // 37: gathertown.ServerClientBatch.events:type_name -> gathertown.ServerClientEvent
	73,  // 38: gathertown.ServerClientEvent.info:type_name -> gathertown.Info
	74,  // 39: gathertown.ServerClientEvent.warn:type_name -> gathertown.Warn
	75,  // 40: gathertown.ServerClientEvent.error:type_name -> gathertown.ErrorEvent
	76,  // 41: gathertown.ServerClientEvent.ready:type_name -> gathertown.Ready
	72,  // 42: gathertown.ServerClientEvent.serverHeartbeat:type_name -> gathertown.ServerHeartbeat
	77,  // 43: gathertown.ServerClientEvent.transactionStatus:type_name -> gathertown.TransactionStatus
	80,  // 44: gathertown.ServerClientEvent.playerMoves:type_name -> gathertown.PlayerMoves
	81,  // 45: gathertown.ServerClientEvent.playerSetsStatus:type_name -> gathertown.PlayerSetsStatus
	83,  // 46: gathertown.ServerClientEvent.playerSpotlights:type_name -> gathertown.PlayerSpotlights
	84,  // 47: gathertown.ServerClientEvent.playerRings:type_name -> gathertown.PlayerRings
	87,  // 48: gathertown.ServerClientEvent.playerChats:type_name -> gathertown.PlayerChats
	91,  // 49: gathertown.ServerClientEvent.playerGhosts:type_name -> gathertown.PlayerGhosts
	92,  // 50: gathertown.ServerClientEvent.playerEntersWhisper:type_name -> gathertown.PlayerEntersWhisper
	94,  // 51: gathertown.ServerClientEvent.playerLeavesWhisper:type_name -> gathertown.PlayerLeavesWhisper
	95,  // 52: gathertown.ServerClientEvent.playerActivelySpeaks:type_name -> gathertown.PlayerActivelySpeaks
	99,  // 53: gathertown.ServerClientEvent.playerSetsName:type_name -> gathertown.PlayerSetsName
	100, // 54: gathertown.ServerClientEvent.playerSetsTextStatus:type_name -> gathertown.PlayerSetsTextStatus
	113, // 55: gathertown.ServerClientEvent.playerSetsEmojiStatus:type_name -> gathertown.PlayerSetsEmojiStatus
	114, // 56: gathertown.ServerClientEvent.playerSetsAffiliation:type_name -> gathertown.PlayerSetsAffiliation
	115, // 57: gathertown.ServerClientEvent.playerExits:type_name -> gathertown.PlayerExits
	117, // 58: gathertown.ServerClientEvent.playerSetsIsSignedIn:type_name -> gathertown.PlayerSetsIsSignedIn
	118, // 59: gathertown.ServerClientEvent.spaceOverwrites:type_name -> gathertown.SpaceOverwrites
	124, // 60: gathertown.ServerClientEvent.spaceIsClosed:type_name -> gathertown.SpaceIsClosed
	125, // 61: gathertown.ServerClientEvent.playerEntersPortal:type_name -> gathertown.PlayerEntersPortal
	127, // 62: gathertown.ServerClientEvent.spaceSetsIdMapping:type_name -> gathertown.SpaceSetsIdMapping
	98,  // 63: gathertown.ServerClientEvent.playerSetsLastActive:type_name -> gathertown.PlayerSetsLastActive
	128, // 64: gathertown.ServerClientEvent.playerShootsConfetti:type_name -> gathertown.PlayerShootsConfetti
	129, // 65: gathertown.ServerClientEvent.playerSetsEventStatus:type_name -> gathertown.PlayerSetsEventStatus
	130, // 66: gathertown.ServerClientEvent.playerSetsInConversation:type_name -> gathertown.PlayerSetsInConversation
	131, // 67: gathertown.ServerClientEvent.playerSetsCurrentArea:type_name -> gathertown.PlayerSetsCurrentArea
	85,  // 68: gathertown.ServerClientEvent.playerSetsImagePointer:type_name -> gathertown.PlayerSetsImagePointer
	126, // 69: gathertown.ServerClientEvent.cookieFound:type_name -> gathertown.CookieFound
	93,  // 70: gathertown.ServerClientEvent.playerEntersWhisperV2:type_name -> gathertown.PlayerEntersWhisperV2
	132, // 71: gathertown.ServerClientEvent.playerSetsGoKartId:type_name -> gathertown.PlayerSetsGoKartId
	36,  // 72: gathertown.ServerClientEvent.mapSetDimensions:type_name -> gathertown.MapSetDimensions
	39,  // 73: gathertown.ServerClientEvent.mapSetBackgroundImagePath:type_name -> gathertown.MapSetBackgroundImagePath
	40,  // 74: gathertown.ServerClientEvent.mapSetForegroundImagePath:type_name -> gathertown.MapSetForegroundImagePath
	43,  // 75: gathertown.ServerClientEvent.mapSetSpawns:type_name -> gathertown.MapSetSpawns
	44,  // 76: gathertown.ServerClientEvent.mapSetPortals:type_name -> gathertown.MapSetPortals
	45,  // 77: gathertown.ServerClientEvent.mapSetAnnouncer:type_name -> gathertown.MapSetAnnouncer
	46,  // 78: gathertown.ServerClientEvent.mapSetAssets:type_name -> gathertown.MapSetAssets
	48,  // 79: gathertown.ServerClientEvent.mapSetName:type_name -> gathertown.MapSetName
	49,  // 80: gathertown.ServerClientEvent.mapSetMuteOnEntry:type_name -> gathertown.MapSetMuteOnEntry
	50,  // 81: gathertown.ServerClientEvent.mapSetUseDrawnBG:type_name -> gathertown.MapSetUseDrawnBG
	51,  // 82: gathertown.ServerClientEvent.mapSetWalls:type_name -> gathertown.MapSetWalls
	52,  // 83: gathertown.ServerClientEvent.mapSetFloors:type_name -> gathertown.MapSetFloors
	53,  // 84: gathertown.ServerClientEvent.mapSetAreas:type_name -> gathertown.MapSetAreas
	42,  // 85: gathertown.ServerClientEvent.mapSetSpawn:type_name -> gathertown.MapSetSpawn
	135, // 86: gathertown.ServerClientEvent.playerSetsIsAlone:type_name -> gathertown.PlayerSetsIsAlone
	78,  // 87: gathertown.ServerClientEvent.playerJoins:type_name -> gathertown.PlayerJoins
	57,  // 88: gathertown.ServerClientEvent.mapSetEnabledChats:type_name -> gathertown.MapSetEnabledChats
	58,  // 89: gathertown.ServerClientEvent.mapSetDescription:type_name -> gathertown.MapSetDescription
	59,  // 90: gathertown.ServerClientEvent.mapSetDecoration:type_name -> gathertown.MapSetDecoration
	60,  // 91: gathertown.ServerClientEvent.mapSetTutorialTasks:type_name -> gathertown.MapSetTutorialTasks
	56,  // 92: gathertown.ServerClientEvent.mapSetMiniMapImagePath:type_name -> gathertown.MapSetMiniMapImagePath
	136, // 93: gathertown.ServerClientEvent.spacePlaysSound:type_name -> gathertown.SpacePlaysSound
	63,  // 94: gathertown.ServerClientEvent.mapSetScript:type_name -> gathertown.MapSetScript
	112, // 95: gathertown.ServerClientEvent.playerSetsIsMobile:type_name -> gathertown.PlayerSetsIsMobile
	86,  // 96: gathertown.ServerClientEvent.setScreenPointerServer:type_name -> gathertown.SetScreenPointerServer
	96,  // 97: gathertown.ServerClientEvent.playerSetsEmoteV2:type_name -> gathertown.PlayerSetsEmoteV2
	138, // 98: gathertown.ServerClientEvent.playerSetsFocusModeEndTime:type_name -> gathertown.PlayerSetsFocusModeEndTime
	121, // 99: gathertown.ServerClientEvent.spaceSetsSpaceMembers:type_name -> gathertown.SpaceSetsSpaceMembers
	123, // 100: gathertown.ServerClientEvent.spaceSetsSpaceUsers:type_name -> gathertown.SpaceSetsSpaceUsers
	140, // 101: gathertown.ServerClientEvent.customEvent:type_name -> gathertown.CustomEvent
	139, // 102: gathertown.ServerClientEvent.playerBlocks:type_name -> gathertown.PlayerBlocks
	141, // 103: gathertown.ServerClientEvent.playerUpdatesFocusModeStatus:type_name -> gathertown.PlayerUpdatesFocusModeStatus
	144, // 104: gathertown.ServerClientEvent.playerNotifies:type_name -> gathertown.PlayerNotifies
	142, // 105: gathertown.ServerClientEvent.playerSetsItemString:type_name -> gathertown.PlayerSetsItemString
	145, // 106: gathertown.ServerClientEvent.playerSetsFollowTarget:type_name -> gathertown.PlayerSetsFollowTarget
	146, // 107: gathertown.ServerClientEvent.playerRequestsToLead:type_name -> gathertown.PlayerRequestsToLead
	147, // 108: gathertown.ServerClientEvent.playerSetsManualVideoSrc:type_name -> gathertown.PlayerSetsManualVideoSrc
	148, // 109: gathertown.ServerClientEvent.playerSetsIsNpc:type_name -> gathertown.PlayerSetsIsNpc
	149, // 110: gathertown.ServerClientEvent.playerSetsSubtitle:type_name -> gathertown.PlayerSetsSubtitle
	248, // 111: gathertown.ServerClientEvent.mapCommitsChanges:type_name -> gathertown.MapCommitsChanges
	151, // 112: gathertown.ServerClientEvent.mapMoveObject:type_name -> gathertown.MapMoveObject
	152, // 113: gathertown.ServerClientEvent.playerEditsChatMessage:type_name -> gathertown.PlayerEditsChatMessage
	153, // 114: gathertown.ServerClientEvent.fxShakeObject:type_name -> gathertown.FXShakeObject
	154, // 115: gathertown.ServerClientEvent.fxShakeCamera:type_name -> gathertown.FXShakeCamera
	156, // 116: gathertown.ServerClientEvent.playerSendsCommand:type_name -> gathertown.PlayerSendsCommand
	157, // 117: gathertown.ServerClientEvent.spaceRegistersCommand:type_name -> gathertown.SpaceRegistersCommand
	249, // 118: gathertown.ServerClientEvent.speakerUpdatesSession:type_name -> gathertown.SpeakerUpdatesSession
	158, // 119: gathertown.ServerClientEvent.playerUpdatesInventory:type_name -> gathertown.PlayerUpdatesInventory
	159, // 120: gathertown.ServerClientEvent.spaceUpdatesItems:type_name -> gathertown.SpaceUpdatesItems
	133, // 121: gathertown.ServerClientEvent.playerSetsVehicleId:type_name -> gathertown.PlayerSetsVehicleId
	134, // 122: gathertown.ServerClientEvent.playerSetsSpeedModifier:type_name -> gathertown.PlayerSetsSpeedModifier
	155, // 123: gathertown.ServerClientEvent.playerHighFives:type_name -> gathertown.PlayerHighFives
	137, // 124: gathertown.ServerClientEvent.spaceStopsSound:type_name -> gathertown.SpaceStopsSound
	258, // 125: gathertown.ServerClientEvent.hipToBeSquare:type_name -> gathertown.HipToBeSquare
	150, // 126: gathertown.ServerClientEvent.playerCrafts:type_name -> gathertown.PlayerCrafts
	160, // 127: gathertown.ServerClientEvent.playerTriggersInventoryItem:type_name -> gathertown.PlayerTriggersInventoryItem
	161, // 128: gathertown.ServerClientEvent.playerSetsAllowScreenPointer:type_name -> gathertown.PlayerSetsAllowScreenPointer
	162, // 129: gathertown.ServerClientEvent.precomputedEnterLocation:type_name -> gathertown.PrecomputedEnterLocation
	79,  // 130: gathertown.ServerClientEvent.gotRequestMute:type_name -> gathertown.GotRequestMute
	163, // 131: gathertown.ServerClientEvent.playerSetsDeskInfo:type_name -> gathertown.PlayerSetsDeskInfo
	41,  // 132: gathertown.ServerClientEvent.mapSetNooks:type_name -> gathertown.MapSetNooks
	120, // 133: gathertown.ServerClientEvent.dynamicGates:type_name -> gathertown.DynamicGates
	88,  // 134: gathertown.ServerClientEvent.playerWaves:type_name -> gathertown.PlayerWaves
	101, // 135: gathertown.ServerClientEvent.playerSetsPronouns:type_name -> gathertown.PlayerSetsPronouns
	102, // 136: gathertown.ServerClientEvent.playerSetsTitle:type_name -> gathertown.PlayerSetsTitle
	106, // 137: gathertown.ServerClientEvent.playerSetsTimezone:type_name -> gathertown.PlayerSetsTimezone
	109, // 138: gathertown.ServerClientEvent.playerSetsDescription:type_name -> gathertown.PlayerSetsDescription
	107, // 139: gathertown.ServerClientEvent.playerSetsPhone:type_name -> gathertown.PlayerSetsPhone
	111, // 140: gathertown.ServerClientEvent.playerSetsPersonalImageUrl:type_name -> gathertown.PlayerSetsPersonalImageUrl
	110, // 141: gathertown.ServerClientEvent.playerSetsProfileImageUrl:type_name -> gathertown.PlayerSetsProfileImageUrl
	164, // 142: gathertown.ServerClientEvent.spaceSetsCapacity:type_name -> gathertown.SpaceSetsCapacity
	165, // 143: gathertown.ServerClientEvent.spaceOverCapacityDeniesUser:type_name -> gathertown.SpaceOverCapacityDeniesUser
	166, // 144: gathertown.ServerClientEvent.playerSetsAway:type_name -> gathertown.PlayerSetsAway
	38,  // 145: gathertown.ServerClientEvent.mapSetCollisionsBits:type_name -> gathertown.MapSetCollisionsBits
	103, // 146: gathertown.ServerClientEvent.playerSetsCity:type_name -> gathertown.PlayerSetsCity
	104, // 147: gathertown.ServerClientEvent.playerSetsCountry:type_name -> gathertown.PlayerSetsCountry
	105, // 148: gathertown.ServerClientEvent.playerSetsStartDate:type_name -> gathertown.PlayerSetsStartDate
	167, // 149: gathertown.ServerClientEvent.playerStartsRecording:type_name -> gathertown.PlayerStartsRecording
	169, // 150: gathertown.ServerClientEvent.accessRequestsUpdated:type_name -> gathertown.AccessRequestsUpdated
	170, // 151: gathertown.ServerClientEvent.accessRequestRespondedTo:type_name -> gathertown.AccessRequestRespondedTo
	172, // 152: gathertown.ServerClientEvent.spaceSetsGuestPassStatuses:type_name -> gathertown.SpaceSetsGuestPassStatuses
	82,  // 153: gathertown.ServerClientEvent.playerSetsAvailability:type_name -> gathertown.PlayerSetsAvailability
	71,  // 154: gathertown.ServerClientEvent.subscriptionsUpdated:type_name -> gathertown.SubscriptionsUpdated
	174, // 155: gathertown.ServerClientEvent.spaceRolePermissionOverrideUpdated:type_name -> gathertown.SpaceRolePermissionOverrideUpdated
	97,  // 156: gathertown.ServerClientEvent.playerSetsLastRaisedHand:type_name -> gathertown.PlayerSetsLastRaisedHand
	116, // 157: gathertown.ServerClientEvent.playerSetsCurrentlyEquippedWearables:type_name -> gathertown.PlayerSetsCurrentlyEquippedWearables
	108, // 158: gathertown.ServerClientEvent.playerSetsDisplayEmail:type_name -> gathertown.PlayerSetsDisplayEmail
	54,  // 159: gathertown.ServerClientEvent.mapDeleteObjectByKey:type_name -> gathertown.MapDeleteObjectByKey
	47,  // 160: gathertown.ServerClientEvent.mapSetObjectsV2:type_name -> gathertown.MapSetObjectsV2
	90,  // 161: gathertown.ServerClientEvent.playerInteractsWithObject:type_name -> gathertown.PlayerInteractsWithObject
	143, // 162: gathertown.ServerClientEvent.playerTriggersObject:type_name -> gathertown.PlayerTriggersObject
	175, // 163: gathertown.ServerClientEvent.chimeSetsUserInfo:type_name -> gathertown.ChimeSetsUserInfo
	0,   // 164: gathertown.PlayerMoves.direction:type_name -> gathertown.SpriteDirectionEnum.ENUM
	89,  // 165: gathertown.PlayerChats.timestamp:type_name -> gathertown.Timestamp
	9,   // 166: gathertown.PlayerSetsCurrentlyEquippedWearables.currentlyEquippedWearables:type_name -> gathertown.DBOutfit
	119, // 167: gathertown.DynamicGates.livekitEnabled:type_name -> gathertown.DynamicGate
	119, // 168: gathertown.DynamicGates.livekitSelfhostEnabled:type_name -> gathertown.DynamicGate
	119, // 169: gathertown.DynamicGates.agoraEnabled:type_name -> gathertown.DynamicGate
	119, // 170: gathertown.DynamicGates.chimeEnabled:type_name -> gathertown.DynamicGate
	119, // 171: gathertown.DynamicGates.gatherEnabled:type_name -> gathertown.DynamicGate
	282, // 172: gathertown.SpaceSetsSpaceMembers.members:type_name -> gathertown.SpaceSetsSpaceMembers.MembersEntry
	283, // 173: gathertown.SpaceSetsSpaceUsers.spaceUsers:type_name -> gathertown.SpaceSetsSpaceUsers.SpaceUsersEntry
	284, // 174: gathertown.PlayerCrafts.inputs:type_name -> gathertown.PlayerCrafts.InputsEntry
	250, // 175: gathertown.PlayerEditsChatMessage.reply:type_name -> gathertown.ChatReply
	285, // 176: gathertown.PlayerUpdatesInventory.items:type_name -> gathertown.PlayerUpdatesInventory.ItemsEntry
	286, // 177: gathertown.PlayerUpdatesInventory.order:type_name -> gathertown.PlayerUpdatesInventory.OrderEntry
	287, // 178: gathertown.SpaceUpdatesItems.items:type_name -> gathertown.SpaceUpdatesItems.ItemsEntry
	68,  // 179: gathertown.PrecomputedEnterLocation.enterLocation:type_name -> gathertown.MapLocation
	17,  // 180: gathertown.PlayerSetsDeskInfo.deskInfo:type_name -> gathertown.DeskInfoV2
	9,   // 181: gathertown.AccessRequest.guestCurrentlyEquippedWearables:type_name -> gathertown.DBOutfit
	168, // 182: gathertown.AccessRequestsUpdated.requests:type_name -> gathertown.AccessRequest
	68,  // 183: gathertown.AccessRequestRespondedTo.location:type_name -> gathertown.MapLocation
	171, // 184: gathertown.SpaceSetsGuestPassStatuses.playerGuestPassStatuses:type_name -> gathertown.PlayerGuestPassStatus
	18,  // 185: gathertown.SetDeskFromNextAvailableDesk.preferredDesk:type_name -> gathertown.MapAndDesk
	18,  // 186: gathertown.SetDeskFromNextAvailableDesk.desksToIgnore:type_name -> gathertown.MapAndDesk
	177, // 187: gathertown.ClientServerBatch.actions:type_name -> gathertown.ClientServerAction
	178, // 188: gathertown.ClientServerAction.clientHeartbeat:type_name -> gathertown.ClientHeartbeat
	179, // 189: gathertown.ClientServerAction.clientBackupHeartbeat:type_name -> gathertown.ClientBackupHeartbeat
	180, // 190: gathertown.ClientServerAction.updateSubscriptions:type_name -> gathertown.UpdateSubscriptions
	181, // 191: gathertown.ClientServerAction.move:type_name -> gathertown.Move
	183, // 192: gathertown.ClientServerAction.setAffiliation:type_name -> gathertown.SetAffiliation
	184, // 193: gathertown.ClientServerAction.setStatus:type_name -> gathertown.SetStatus
	187, // 194: gathertown.ClientServerAction.spotlight:type_name -> gathertown.Spotlight
	188, // 195: gathertown.ClientServerAction.ring:type_name -> gathertown.Ring
	191, // 196: gathertown.ClientServerAction.ban:type_name -> gathertown.Ban
	192, // 197: gathertown.ClientServerAction.kick:type_name -> gathertown.Kick
	194, // 198: gathertown.ClientServerAction.setImpassable:type_name -> gathertown.SetImpassable
	195, // 199: gathertown.ClientServerAction.chat:type_name -> gathertown.Chat
	4,   // 200: gathertown.ClientServerAction.interact:type_name -> gathertown.Deprecated
	199, // 201: gathertown.ClientServerAction.enterWhisper:type_name -> gathertown.EnterWhisper
	200, // 202: gathertown.ClientServerAction.leaveWhisper:type_name -> gathertown.LeaveWhisper
	219, // 203: gathertown.ClientServerAction.setEmojiStatus:type_name -> gathertown.SetEmojiStatus
	198, // 204: gathertown.ClientServerAction.activelySpeaking:type_name -> gathertown.ActivelySpeaking
	203, // 205: gathertown.ClientServerAction.setName:type_name -> gathertown.SetName
	204, // 206: gathertown.ClientServerAction.setTextStatus:type_name -> gathertown.SetTextStatus
	220, // 207: gathertown.ClientServerAction.teleport:type_name -> gathertown.Teleport
	216, // 208: gathertown.ClientServerAction.exit:type_name -> gathertown.Exit
	217, // 209: gathertown.ClientServerAction.enter:type_name -> gathertown.Enter
	4,   // 210: gathertown.ClientServerAction.setWorkCondition:type_name -> gathertown.Deprecated
	222, // 211: gathertown.ClientServerAction.respawn:type_name -> gathertown.Respawn
	221, // 212: gathertown.ClientServerAction.spawn:type_name -> gathertown.Spawn
	201, // 213: gathertown.ClientServerAction.ghost:type_name -> gathertown.Ghost
	226, // 214: gathertown.ClientServerAction.init:type_name -> gathertown.Init
	4,   // 215: gathertown.ClientServerAction.setOutfitString:type_name -> gathertown.Deprecated
	229, // 216: gathertown.ClientServerAction.shootConfetti:type_name -> gathertown.ShootConfetti
	230, // 217: gathertown.ClientServerAction.setEventStatus:type_name -> gathertown.SetEventStatus
	231, // 218: gathertown.ClientServerAction.setInConversation:type_name -> gathertown.SetInConversation
	4,   // 219: gathertown.ClientServerAction.setCurrentDesk:type_name -> gathertown.Deprecated
	232, // 220: gathertown.ClientServerAction.setCurrentArea:type_name -> gathertown.SetCurrentArea
	189, // 221: gathertown.ClientServerAction.setImagePointer:type_name -> gathertown.SetImagePointer
	4,   // 222: gathertown.ClientServerAction.setGoKartId:type_name -> gathertown.Deprecated
	36,  // 223: gathertown.ClientServerAction.mapSetDimensions:type_name -> gathertown.MapSetDimensions
	37,  // 224: gathertown.ClientServerAction.mapSetCollisions:type_name -> gathertown.MapSetCollisions
	39,  // 225: gathertown.ClientServerAction.mapSetBackgroundImagePath:type_name -> gathertown.MapSetBackgroundImagePath
	40,  // 226: gathertown.ClientServerAction.mapSetForegroundImagePath:type_name -> gathertown.MapSetForegroundImagePath
	4,   // 227: gathertown.ClientServerAction.mapSetSprites:type_name -> gathertown.Deprecated
	43,  // 228: gathertown.ClientServerAction.mapSetSpawns:type_name -> gathertown.MapSetSpawns
	4,   // 229: gathertown.ClientServerAction.mapSetSpaces:type_name -> gathertown.Deprecated
	44,  // 230: gathertown.ClientServerAction.mapSetPortals:type_name -> gathertown.MapSetPortals
	45,  // 231: gathertown.ClientServerAction.mapSetAnnouncer:type_name -> gathertown.MapSetAnnouncer
	46,  // 232: gathertown.ClientServerAction.mapSetAssets:type_name -> gathertown.MapSetAssets
	4,   // 233: gathertown.ClientServerAction.mapSetObjects:type_name -> gathertown.Deprecated
	48,  // 234: gathertown.ClientServerAction.mapSetName:type_name -> gathertown.MapSetName
	49,  // 235: gathertown.ClientServerAction.mapSetMuteOnEntry:type_name -> gathertown.MapSetMuteOnEntry
	50,  // 236: gathertown.ClientServerAction.mapSetUseDrawnBG:type_name -> gathertown.MapSetUseDrawnBG
	51,  // 237: gathertown.ClientServerAction.mapSetWalls:type_name -> gathertown.MapSetWalls
	52,  // 238: gathertown.ClientServerAction.mapSetFloors:type_name -> gathertown.MapSetFloors
	53,  // 239: gathertown.ClientServerAction.mapSetAreas:type_name -> gathertown.MapSetAreas
	227, // 240: gathertown.ClientServerAction.mapAddObject:type_name -> gathertown.MapAddObject
	4,   // 241: gathertown.ClientServerAction.mapDeleteObject:type_name -> gathertown.Deprecated
	42,  // 242: gathertown.ClientServerAction.mapSetSpawn:type_name -> gathertown.MapSetSpawn
	235, // 243: gathertown.ClientServerAction.setIsAlone:type_name -> gathertown.SetIsAlone
	56,  // 244: gathertown.ClientServerAction.mapSetMiniMapImagePath:type_name -> gathertown.MapSetMiniMapImagePath
	57,  // 245: gathertown.ClientServerAction.mapSetEnabledChats:type_name -> gathertown.MapSetEnabledChats
	58,  // 246: gathertown.ClientServerAction.mapSetDescription:type_name -> gathertown.MapSetDescription
	59,  // 247: gathertown.ClientServerAction.mapSetDecoration:type_name -> gathertown.MapSetDecoration
	60,  // 248: gathertown.ClientServerAction.mapSetTutorialTasks:type_name -> gathertown.MapSetTutorialTasks
	237, // 249: gathertown.ClientServerAction.playSound:type_name -> gathertown.PlaySound
	63,  // 250: gathertown.ClientServerAction.mapSetScript:type_name -> gathertown.MapSetScript
	236, // 251: gathertown.ClientServerAction.setIsMobile:type_name -> gathertown.SetIsMobile
	190, // 252: gathertown.ClientServerAction.setScreenPointer:type_name -> gathertown.SetScreenPointer
	202, // 253: gathertown.ClientServerAction.setEmoteV2:type_name -> gathertown.SetEmoteV2
	239, // 254: gathertown.ClientServerAction.setFocusModeEndTime:type_name -> gathertown.SetFocusModeEndTime
	55,  // 255: gathertown.ClientServerAction.mapDeleteObjectById:type_name -> gathertown.MapDeleteObjectById
	242, // 256: gathertown.ClientServerAction.customAction:type_name -> gathertown.CustomAction
	193, // 257: gathertown.ClientServerAction.block:type_name -> gathertown.Block
	240, // 258: gathertown.ClientServerAction.setItemString:type_name -> gathertown.SetItemString
	4,   // 259: gathertown.ClientServerAction.triggerItem:type_name -> gathertown.Deprecated
	196, // 260: gathertown.ClientServerAction.notify:type_name -> gathertown.Notify
	243, // 261: gathertown.ClientServerAction.setFollowTarget:type_name -> gathertown.SetFollowTarget
	244, // 262: gathertown.ClientServerAction.requestToLead:type_name -> gathertown.RequestToLead
	245, // 263: gathertown.ClientServerAction.enterPortal:type_name -> gathertown.EnterPortal
	246, // 264: gathertown.ClientServerAction.setManualVideoSrc:type_name -> gathertown.SetManualVideoSrc
	247, // 265: gathertown.ClientServerAction.setSubtitle:type_name -> gathertown.SetSubtitle
	4,   // 266: gathertown.ClientServerAction.playerUpdatesSession:type_name -> gathertown.Deprecated
	151, // 267: gathertown.ClientServerAction.mapMoveObject:type_name -> gathertown.MapMoveObject
	251, // 268: gathertown.ClientServerAction.chatMessageUpdated:type_name -> gathertown.ChatMessageUpdated
	153, // 269: gathertown.ClientServerAction.fxShakeObject:type_name -> gathertown.FXShakeObject
	154, // 270: gathertown.ClientServerAction.fxShakeCamera:type_name -> gathertown.FXShakeCamera
	253, // 271: gathertown.ClientServerAction.registerCommand:type_name -> gathertown.RegisterCommand
	252, // 272: gathertown.ClientServerAction.sendCommand:type_name -> gathertown.SendCommand
	249, // 273: gathertown.ClientServerAction.speakerUpdatesSession:type_name -> gathertown.SpeakerUpdatesSession
	256, // 274: gathertown.ClientServerAction.addInventoryItem:type_name -> gathertown.AddInventoryItem
	257, // 275: gathertown.ClientServerAction.removeInventoryItem:type_name -> gathertown.RemoveInventoryItem
	233, // 276: gathertown.ClientServerAction.setVehicleId:type_name -> gathertown.SetVehicleId
	234, // 277: gathertown.ClientServerAction.setSpeedModifier:type_name -> gathertown.SetSpeedModifier
	255, // 278: gathertown.ClientServerAction.highFive:type_name -> gathertown.HighFive
	159, // 279: gathertown.ClientServerAction.updateSpaceItems:type_name -> gathertown.SpaceUpdatesItems
	238, // 280: gathertown.ClientServerAction.stopSound:type_name -> gathertown.StopSound
	258, // 281: gathertown.ClientServerAction.hipToBeSquare:type_name -> gathertown.HipToBeSquare
	254, // 282: gathertown.ClientServerAction.craft:type_name -> gathertown.Craft
	259, // 283: gathertown.ClientServerAction.triggerInventoryItem:type_name -> gathertown.TriggerInventoryItem
	260, // 284: gathertown.ClientServerAction.setAllowScreenPointer:type_name -> gathertown.SetAllowScreenPointer
	218, // 285: gathertown.ClientServerAction.precomputeEnter:type_name -> gathertown.PrecomputeEnter
	182, // 286: gathertown.ClientServerAction.requestMute:type_name -> gathertown.RequestMute
	261, // 287: gathertown.ClientServerAction.setDeskInfo:type_name -> gathertown.SetDeskInfo
	41,  // 288: gathertown.ClientServerAction.mapSetNooks:type_name -> gathertown.MapSetNooks
	224, // 289: gathertown.ClientServerAction.requestToJoinNook:type_name -> gathertown.RequestToJoinNook
	225, // 290: gathertown.ClientServerAction.updateNookPermission:type_name -> gathertown.UpdateNookPermission
	262, // 291: gathertown.ClientServerAction.wave:type_name -> gathertown.Wave
	205, // 292: gathertown.ClientServerAction.setPronouns:type_name -> gathertown.SetPronouns
	206, // 293: gathertown.ClientServerAction.setTitle:type_name -> gathertown.SetTitle
	210, // 294: gathertown.ClientServerAction.setTimezone:type_name -> gathertown.SetTimezone
	211, // 295: gathertown.ClientServerAction.setPhone:type_name -> gathertown.SetPhone
	213, // 296: gathertown.ClientServerAction.setDescription:type_name -> gathertown.SetDescription
	214, // 297: gathertown.ClientServerAction.setProfileImageUrl:type_name -> gathertown.SetProfileImageUrl
	215, // 298: gathertown.ClientServerAction.setPersonalImageUrl:type_name -> gathertown.SetPersonalImageUrl
	263, // 299: gathertown.ClientServerAction.setAway:type_name -> gathertown.SetAway
	207, // 300: gathertown.ClientServerAction.setCity:type_name -> gathertown.SetCity
	208, // 301: gathertown.ClientServerAction.setCountry:type_name -> gathertown.SetCountry
	209, // 302: gathertown.ClientServerAction.setStartDate:type_name -> gathertown.SetStartDate
	264, // 303: gathertown.ClientServerAction.startRecording:type_name -> gathertown.StartRecording
	265, // 304: gathertown.ClientServerAction.requestAccessViaCheckIn:type_name -> gathertown.RequestAccessViaCheckIn
	266, // 305: gathertown.ClientServerAction.respondToAccessRequest:type_name -> gathertown.RespondToAccessRequest
	185, // 306: gathertown.ClientServerAction.setAvailability:type_name -> gathertown.SetAvailability
	223, // 307: gathertown.ClientServerAction.respawnAtDesk:type_name -> gathertown.RespawnAtDesk
	173, // 308: gathertown.ClientServerAction.setDeskFromNextAvailableDesk:type_name -> gathertown.SetDeskFromNextAvailableDesk
	267, // 309: gathertown.ClientServerAction.setSpaceRolePermissionOverride:type_name -> gathertown.SetSpaceRolePermissionOverride
	186, // 310: gathertown.ClientServerAction.setCurrentlyEquippedWearables:type_name -> gathertown.SetCurrentlyEquippedWearables
	212, // 311: gathertown.ClientServerAction.setDisplayEmail:type_name -> gathertown.SetDisplayEmail
	54,  // 312: gathertown.ClientServerAction.mapDeleteObjectByKey:type_name -> gathertown.MapDeleteObjectByKey
	228, // 313: gathertown.ClientServerAction.mapUpdateObjects:type_name -> gathertown.MapUpdateObjects
	197, // 314: gathertown.ClientServerAction.interactWithObject:type_name -> gathertown.InteractWithObject
	241, // 315: gathertown.ClientServerAction.triggerObject:type_name -> gathertown.TriggerObject
	268, // 316: gathertown.ClientServerAction.joinChimeMeeting:type_name -> gathertown.JoinChimeMeeting
	288, // 317: gathertown.UpdateSubscriptions.subscriptions:type_name -> gathertown.UpdateSubscriptions.SubscriptionsEntry
	289, // 318: gathertown.UpdateSubscriptions.mapUpdateIds:type_name -> gathertown.UpdateSubscriptions.MapUpdateIdsEntry
	1,   // 319: gathertown.Move.dir:type_name -> gathertown.MoveDirectionEnum.ENUM
	9,   // 320: gathertown.SetCurrentlyEquippedWearables.currentlyEquippedWearables:type_name -> gathertown.DBOutfit
	1,   // 321: gathertown.EnterWhisper.dir:type_name -> gathertown.MoveDirectionEnum.ENUM
	8,   // 322: gathertown.Enter.info:type_name -> gathertown.PlayerInitInfo
	68,  // 323: gathertown.PrecomputeEnter.enterLocation:type_name -> gathertown.MapLocation
	0,   // 324: gathertown.Teleport.direction:type_name -> gathertown.SpriteDirectionEnum.ENUM
	13,  // 325: gathertown.MapAddObject.object:type_name -> gathertown.WireObject
	290, // 326: gathertown.MapUpdateObjects.objects:type_name -> gathertown.MapUpdateObjects.ObjectsEntry
	291, // 327: gathertown.Craft.inputs:type_name -> gathertown.Craft.InputsEntry
	17,  // 328: gathertown.SetDeskInfo.deskInfo:type_name -> gathertown.DeskInfoV2
	9,   // 329: gathertown.RequestAccessViaCheckIn.currentlyEquippedWearables:type_name -> gathertown.DBOutfit
	3,   // 330: gathertown.RespondToAccessRequest.locationType:type_name -> gathertown.RespondToAccessRequest.LocationTypeEnum
	11,  // 331: gathertown.WireObjectSpritesheet.AnimationsEntry.value:type_name -> gathertown.WireObjectSpriteAnimConfig
	15,  // 332: gathertown.DeskObjects.ObjectsEntry.value:type_name -> gathertown.BackedUpDeskObject
	24,  // 333: gathertown.RequestedUsers.UsersEntry.value:type_name -> gathertown.RequestUser
	27,  // 334: gathertown.MapSetNooks.NooksEntry.value:type_name -> gathertown.NookDiff
	13,  // 335: gathertown.MapSetObjectsV2.ObjectsEntry.value:type_name -> gathertown.WireObject
	34,  // 336: gathertown.MapSetAreas.AreasEntry.value:type_name -> gathertown.WireArea
	65,  // 337: gathertown.Inventory.ItemsEntry.value:type_name -> gathertown.InventoryItem
	67,  // 338: gathertown.SpaceItem.AbilitiesEntry.value:type_name -> gathertown.ItemAbility
	14,  // 339: gathertown.SpaceSetsSpaceMembers.MembersEntry.value:type_name -> gathertown.SpaceMemberInfo
	122, // 340: gathertown.SpaceSetsSpaceUsers.SpaceUsersEntry.value:type_name -> gathertown.WireSpaceUser
	65,  // 341: gathertown.PlayerUpdatesInventory.ItemsEntry.value:type_name -> gathertown.InventoryItem
	66,  // 342: gathertown.SpaceUpdatesItems.ItemsEntry.value:type_name -> gathertown.SpaceItem
	13,  // 343: gathertown.MapUpdateObjects.ObjectsEntry.value:type_name -> gathertown.WireObject
	344, // [344:344] is the sub-list for method output_type
	344, // [344:344] is the sub-list for method input_type
	344, // [344:344] is the sub-list for extension type_name
	344, // [344:344] is the sub-list for extension extendee
	0,   // [0:344] is the sub-list for field type_name
}

func init() { file_gathertown_events_proto_init() }
func file_gathertown_events_proto_init() {
	if File_gathertown_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gathertown_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deprecated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpriteDirectionEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveDirectionEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBOutfit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireObjectSpritesheetFraming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireObjectSpriteAnimConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireObjectSpritesheet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackedUpDeskObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeskObjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeskInfoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapAndDesk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Space); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NookCoords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowedUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestedUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NookDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpawnPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Portal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Announcer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBDesk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetDimensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetCollisions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetCollisionsBits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetBackgroundImagePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetForegroundImagePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetNooks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetSpawn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetSpawns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetPortals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetAnnouncer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetAssets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetObjectsV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetMuteOnEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetUseDrawnBG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetWalls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetFloors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetAreas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapDeleteObjectByKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapDeleteObjectById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetMiniMapImagePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetEnabledChats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetDecoration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetTutorialTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireTutorialTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialTaskMapArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSetScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerClientBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerClientEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerHeartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Warn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ready); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerJoins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GotRequestMute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMoves); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsAvailability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSpotlights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsImagePointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetScreenPointerServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerChats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerWaves); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInteractsWithObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGhosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerEntersWhisper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerEntersWhisperV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerLeavesWhisper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerActivelySpeaks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsEmoteV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsLastRaisedHand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsLastActive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsTextStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsPronouns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsCountry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsStartDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsTimezone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsPhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsDisplayEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsProfileImageUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsPersonalImageUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsIsMobile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsEmojiStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsAffiliation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerExits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsCurrentlyEquippedWearables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsIsSignedIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceOverwrites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicGate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicGates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceSetsSpaceMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireSpaceUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceSetsSpaceUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceIsClosed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerEntersPortal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookieFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceSetsIdMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerShootsConfetti); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsEventStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsInConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsCurrentArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsGoKartId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsVehicleId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsSpeedModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsIsAlone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpacePlaysSound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceStopsSound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsFocusModeEndTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBlocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerUpdatesFocusModeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsItemString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerTriggersObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerNotifies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsFollowTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRequestsToLead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsManualVideoSrc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsIsNpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsSubtitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerCrafts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapMoveObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerEditsChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FXShakeObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FXShakeCamera); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHighFives); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSendsCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceRegistersCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerUpdatesInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceUpdatesItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerTriggersInventoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsAllowScreenPointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrecomputedEnterLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsDeskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceSetsCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceOverCapacityDeniesUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSetsAway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStartsRecording); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRequestsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRequestRespondedTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGuestPassStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceSetsGuestPassStatuses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeskFromNextAvailableDesk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceRolePermissionOverrideUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChimeSetsUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientServerBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientServerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientHeartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientBackupHeartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubscriptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Move); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAffiliation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAvailability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCurrentlyEquippedWearables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spotlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetImagePointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetScreenPointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ban); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetImpassable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractWithObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivelySpeaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterWhisper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveWhisper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ghost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEmoteV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTextStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPronouns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCountry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStartDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTimezone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDisplayEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProfileImageUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPersonalImageUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrecomputeEnter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEmojiStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Teleport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spawn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Respawn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespawnAtDesk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestToJoinNook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNookPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Init); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapAddObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUpdateObjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShootConfetti); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEventStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCurrentArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVehicleId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSpeedModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIsAlone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIsMobile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaySound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopSound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFocusModeEndTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetItemString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFollowTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestToLead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterPortal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetManualVideoSrc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSubtitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapCommitsChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeakerUpdatesSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessageUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Craft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighFive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInventoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInventoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HipToBeSquare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerInventoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAllowScreenPointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRecording); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAccessViaCheckIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondToAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSpaceRolePermissionOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gathertown_events_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinChimeMeeting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gathertown_events_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[66].OneofWrappers = []interface{}{
		(*ServerClientEvent_Info)(nil),
		(*ServerClientEvent_Warn)(nil),
		(*ServerClientEvent_Error)(nil),
		(*ServerClientEvent_Ready)(nil),
		(*ServerClientEvent_ServerHeartbeat)(nil),
		(*ServerClientEvent_TransactionStatus)(nil),
		(*ServerClientEvent_PlayerMoves)(nil),
		(*ServerClientEvent_PlayerSetsStatus)(nil),
		(*ServerClientEvent_PlayerSpotlights)(nil),
		(*ServerClientEvent_PlayerRings)(nil),
		(*ServerClientEvent_PlayerChats)(nil),
		(*ServerClientEvent_PlayerGhosts)(nil),
		(*ServerClientEvent_PlayerEntersWhisper)(nil),
		(*ServerClientEvent_PlayerLeavesWhisper)(nil),
		(*ServerClientEvent_PlayerActivelySpeaks)(nil),
		(*ServerClientEvent_PlayerSetsName)(nil),
		(*ServerClientEvent_PlayerSetsTextStatus)(nil),
		(*ServerClientEvent_PlayerSetsEmojiStatus)(nil),
		(*ServerClientEvent_PlayerSetsAffiliation)(nil),
		(*ServerClientEvent_PlayerExits)(nil),
		(*ServerClientEvent_PlayerSetsIsSignedIn)(nil),
		(*ServerClientEvent_SpaceOverwrites)(nil),
		(*ServerClientEvent_SpaceIsClosed)(nil),
		(*ServerClientEvent_PlayerEntersPortal)(nil),
		(*ServerClientEvent_SpaceSetsIdMapping)(nil),
		(*ServerClientEvent_PlayerSetsLastActive)(nil),
		(*ServerClientEvent_PlayerShootsConfetti)(nil),
		(*ServerClientEvent_PlayerSetsEventStatus)(nil),
		(*ServerClientEvent_PlayerSetsInConversation)(nil),
		(*ServerClientEvent_PlayerSetsCurrentArea)(nil),
		(*ServerClientEvent_PlayerSetsImagePointer)(nil),
		(*ServerClientEvent_CookieFound)(nil),
		(*ServerClientEvent_PlayerEntersWhisperV2)(nil),
		(*ServerClientEvent_PlayerSetsGoKartId)(nil),
		(*ServerClientEvent_MapSetDimensions)(nil),
		(*ServerClientEvent_MapSetBackgroundImagePath)(nil),
		(*ServerClientEvent_MapSetForegroundImagePath)(nil),
		(*ServerClientEvent_MapSetSpawns)(nil),
		(*ServerClientEvent_MapSetPortals)(nil),
		(*ServerClientEvent_MapSetAnnouncer)(nil),
		(*ServerClientEvent_MapSetAssets)(nil),
		(*ServerClientEvent_MapSetName)(nil),
		(*ServerClientEvent_MapSetMuteOnEntry)(nil),
		(*ServerClientEvent_MapSetUseDrawnBG)(nil),
		(*ServerClientEvent_MapSetWalls)(nil),
		(*ServerClientEvent_MapSetFloors)(nil),
		(*ServerClientEvent_MapSetAreas)(nil),
		(*ServerClientEvent_MapSetSpawn)(nil),
		(*ServerClientEvent_PlayerSetsIsAlone)(nil),
		(*ServerClientEvent_PlayerJoins)(nil),
		(*ServerClientEvent_MapSetEnabledChats)(nil),
		(*ServerClientEvent_MapSetDescription)(nil),
		(*ServerClientEvent_MapSetDecoration)(nil),
		(*ServerClientEvent_MapSetTutorialTasks)(nil),
		(*ServerClientEvent_MapSetMiniMapImagePath)(nil),
		(*ServerClientEvent_SpacePlaysSound)(nil),
		(*ServerClientEvent_MapSetScript)(nil),
		(*ServerClientEvent_PlayerSetsIsMobile)(nil),
		(*ServerClientEvent_SetScreenPointerServer)(nil),
		(*ServerClientEvent_PlayerSetsEmoteV2)(nil),
		(*ServerClientEvent_PlayerSetsFocusModeEndTime)(nil),
		(*ServerClientEvent_SpaceSetsSpaceMembers)(nil),
		(*ServerClientEvent_SpaceSetsSpaceUsers)(nil),
		(*ServerClientEvent_CustomEvent)(nil),
		(*ServerClientEvent_PlayerBlocks)(nil),
		(*ServerClientEvent_PlayerUpdatesFocusModeStatus)(nil),
		(*ServerClientEvent_PlayerNotifies)(nil),
		(*ServerClientEvent_PlayerSetsItemString)(nil),
		(*ServerClientEvent_PlayerSetsFollowTarget)(nil),
		(*ServerClientEvent_PlayerRequestsToLead)(nil),
		(*ServerClientEvent_PlayerSetsManualVideoSrc)(nil),
		(*ServerClientEvent_PlayerSetsIsNpc)(nil),
		(*ServerClientEvent_PlayerSetsSubtitle)(nil),
		(*ServerClientEvent_MapCommitsChanges)(nil),
		(*ServerClientEvent_MapMoveObject)(nil),
		(*ServerClientEvent_PlayerEditsChatMessage)(nil),
		(*ServerClientEvent_FxShakeObject)(nil),
		(*ServerClientEvent_FxShakeCamera)(nil),
		(*ServerClientEvent_PlayerSendsCommand)(nil),
		(*ServerClientEvent_SpaceRegistersCommand)(nil),
		(*ServerClientEvent_SpeakerUpdatesSession)(nil),
		(*ServerClientEvent_PlayerUpdatesInventory)(nil),
		(*ServerClientEvent_SpaceUpdatesItems)(nil),
		(*ServerClientEvent_PlayerSetsVehicleId)(nil),
		(*ServerClientEvent_PlayerSetsSpeedModifier)(nil),
		(*ServerClientEvent_PlayerHighFives)(nil),
		(*ServerClientEvent_SpaceStopsSound)(nil),
		(*ServerClientEvent_HipToBeSquare)(nil),
		(*ServerClientEvent_PlayerCrafts)(nil),
		(*ServerClientEvent_PlayerTriggersInventoryItem)(nil),
		(*ServerClientEvent_PlayerSetsAllowScreenPointer)(nil),
		(*ServerClientEvent_PrecomputedEnterLocation)(nil),
		(*ServerClientEvent_GotRequestMute)(nil),
		(*ServerClientEvent_PlayerSetsDeskInfo)(nil),
		(*ServerClientEvent_MapSetNooks)(nil),
		(*ServerClientEvent_DynamicGates)(nil),
		(*ServerClientEvent_PlayerWaves)(nil),
		(*ServerClientEvent_PlayerSetsPronouns)(nil),
		(*ServerClientEvent_PlayerSetsTitle)(nil),
		(*ServerClientEvent_PlayerSetsTimezone)(nil),
		(*ServerClientEvent_PlayerSetsDescription)(nil),
		(*ServerClientEvent_PlayerSetsPhone)(nil),
		(*ServerClientEvent_PlayerSetsPersonalImageUrl)(nil),
		(*ServerClientEvent_PlayerSetsProfileImageUrl)(nil),
		(*ServerClientEvent_SpaceSetsCapacity)(nil),
		(*ServerClientEvent_SpaceOverCapacityDeniesUser)(nil),
		(*ServerClientEvent_PlayerSetsAway)(nil),
		(*ServerClientEvent_MapSetCollisionsBits)(nil),
		(*ServerClientEvent_PlayerSetsCity)(nil),
		(*ServerClientEvent_PlayerSetsCountry)(nil),
		(*ServerClientEvent_PlayerSetsStartDate)(nil),
		(*ServerClientEvent_PlayerStartsRecording)(nil),
		(*ServerClientEvent_AccessRequestsUpdated)(nil),
		(*ServerClientEvent_AccessRequestRespondedTo)(nil),
		(*ServerClientEvent_SpaceSetsGuestPassStatuses)(nil),
		(*ServerClientEvent_PlayerSetsAvailability)(nil),
		(*ServerClientEvent_SubscriptionsUpdated)(nil),
		(*ServerClientEvent_SpaceRolePermissionOverrideUpdated)(nil),
		(*ServerClientEvent_PlayerSetsLastRaisedHand)(nil),
		(*ServerClientEvent_PlayerSetsCurrentlyEquippedWearables)(nil),
		(*ServerClientEvent_PlayerSetsDisplayEmail)(nil),
		(*ServerClientEvent_MapDeleteObjectByKey)(nil),
		(*ServerClientEvent_MapSetObjectsV2)(nil),
		(*ServerClientEvent_PlayerInteractsWithObject)(nil),
		(*ServerClientEvent_PlayerTriggersObject)(nil),
		(*ServerClientEvent_ChimeSetsUserInfo)(nil),
	}
	file_gathertown_events_proto_msgTypes[73].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[76].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[78].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[83].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[86].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[92].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[115].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[116].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[121].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[139].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[147].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[148].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[149].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[150].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[151].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[163].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[164].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[169].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[173].OneofWrappers = []interface{}{
		(*ClientServerAction_ClientHeartbeat)(nil),
		(*ClientServerAction_ClientBackupHeartbeat)(nil),
		(*ClientServerAction_UpdateSubscriptions)(nil),
		(*ClientServerAction_Move)(nil),
		(*ClientServerAction_SetAffiliation)(nil),
		(*ClientServerAction_SetStatus)(nil),
		(*ClientServerAction_Spotlight)(nil),
		(*ClientServerAction_Ring)(nil),
		(*ClientServerAction_Ban)(nil),
		(*ClientServerAction_Kick)(nil),
		(*ClientServerAction_SetImpassable)(nil),
		(*ClientServerAction_Chat)(nil),
		(*ClientServerAction_Interact)(nil),
		(*ClientServerAction_EnterWhisper)(nil),
		(*ClientServerAction_LeaveWhisper)(nil),
		(*ClientServerAction_SetEmojiStatus)(nil),
		(*ClientServerAction_ActivelySpeaking)(nil),
		(*ClientServerAction_SetName)(nil),
		(*ClientServerAction_SetTextStatus)(nil),
		(*ClientServerAction_Teleport)(nil),
		(*ClientServerAction_Exit)(nil),
		(*ClientServerAction_Enter)(nil),
		(*ClientServerAction_SetWorkCondition)(nil),
		(*ClientServerAction_Respawn)(nil),
		(*ClientServerAction_Spawn)(nil),
		(*ClientServerAction_Ghost)(nil),
		(*ClientServerAction_Init)(nil),
		(*ClientServerAction_SetOutfitString)(nil),
		(*ClientServerAction_ShootConfetti)(nil),
		(*ClientServerAction_SetEventStatus)(nil),
		(*ClientServerAction_SetInConversation)(nil),
		(*ClientServerAction_SetCurrentDesk)(nil),
		(*ClientServerAction_SetCurrentArea)(nil),
		(*ClientServerAction_SetImagePointer)(nil),
		(*ClientServerAction_SetGoKartId)(nil),
		(*ClientServerAction_MapSetDimensions)(nil),
		(*ClientServerAction_MapSetCollisions)(nil),
		(*ClientServerAction_MapSetBackgroundImagePath)(nil),
		(*ClientServerAction_MapSetForegroundImagePath)(nil),
		(*ClientServerAction_MapSetSprites)(nil),
		(*ClientServerAction_MapSetSpawns)(nil),
		(*ClientServerAction_MapSetSpaces)(nil),
		(*ClientServerAction_MapSetPortals)(nil),
		(*ClientServerAction_MapSetAnnouncer)(nil),
		(*ClientServerAction_MapSetAssets)(nil),
		(*ClientServerAction_MapSetObjects)(nil),
		(*ClientServerAction_MapSetName)(nil),
		(*ClientServerAction_MapSetMuteOnEntry)(nil),
		(*ClientServerAction_MapSetUseDrawnBG)(nil),
		(*ClientServerAction_MapSetWalls)(nil),
		(*ClientServerAction_MapSetFloors)(nil),
		(*ClientServerAction_MapSetAreas)(nil),
		(*ClientServerAction_MapAddObject)(nil),
		(*ClientServerAction_MapDeleteObject)(nil),
		(*ClientServerAction_MapSetSpawn)(nil),
		(*ClientServerAction_SetIsAlone)(nil),
		(*ClientServerAction_MapSetMiniMapImagePath)(nil),
		(*ClientServerAction_MapSetEnabledChats)(nil),
		(*ClientServerAction_MapSetDescription)(nil),
		(*ClientServerAction_MapSetDecoration)(nil),
		(*ClientServerAction_MapSetTutorialTasks)(nil),
		(*ClientServerAction_PlaySound)(nil),
		(*ClientServerAction_MapSetScript)(nil),
		(*ClientServerAction_SetIsMobile)(nil),
		(*ClientServerAction_SetScreenPointer)(nil),
		(*ClientServerAction_SetEmoteV2)(nil),
		(*ClientServerAction_SetFocusModeEndTime)(nil),
		(*ClientServerAction_MapDeleteObjectById)(nil),
		(*ClientServerAction_CustomAction)(nil),
		(*ClientServerAction_Block)(nil),
		(*ClientServerAction_SetItemString)(nil),
		(*ClientServerAction_TriggerItem)(nil),
		(*ClientServerAction_Notify)(nil),
		(*ClientServerAction_SetFollowTarget)(nil),
		(*ClientServerAction_RequestToLead)(nil),
		(*ClientServerAction_EnterPortal)(nil),
		(*ClientServerAction_SetManualVideoSrc)(nil),
		(*ClientServerAction_SetSubtitle)(nil),
		(*ClientServerAction_PlayerUpdatesSession)(nil),
		(*ClientServerAction_MapMoveObject)(nil),
		(*ClientServerAction_ChatMessageUpdated)(nil),
		(*ClientServerAction_FxShakeObject)(nil),
		(*ClientServerAction_FxShakeCamera)(nil),
		(*ClientServerAction_RegisterCommand)(nil),
		(*ClientServerAction_SendCommand)(nil),
		(*ClientServerAction_SpeakerUpdatesSession)(nil),
		(*ClientServerAction_AddInventoryItem)(nil),
		(*ClientServerAction_RemoveInventoryItem)(nil),
		(*ClientServerAction_SetVehicleId)(nil),
		(*ClientServerAction_SetSpeedModifier)(nil),
		(*ClientServerAction_HighFive)(nil),
		(*ClientServerAction_UpdateSpaceItems)(nil),
		(*ClientServerAction_StopSound)(nil),
		(*ClientServerAction_HipToBeSquare)(nil),
		(*ClientServerAction_Craft)(nil),
		(*ClientServerAction_TriggerInventoryItem)(nil),
		(*ClientServerAction_SetAllowScreenPointer)(nil),
		(*ClientServerAction_PrecomputeEnter)(nil),
		(*ClientServerAction_RequestMute)(nil),
		(*ClientServerAction_SetDeskInfo)(nil),
		(*ClientServerAction_MapSetNooks)(nil),
		(*ClientServerAction_RequestToJoinNook)(nil),
		(*ClientServerAction_UpdateNookPermission)(nil),
		(*ClientServerAction_Wave)(nil),
		(*ClientServerAction_SetPronouns)(nil),
		(*ClientServerAction_SetTitle)(nil),
		(*ClientServerAction_SetTimezone)(nil),
		(*ClientServerAction_SetPhone)(nil),
		(*ClientServerAction_SetDescription)(nil),
		(*ClientServerAction_SetProfileImageUrl)(nil),
		(*ClientServerAction_SetPersonalImageUrl)(nil),
		(*ClientServerAction_SetAway)(nil),
		(*ClientServerAction_SetCity)(nil),
		(*ClientServerAction_SetCountry)(nil),
		(*ClientServerAction_SetStartDate)(nil),
		(*ClientServerAction_StartRecording)(nil),
		(*ClientServerAction_RequestAccessViaCheckIn)(nil),
		(*ClientServerAction_RespondToAccessRequest)(nil),
		(*ClientServerAction_SetAvailability)(nil),
		(*ClientServerAction_RespawnAtDesk)(nil),
		(*ClientServerAction_SetDeskFromNextAvailableDesk)(nil),
		(*ClientServerAction_SetSpaceRolePermissionOverride)(nil),
		(*ClientServerAction_SetCurrentlyEquippedWearables)(nil),
		(*ClientServerAction_SetDisplayEmail)(nil),
		(*ClientServerAction_MapDeleteObjectByKey)(nil),
		(*ClientServerAction_MapUpdateObjects)(nil),
		(*ClientServerAction_InteractWithObject)(nil),
		(*ClientServerAction_TriggerObject)(nil),
		(*ClientServerAction_JoinChimeMeeting)(nil),
	}
	file_gathertown_events_proto_msgTypes[177].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[179].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[180].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[181].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[182].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[191].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[193].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[197].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[198].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[199].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[200].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[201].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[202].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[203].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[204].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[205].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[206].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[207].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[208].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[209].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[210].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[211].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[213].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[214].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[215].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[216].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[220].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[222].OneofWrappers = []interface{}{
		(*Init_Token)(nil),
		(*Init_ApiKey)(nil),
	}
	file_gathertown_events_proto_msgTypes[224].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[225].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[226].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[227].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[228].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[229].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[230].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[231].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[233].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[234].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[235].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[236].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[237].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[238].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[239].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[241].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[242].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[243].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[245].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[248].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[251].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[253].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[257].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[259].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[260].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[261].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[262].OneofWrappers = []interface{}{}
	file_gathertown_events_proto_msgTypes[264].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gathertown_events_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   288,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gathertown_events_proto_goTypes,
		DependencyIndexes: file_gathertown_events_proto_depIdxs,
		EnumInfos:         file_gathertown_events_proto_enumTypes,
		MessageInfos:      file_gathertown_events_proto_msgTypes,
	}.Build()
	File_gathertown_events_proto = out.File
	file_gathertown_events_proto_rawDesc = nil
	file_gathertown_events_proto_goTypes = nil
	file_gathertown_events_proto_depIdxs = nil
}
